# map idx format to csv's:
$ ./process_mnist.py

# map 100 mnist image-data to images:
$ ./mnist-data-to-images.py 100

# map images to 10*10-image-ngrams sw file:
$ ./create-image-sw.py 10 work-on-handwritten-digits/images/mnist-image-*.bmp

# rename sw file:
$ mv image-ngram-superpositions-10.sw mnist-100--image-ngram-superpositions-10.sw

# average categorize it:
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.8,phi,layer-1]
  rescale-op |*> #=> rescale[255] layer-1 |_self>
  map[rescale-op,rescaled-layer-1] rel-kets[layer-1]
  save mnist-100--save-average-categorize--0_8--rescaled-layer-1.sw

  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.8,phi,layer-1]
  save mnist-100--save-average-categorize--0_8.sw
  how-many rel-kets[layer-0]
  how-many rel-kets[layer-1]

$ ./create-sw-images.py

--------------------------------------------

$ ./create-image-sw.py 10 small-lenna--edge-enhanced-40.png
$ cd sw-examples
$ mv image-ngram-superpositions-10.sw small-lenna-edge-40--image-ngram-superpositions-10.sw
$ cd ..
  load small-lenna-edge-40--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.7,phi,layer-1]
Time taken: 1 week, 1 day, 11 hours, 47 minutes, 40 seconds, 433 milliseconds

  save small-lenna-edge-40--save-average-categorize--0_7.sw
$ cd sw-examples
$ grep "^layer-1 " small-lenna-edge-40--save-average-categorize--0_7.sw > small-lenna-edge-40--layer-1--0_7.sw
$ cd ..
$ ./create-sw-images.py
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt small-lenna-edge-40--average-categorize-0_7.jpg
--------------------------------------------------------------------------------
  load small-lenna-edge-40--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.4,phi,layer-1]
Time taken: 8 hours, 17 minutes, 21 seconds, 463 milliseconds
  save small-lenna-edge-40--save-average-categorize--0_4.sw
$ cd sw-examples
$ grep "^layer-1 " small-lenna-edge-40--save-average-categorize--0_4.sw > small-lenna-edge-40--layer-1--0_4.sw
$ cd ..
$ ./create-sw-images.py
$ cd work-on-handwritten-digits/
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt small-lenna-edge-40--average-categorize-0_4.jpg
$ time ./phi-transform.py 10 small-lenna--edge-enhanced-40.png
real    691m43.752s
------------------------------------------
load mnist-100--image-ngram-superpositions-10.sw
average-categorize[layer-0,0.5,phi,layer-1]
save mnist-100--save-average-categorize--0_5.sw
./create-sw-images.py
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-100--average-categorize-0_5.jpg

------------------------------------------
load mnist-100--image-ngram-superpositions-10.sw
average-categorize[layer-0,0.6,phi,layer-1]
save mnist-100--save-average-categorize--0_6.sw
./create-sw-images.py
$ ls -1tr mnist-100--average-categorize-images--threshold-0_6/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-100--average-categorize-0_6.jpg

------------------------------------------
load mnist-100--image-ngram-superpositions-10.sw
average-categorize[layer-0,0.7,phi,layer-1]
save mnist-100--save-average-categorize--0_7.sw
./create-sw-images.py
$ cd work-on-handwritten-digits/
$ ls -1tr mnist-100--average-categorize-images--threshold-0_7/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-100--average-categorize-0_7.jpg

------------------------------------------
load mnist-100--image-ngram-superpositions-10.sw
average-categorize[layer-0,0.65,phi,layer-1]
save mnist-100--save-average-categorize--0_65.sw
./create-sw-images.py
$ cd work-on-handwritten-digits/
$ mv average-categorize-images mnist-100--average-categorize-images--threshold-0_65
$ ls -1tr mnist-100--average-categorize-images--threshold-0_65/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-100--average-categorize-0_65.jpg

=======================================================================

-- create 100 test images:
$ ./mnist-data-to-images.py 100
$ ./create-image-sw.py 10 work-on-handwritten-digits/test-images/mnist-image-4.bmp
$ cd sw-examples/
$ mv image-ngram-superpositions-10.sw mnist-test-1--image-ngram-superpositions-10.sw
$ grep "^layer-1 " mnist-100--save-average-categorize--0_5.sw > mnist-100--layer-1--0_5.sw

  load mnist-test-1--image-ngram-superpositions-10.sw
  load mnist-100--layer-1--0_5.sw
  simm-op |*> #=> select[1,25] similar[layer-0,layer-1] |_self>
  map[simm-op,similarity] rel-kets[layer-0] |>

  rel-kets[layer-0]
  similarity |mnist-image-4: 10: 8: 7>
  save mnist-test-1--0_5-similarity.sw

x.apply_op(context,"similarity").select_range(1,1)

sa: select[1,1] similar-input[layer-1] layer-0 |mnist-image-4: 10: 0: 16>
x.apply_op(context,"layer-0").similar_input(context,"layer-1").select_range(1,1)

sa: layer-1 |phi: 2>
x.apply_op(context,"layer-1")

$ cd work-on-handwritten-digits
$ ls -1tr tmp-images/*.bmp > image-list.txt
$ convert -evaluate-sequence mean @image-list.txt average-image.jpg

----------------------------
$ ./phi-transform.py 10 work-on-handwritten-digits/test-images/mnist-image-85.bmp
$ cd work-on-handwritten-digits/
$ ls -1tr tmp-images/*.bmp > image-list.txt
$ convert -evaluate-sequence mean @image-list.txt average-image.jpg

--------------------------------------------
$ ./mnist-data-to-images.py 100
$ cd sw-examples/
$ grep "^layer-1 " mnist-100--save-average-categorize--0_5.sw > mnist-100--layer-1--0_5.sw
$ cd ..
$ ./phi-transform.py 10 work-on-handwritten-digits/test-images/*.bmp
time: 62 min

$ cd work-on-handwritten-digits/
$ ls -1tr test-images/*.bmp > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-test-100.jpg
$ ls -1tr phi-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-test-100--phi-transform-mnist-100-0_5.jpg

------------------------------------------------------------
$ ./mnist-data-to-images.py 1000
$ ./create-image-sw.py 10 work-on-handwritten-digits/train-images/
$ cd sw-examples
$ mv image-ngram-superpositions-10.sw mnist-1000--image-ngram-superpositions-10.sw
$ cd ..
$ ./the_semantic_db_console.py
sa: load mnist-1000--image-ngram-superpositions-10.sw       time: 8 minutes   (network speed killed me!!!)
sa: average-categorize[layer-0,0.5,phi,layer-1]             (time: 15 hours, 31 min)
sa: save mnist-1000--save-average-categorize--0_5.sw
$ cd sw-examples
$ grep "^layer-1 " mnist-1000--save-average-categorize--0_5.sw > mnist-1000--layer-1--0_5.sw
$ cd ..
$ mkdir work-on-handwritten-digits/average-categorize-images
$ ./create-sw-images.py
$ cd work-on-handwritten-digits/
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-1000--average-categorize-0_5.jpg
$ mkdir work-on-handwritten-digits/phi-images


$ ./phi-transform.py 10 work-on-handwritten-digits/test-images/*
--------------------------------------------------------------------------
$ ./create-image-sw.py 4 work-on-handwritten-digits/train-images/
real    5m56.122s
$ cd sw-examples
$ mv image-ngram-superpositions-4.sw mnist-1000--image-ngram-superpositions-4.sw
$ cd ..
$ ./the_semantic_db_console.py
  load mnist-1000--image-ngram-superpositions-4.sw
  average-categorize[layer-0,0.5,phi,layer-1]
Time taken: 10 hours, 20 minutes, 34 seconds, 453 milliseconds
  save mnist-1000--k_4--save-average-categorize--0_5.sw
$ cd sw-examples
$ grep "^layer-1 " mnist-1000--k_4--save-average-categorize--0_5.sw > mnist-1000--k_4--layer-1--0_5.sw
$ cd ..
$ ./create-sw-images.py
$ cd work-on-handwritten-digits/
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-1000--k_4--average-categorize-0_5.jpg
------------------------------------------------------------------------------------
$ ./the_semantic_db_console.py
  load mnist-1000--image-ngram-superpositions-4.sw
  average-categorize[layer-0,0.4,phi,layer-1]
Time taken: 6 hours, 14 minutes, 59 seconds, 714 milliseconds
  save mnist-1000--k_4--save-average-categorize--0_4.sw
$ cd sw-examples
grep "^layer-1 " mnist-1000--k_4--save-average-categorize--0_4.sw > mnist-1000--k_4--layer-1--0_4.sw
$ cd ..
$ ./create-sw-images.py
$ cd work-on-handwritten-digits/
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-1000--k_4--average-categorize-0_4.jpg
--------------------------------------------------------
$ ./the_semantic_db_console.py
  load mnist-1000--image-ngram-superpositions-4.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]

--------------------------------------
load mnist-100--image-ngram-superpositions-10.sw
average-categorize-suppress[layer-0,0.4,phi,layer-1]
save mnist-100--k_10--ave-cat-suppress--0_4.sw
$ cd sw-examples
grep "^layer-1 " mnist-100--k_10--ave-cat-suppress--0_4.sw > mnist-100--suppress--k_10--layer-1--0_4.sw
$ cd ..
$ ./create-sw-images.py
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-100--k_10--ave-cat-suppress-0_4--w_0_01.jpg


--------------------------------------
load mnist-1000--image-ngram-superpositions-4.sw
average-categorize-suppress[layer-0,0.4,phi,layer-1]
Time taken: 9 hours, 1 minute, 55 seconds, 308 milliseconds
save mnist-1000--k_4--ave-cat-suppress--0_4.sw
$ cd sw-examples
grep "^layer-1 " mnist-1000--k_4--ave-cat-suppress--0_4.sw > mnist-1000--suppress--k_4--layer-1--0_4.sw
$ cd ..
$ ./create-sw-images.py
------------------------------------------------------------------------
Now try with rescale switched on:
load mnist-100--image-ngram-superpositions-10.sw
average-categorize-suppress[layer-0,0.4,phi,layer-1]
Time taken: 2 minutes, 11 seconds, 324 milliseconds
save mnist-100--k_10--ave-cat-rescale--0_4.sw
$ cd sw-examples
grep "^layer-1 " mnist-100--k_10--ave-cat-rescale--0_4.sw > mnist-100--rescale--k_10--layer-1--0_4.sw
$ cd ..
$ ./create-sw-images.py
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-100--k_10--ave-cat-rescale-0_4--w_0.jpg
--------------------------------------------------------------
load mnist-1000--image-ngram-superpositions-4.sw
average-categorize-suppress[layer-0,0.4,phi,layer-1]
Time taken: 33 minutes, 4 seconds, 704 milliseconds
save mnist-1000--k_4--ave-cat-rescale--0_4.sw
$ cd sw-examples
grep "^layer-1 " mnist-1000--k_4--ave-cat-rescale--0_4.sw > mnist-1000--rescale--k_4--layer-1--0_4.sw
$ cd ..
$ ./create-sw-images.py
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-1000--k_10--ave-cat-rescale-0_4--w_0.jpg
----------------------------------------------------
Now try with rescale to [0,255]:
load mnist-1000--image-ngram-superpositions-4.sw
average-categorize-suppress[layer-0,0.4,phi,layer-1]
Time taken: 42 minutes, 36 seconds, 315 milliseconds
save mnist-1000--k_4--ave-cat-full-rescale--0_4.sw
$ cd sw-examples
grep "^layer-1 " mnist-1000--k_4--ave-cat-full-rescale--0_4.sw > mnist-1000--full-rescale--k_4--layer-1--0_4.sw
$ grep -v "nan" mnist-1000--full-rescale--k_4--layer-1--0_4.sw > tmp
$ mv tmp mnist-1000--full-rescale--k_4--layer-1--0_4.sw

$ cd ..
$ ./create-sw-images.py
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-1000--k_10--ave-cat-full-rescale-0_4--w_0.jpg

---------------------------------------------------
Now try with rescale to [0,255] only for the final superpositions
load mnist-1000--image-ngram-superpositions-4.sw
average-categorize-suppress[layer-0,0.4,phi,layer-1]
Time taken: 27 minutes, 37 seconds, 10 milliseconds
save mnist-1000--k_4--ave-cat-final-rescale--0_4.sw
$ cd sw-examples
grep "^layer-1 " mnist-1000--k_4--ave-cat-final-rescale--0_4.sw > mnist-1000--final-rescale--k_4--layer-1--0_4.sw

$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-1000--k_4--ave-cat-final-rescale-0_4--w_0.jpg
Nope. No major difference from non-final rescale
----------------------------------------------------------
Now try with k = 5, though final-rescale is still on:
$ ./create-image-sw.py 5 work-on-handwritten-digits/train-images/
$ mv image-ngram-superpositions-5.sw mnist-1000--image-ngram-superpositions-5.sw
load mnist-1000--image-ngram-superpositions-5.sw
average-categorize-suppress[layer-0,0.4,phi,layer-1]
Time taken: 34 minutes, 10 seconds, 243 milliseconds
save mnist-1000--k_5--ave-cat-final-rescale--0_4.sw
$ cd sw-examples
grep "^layer-1 " mnist-1000--k_5--ave-cat-final-rescale--0_4.sw > mnist-1000--final-rescale--k_5--layer-1--0_4.sw
$ cd .. 
$ ./create-sw-images.py
$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-1000--k_5--ave-cat-final-rescale-0_4--w_0.jpg
--------------------------------------------------------------------------
let's ramp it up to 60,000 training images:
$ time ./mnist-data-to-images.py 60000
real    2m31.817s
Nope! Too much RAM!! Maybe need to avoid sp step, and just images to list, and then average-categorize.
----
$ ./mnist-data-to-images.py 10000
$ time ./create-average-images.py 5 work-on-handwritten-digits/train-images/
real    726m41.907s
k = 5, t = 0.5

$ ls -1tr average-categorize-images/* > image-list.txt
$ montage -geometry +2+2 @image-list.txt mnist-10000-train--ave-cat--k_5--t_0_5.jpg
-----------------------------------------------------------
$ ./mnist-data-to-images.py 10000
$ time ./create-average-images.py 5 work-on-handwritten-digits/train-images/
real    437m15.555s

k = 5, t = 0.4
ls -1tr average-categorize-images/* > image-list.txt
montage -geometry +2+2 @image-list.txt mnist-10000-train--ave-cat--k_5--t_0_4.jpg
----------------------------------
$ ./mnist-data-to-images.py 60000

=======================================================================================
simm-1 |*> #=> 100 ket-simm(layer-1 |phi: 1>,layer-1 |_self>)
simm-2 |*> #=> 100 ket-simm(layer-1 |phi: 2>,layer-1 |_self>)
simm-3 |*> #=> 100 ket-simm(layer-1 |phi: 3>,layer-1 |_self>)
simm-4 |*> #=> 100 ket-simm(layer-1 |phi: 4>,layer-1 |_self>)
simm-5 |*> #=> 100 ket-simm(layer-1 |phi: 5>,layer-1 |_self>)
simm-6 |*> #=> 100 ket-simm(layer-1 |phi: 6>,layer-1 |_self>)