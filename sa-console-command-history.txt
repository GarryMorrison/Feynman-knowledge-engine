2014-08-07
  |list> => 1|a> + 2|b> + 3|c>
  dump
  sp-propagate[op,1] "" |list>
  sp-propagate[op,0] "" |list>
  sp-propagate[op,10] "" |list>
  history
  q

2014-08-07
  sp-propagate[op,10] |a>
  dump
  op |a> => 10 |a>
  sp-propagate[op,10] |a>
  load a-single-line.sw
  dump
  op-propagate[nbr,10] "" |list>
  op-propagate[righ,10] "" |list>
  op-propagate[right,10] "" |list>
  history
  sp-propagate[nbr,10] "" |list>
  history
  sp-propagate[nbr,10] "" |row>
  history
  q

2014-08-07
  load a-single-line.sw
  sp-propagate[nbr,10] "" |row>
  history
  sp-propagate[nbr,20] "" |row>
  history
  sp-propagate[nbr,15] "" |row>
  load simple-network.sw
  dump
  relevant-kets[O]
  |nrow> => 0 (|a1> + |a2> + |a3> + |a4> + |a5> + |a6> + |a7> + |a8> + |a9> + |a10> + |b1> + |b2> + |b3> + |b4> + |b5> + |b6> + |b7>) + |a3>
  dump
  sp-propagate[O,15] "" |nrow>
  dump
  history
  dump |*>
  sp-propagate[normed-nbr,15] "" |row>
  history
  q

2014-08-07
  load a-single-line.sw
  dump
  sp-propagate[nbr,15] "" |row>
  history
  sp-propagate[normed-nbr,15] "" |row>
  sp-propagate[nbr,15] "" |row>
  sp-propagate[normed-nbr,15] "" |row>
  load simple-network.sw
  dump
  |net-row> => 0 relevant-kets[O]
  relevant-kets[O]
  |net-row> => 0 (|a1> + |a2> + |a3> + |a4> + |a5> + |a6> + |a7> + |a8> + |a9> + |a10> + |b1> + |b2> + |b3> + |b4> + |b5> + |b6> + |b7>) + |a3>
  dump
  sp-propagate[op,15] "" |net-row>
  history
  sp-propagate[O,15] "" |net-row>
  history
  sp-propagate[O,30] "" |net-row>
  dump |*>
  pick-nbr |*> #=> pick-elt (left |_self> + right |_self> )
  history
  sp-propagate[pick-nbr,15] "" |row>
  dump |*>
  sp-propagate[pick-nbr,15] "" |row>
  dump |*>
  pick-nbr |x: 0>
  .
  .
  .
  .
  pick-nbr |x: 1>
  .
  .
  .
  .
  pick-nbr |x: 9>
  .
  .
  .
  .
  history
  history 100
  
  sp-propagate[nbr,15] "" |row>
  history
  sp-propagate[pick-nb,15] "" |row>
  history
  sp-propagate[pick-nbr,15] "" |row>
  history
  history 100
  dump
  O |a10> => 0.5 |a1> + 0.5 |b1>
  history 100
  sp-propagate[O,15] "" |net-row>
  history
  sp-propagate[O,40] "" |net-row>
  .
  history
  sp-propagate[O,30] "" |net-row>
  history 100
  q

2014-08-08
  load a-single-line.sw
  dump
  dump |row>
  pick-nbr |*> #=> pick-elt (left |_self> + right |_self> )
  save a-single-line.sw
  dump
  sp-propagate[nbr] "" |row>
  sp-propagate[nbr,15] "" |row>
  sp-propagate[pick-nbr,15] "" |row>
  .
  .
  .
  .
  .
  .
  .
  .
  .
  history
  q

2014-08-08
  q

2014-08-08
  load a-single-line.sw
  sp-propagate[pick-nbr,15] "" |row>
  sp-propagate[pick-nbr,50] "" |row>
  .
  .
  q

2014-08-08
  load a-single-line.sw
  sp-propagate[pick-nbr,100] "" |row>
  .
  history
  sp-propagate[pick-nbr,70] "" |row>
  .
  .
  .
  .
  ..
  .
  sp-propagate[pick-nbr,70] "" |row>
  q

2014-08-08
  load a-single-line.sw
  sp-propagate[pick-nbr,70] "" |row>
  history
  op-propagate[pick-nbr,140] "" |row>
  .
  .
  .
  history
  q

2014-08-08
  load deli-closing-time.sw
  load deli-closing-times.sw
  dump
  matrix[deli-closing-time]
  display
  q

2014-08-10
  load deli-closing-times.sw
  dump
  display
  matrix[deli-closing-time]
  q


2014-08-21
  load nested-set.sw
  dump
  exp-max[set]
  exp-max[set] |S>
  history
  exp-max[set] |a>
  exp-max[set] |c1>
  history
  q

2014-08-21
  load nested-set.sw
  display
  display |S> + |a>
  q

2014-08-21
  load WP-word-frequencies.sw
  find |*> #=> find-topic[words] |_self> + find-topic[words-2] |_self> + find-topic[words-3] |_self>
  dump |*>
  find |physics>
  find |particle physics>
  find (|particle> + |physics>)
  dump |*>
  normed-find |*> #=> normalize[100] (find-topic[words] |_self> + find-topic[words-2] |_self> + find-topic[words-3] |_self>)
  dump |*>
  normed-find |physics>
  normed-find |particle physics>
  normed-find (|particle> + |physics>)
  dump |*>
  history
  save WP-word-frequencies.sw
  q

2014-08-22
  load fred-sam-friends.sw
  dump
  history
  clean |fish>
  q

2014-08-22
  coeff-sort (3|a> + 20|b> + 2|c>)
  q

2014-08-22
  load kevin-bacon-0.sw
  ops |result>
  count kevin-bacon-0 |result>
  drop-below[2] kevin-bacon-0 |result>
  history
  count drop-below[2] kevin-bacon-0 |result>
  drop-below[3] kevin-bacon-0 |result>
  history
  count drop-below[3] kevin-bacon-0 |result>
  count drop-below[4] kevin-bacon-0 |result>
  count drop-below[5]  kevin-bacon-0 |result>
  count drop-below[6]  kevin-bacon-0 |result>
  count drop-below[7] kevin-bacon-0 |result>
  count drop-below[8] kevin-bacon-0 |result>
  count drop-below[9] kevin-bacon-0 |result>
  count drop-below[10] kevin-bacon-0 |result>
  count drop-below[11] kevin-bacon-0 |result>
  count drop-below[12] kevin-bacon-0 |result>
  count drop-below[13] kevin-bacon-0 |result>
  count drop-below[14] kevin-bacon-0 |result>
  count drop-below[15] kevin-bacon-0 |result>
  q

2014-08-22
  load kevin-bacon-0.sw
  load post-processing-kevin-bacon-0.sw
  load post-process-kevin-bacon-0.sw
  display |counts>
  history
  select[2,2] kevin-bacon-0 |result>
  in-range[2,2] kevin-bacon-0 |result>
  history
  drop in-range[2,2] kevin-bacon-0 |result>
  history
  count drop in-range[2,2] kevin-bacon-0 |result>
  clean drop in-range[2,2] kevin-bacon-0 |result>
  history
  long split |a b c d e>
  long clean drop in-range[2,2] kevin-bacon-0 |result>
  history
  q

2014-08-25
  load kevin-bacon-0.sw
  long clean drop in-range[1,1] kevin-bacon-0 |result>
  q

2014-08-29
  load simple-movie-recommendation-example.sw
  context
  dump
  history
  load fragment-documents-64k--post-processing--saved.sw
  matrix[drop-6-hash]
  ops |result>
  dump |result>
  dump |*>
  matrix[drop-6-simm]
  dump |*>
  drop-6-simm |*> #=> 100 similar[drop-6-hash] |_self> + 100 |_self>
  matrix[drop-6-simm]
  dump |*>
  
  categorize[drop-6-hash,0.75,result]
  dump |result>
  history
  |list> => |semantic-2-64k> + |eztv-1-64k> + |slashdot-3-64k> + |slashdot-1-64k> + |wc-comments-2-64k> + |diary-1-64k> + |eztv-2-64k> + |diary-2-64k> + |wc-comments-1-64k> + |slashdot-2-64k> + |semantic-1-64k>
  map[drop-6-simm] "" |list>
  matrix[drop-6-simm]
  history
  map[drop-6-simm,drop-6-data] "" |list>
  history
  matrix[drop-6-data]
  dump |*>
  
  fish |x> => 100 |_self>
  fixh |y> => 100 |_self>
  fish |y> => 100 |_self>
  matrix[fish]
  load ebook-letter-counts.sw
  dump |list>
  |list> => |nineteen-eighty-four> + |Tom-Sawyer> + |I-Robot> + |Gone-with-Wind> + |Frankenstein> + |Shakespeare> + |Moby-Dick> + |Sherlock-Holmes> + |Alice-in-Wonderland>
  simm |*> #=> 100 similar[letter-count] |_self> + 100 |_self>
  map[simm,simm-matrix] "" |list>
  matrix[simm-matrix]
  history
  h
  save history

2014-08-29
  load simple-movie-recommendation-example.sw
  context
  dump
  history
  load fragment-documents-64k--post-processing--saved.sw
  matrix[drop-6-hash]
  ops |result>
  dump |result>
  dump |*>
  matrix[drop-6-simm]
  dump |*>
  drop-6-simm |*> #=> 100 similar[drop-6-hash] |_self> + 100 |_self>
  matrix[drop-6-simm]
  dump |*>
  
  categorize[drop-6-hash,0.75,result]
  dump |result>
  history
  |list> => |semantic-2-64k> + |eztv-1-64k> + |slashdot-3-64k> + |slashdot-1-64k> + |wc-comments-2-64k> + |diary-1-64k> + |eztv-2-64k> + |diary-2-64k> + |wc-comments-1-64k> + |slashdot-2-64k> + |semantic-1-64k>
  map[drop-6-simm] "" |list>
  matrix[drop-6-simm]
  history
  map[drop-6-simm,drop-6-data] "" |list>
  history
  matrix[drop-6-data]
  dump |*>
  
  fish |x> => 100 |_self>
  fixh |y> => 100 |_self>
  fish |y> => 100 |_self>
  matrix[fish]
  load ebook-letter-counts.sw
  dump |list>
  |list> => |nineteen-eighty-four> + |Tom-Sawyer> + |I-Robot> + |Gone-with-Wind> + |Frankenstein> + |Shakespeare> + |Moby-Dick> + |Sherlock-Holmes> + |Alice-in-Wonderland>
  simm |*> #=> 100 similar[letter-count] |_self> + 100 |_self>
  map[simm,simm-matrix] "" |list>
  matrix[simm-matrix]
  history
  h
  save history
  history
  |list> => |semantic-2-64k> + |eztv-1-64k> + |slashdot-3-64k> + |slashdot-1-64k> + |wc-comments-2-64k> + |diary-1-64k> + |eztv-2-64k> + |diary-2-64k> + |wc-comments-1-64k> + |slashdot-2-64k> + |semantic-1-64k>
  "" |list>
  context
  context fragment documents 64k hash
  "" |list>
  dump |*>
  6-simm |*> #=> 100 |_self> + 100 similar[drop-6-hash] |_self>
  map[6-simm,the-results] "" |list>
  history
  matrix[the-results]
  save history

2014-08-29
  load simple-movie-recommendation-example.sw
  context
  dump
  history
  load fragment-documents-64k--post-processing--saved.sw
  matrix[drop-6-hash]
  ops |result>
  dump |result>
  dump |*>
  matrix[drop-6-simm]
  dump |*>
  drop-6-simm |*> #=> 100 similar[drop-6-hash] |_self> + 100 |_self>
  matrix[drop-6-simm]
  dump |*>
  
  categorize[drop-6-hash,0.75,result]
  dump |result>
  history
  |list> => |semantic-2-64k> + |eztv-1-64k> + |slashdot-3-64k> + |slashdot-1-64k> + |wc-comments-2-64k> + |diary-1-64k> + |eztv-2-64k> + |diary-2-64k> + |wc-comments-1-64k> + |slashdot-2-64k> + |semantic-1-64k>
  map[drop-6-simm] "" |list>
  matrix[drop-6-simm]
  history
  map[drop-6-simm,drop-6-data] "" |list>
  history
  matrix[drop-6-data]
  dump |*>
  
  fish |x> => 100 |_self>
  fixh |y> => 100 |_self>
  fish |y> => 100 |_self>
  matrix[fish]
  load ebook-letter-counts.sw
  dump |list>
  |list> => |nineteen-eighty-four> + |Tom-Sawyer> + |I-Robot> + |Gone-with-Wind> + |Frankenstein> + |Shakespeare> + |Moby-Dick> + |Sherlock-Holmes> + |Alice-in-Wonderland>
  simm |*> #=> 100 similar[letter-count] |_self> + 100 |_self>
  map[simm,simm-matrix] "" |list>
  matrix[simm-matrix]
  history
  h
  save history
  history
  |list> => |semantic-2-64k> + |eztv-1-64k> + |slashdot-3-64k> + |slashdot-1-64k> + |wc-comments-2-64k> + |diary-1-64k> + |eztv-2-64k> + |diary-2-64k> + |wc-comments-1-64k> + |slashdot-2-64k> + |semantic-1-64k>
  "" |list>
  context
  context fragment documents 64k hash
  "" |list>
  dump |*>
  6-simm |*> #=> 100 |_self> + 100 similar[drop-6-hash] |_self>
  map[6-simm,the-results] "" |list>
  history
  matrix[the-results]
  save history
  history
  q

2014-08-29
  context good will hunting adjacency matrix
  adj |1> => |2> + |4>
  ad |2> => |1> + |4> + 2|3>
  adj |2> => |1> + |4> + 2|3>
  dump
  adj |3> => 2|2>
  adj |4> => |1> + |2>
  dump
  matrix[adj]
  merged-matrix[adj,adj]
  matrix[adj,adj,adj]
  merged-matrix[adj,adj,adj]
  dump
  save good-will-hunting-adjacency-matrix.sw
  save history

2014-08-29
  context good will hunting adjacency matrix
  adj |1> => |2> + |4>
  ad |2> => |1> + |4> + 2|3>
  adj |2> => |1> + |4> + 2|3>
  dump
  adj |3> => 2|2>
  adj |4> => |1> + |2>
  dump
  matrix[adj]
  merged-matrix[adj,adj]
  matrix[adj,adj,adj]
  merged-matrix[adj,adj,adj]
  dump
  save good-will-hunting-adjacency-matrix.sw
  save history
  history
  
  hadj |A> => |A> + |C>
  hadj |B> => |C>
  hadj |C> => |B>
  hadj |D> => |D> + |B>
  dump
  matrix[hadj]
  [Bmerged-matrix[hadj,hadj,hadj]
  
  history
  merged-matrix[hadj,hadj,hadj]
  history
  save history

2014-08-29
  context good will hunting adjacency matrix
  adj |1> => |2> + |4>
  ad |2> => |1> + |4> + 2|3>
  adj |2> => |1> + |4> + 2|3>
  dump
  adj |3> => 2|2>
  adj |4> => |1> + |2>
  dump
  matrix[adj]
  merged-matrix[adj,adj]
  matrix[adj,adj,adj]
  merged-matrix[adj,adj,adj]
  dump
  save good-will-hunting-adjacency-matrix.sw
  save history
  history
  
  hadj |A> => |A> + |C>
  hadj |B> => |C>
  hadj |C> => |B>
  hadj |D> => |D> + |B>
  dump
  matrix[hadj]
  [Bmerged-matrix[hadj,hadj,hadj]
  
  history
  merged-matrix[hadj,hadj,hadj]
  history
  save history
  
  -- see here: http://www.math.ucla.edu/~wittman/10b.1.10w/Homework/HW2/homework2.html
  history
  hadj^3 |A>
  hadj^3 |B>
  hadj^3 |C>
  hadj^3 |D>
  ket-sort hadj^3 |D>
  save history

2014-08-29
  context good will hunting adjacency matrix
  adj |1> => |2> + |4>
  ad |2> => |1> + |4> + 2|3>
  adj |2> => |1> + |4> + 2|3>
  dump
  adj |3> => 2|2>
  adj |4> => |1> + |2>
  dump
  matrix[adj]
  merged-matrix[adj,adj]
  matrix[adj,adj,adj]
  merged-matrix[adj,adj,adj]
  dump
  save good-will-hunting-adjacency-matrix.sw
  save history
  history
  
  hadj |A> => |A> + |C>
  hadj |B> => |C>
  hadj |C> => |B>
  hadj |D> => |D> + |B>
  dump
  matrix[hadj]
  [Bmerged-matrix[hadj,hadj,hadj]
  
  history
  merged-matrix[hadj,hadj,hadj]
  history
  save history
  
  -- see here: http://www.math.ucla.edu/~wittman/10b.1.10w/Homework/HW2/homework2.html
  history
  hadj^3 |A>
  hadj^3 |B>
  hadj^3 |C>
  hadj^3 |D>
  ket-sort hadj^3 |D>
  save history
  dump
  planet-adj |Aldeeran> => |Aldeeran> + |Coruscant>
  planet-adj |Bespin> => |Coruscant>
  planet-adj |Coruscant> => |Bespin>
  planet-adj |Deathstar> => |Deathstar> + |Bespin>
  dump
  matrix[planet-adj]
  planet-adj^3 |Aldeeran>
  ket-sort planet-adj^3 |Aldeeran>
  ket-sort planet-adj^3 |Deathstar>
  save history

2014-08-29
  context good will hunting adjacency matrix
  adj |1> => |2> + |4>
  ad |2> => |1> + |4> + 2|3>
  adj |2> => |1> + |4> + 2|3>
  dump
  adj |3> => 2|2>
  adj |4> => |1> + |2>
  dump
  matrix[adj]
  merged-matrix[adj,adj]
  matrix[adj,adj,adj]
  merged-matrix[adj,adj,adj]
  dump
  save good-will-hunting-adjacency-matrix.sw
  save history
  history
  
  hadj |A> => |A> + |C>
  hadj |B> => |C>
  hadj |C> => |B>
  hadj |D> => |D> + |B>
  dump
  matrix[hadj]
  [Bmerged-matrix[hadj,hadj,hadj]
  
  history
  merged-matrix[hadj,hadj,hadj]
  history
  save history
  
  -- see here: http://www.math.ucla.edu/~wittman/10b.1.10w/Homework/HW2/homework2.html
  history
  hadj^3 |A>
  hadj^3 |B>
  hadj^3 |C>
  hadj^3 |D>
  ket-sort hadj^3 |D>
  save history
  dump
  planet-adj |Aldeeran> => |Aldeeran> + |Coruscant>
  planet-adj |Bespin> => |Coruscant>
  planet-adj |Coruscant> => |Bespin>
  planet-adj |Deathstar> => |Deathstar> + |Bespin>
  dump
  matrix[planet-adj]
  planet-adj^3 |Aldeeran>
  ket-sort planet-adj^3 |Aldeeran>
  ket-sort planet-adj^3 |Deathstar>
  save history
  history
  exp-max[planet-adj] |Aldeeran>
  exp-max[planet-adj] |Bespin>
  exp-max[planet-adj] |Coruscant>
  exp-max[planet-adj] |Deathstar>
  save history

2014-08-29
  context good will hunting adjacency matrix
  adj |1> => |2> + |4>
  ad |2> => |1> + |4> + 2|3>
  adj |2> => |1> + |4> + 2|3>
  dump
  adj |3> => 2|2>
  adj |4> => |1> + |2>
  dump
  matrix[adj]
  merged-matrix[adj,adj]
  matrix[adj,adj,adj]
  merged-matrix[adj,adj,adj]
  dump
  save good-will-hunting-adjacency-matrix.sw
  save history
  history
  
  hadj |A> => |A> + |C>
  hadj |B> => |C>
  hadj |C> => |B>
  hadj |D> => |D> + |B>
  dump
  matrix[hadj]
  [Bmerged-matrix[hadj,hadj,hadj]
  
  history
  merged-matrix[hadj,hadj,hadj]
  history
  save history
  
  -- see here: http://www.math.ucla.edu/~wittman/10b.1.10w/Homework/HW2/homework2.html
  history
  hadj^3 |A>
  hadj^3 |B>
  hadj^3 |C>
  hadj^3 |D>
  ket-sort hadj^3 |D>
  save history
  dump
  planet-adj |Aldeeran> => |Aldeeran> + |Coruscant>
  planet-adj |Bespin> => |Coruscant>
  planet-adj |Coruscant> => |Bespin>
  planet-adj |Deathstar> => |Deathstar> + |Bespin>
  dump
  matrix[planet-adj]
  planet-adj^3 |Aldeeran>
  ket-sort planet-adj^3 |Aldeeran>
  ket-sort planet-adj^3 |Deathstar>
  save history
  history
  exp-max[planet-adj] |Aldeeran>
  exp-max[planet-adj] |Bespin>
  exp-max[planet-adj] |Coruscant>
  exp-max[planet-adj] |Deathstar>
  save history
  history
  op-propagate[planet-adj,5] |Aldeeran>
  |row> => |Aldeeran> + 0|Bespin> + 0|Coruscant> + 0|Deathstar>
  "" |row>
  op-propagate[planet-adj,5] "" |row>
  -- need to fix it.
  save history

2014-08-29
  context good will hunting adjacency matrix
  adj |1> => |2> + |4>
  ad |2> => |1> + |4> + 2|3>
  adj |2> => |1> + |4> + 2|3>
  dump
  adj |3> => 2|2>
  adj |4> => |1> + |2>
  dump
  matrix[adj]
  merged-matrix[adj,adj]
  matrix[adj,adj,adj]
  merged-matrix[adj,adj,adj]
  dump
  save good-will-hunting-adjacency-matrix.sw
  save history
  history
  
  hadj |A> => |A> + |C>
  hadj |B> => |C>
  hadj |C> => |B>
  hadj |D> => |D> + |B>
  dump
  matrix[hadj]
  [Bmerged-matrix[hadj,hadj,hadj]
  
  history
  merged-matrix[hadj,hadj,hadj]
  history
  save history
  
  -- see here: http://www.math.ucla.edu/~wittman/10b.1.10w/Homework/HW2/homework2.html
  history
  hadj^3 |A>
  hadj^3 |B>
  hadj^3 |C>
  hadj^3 |D>
  ket-sort hadj^3 |D>
  save history
  dump
  planet-adj |Aldeeran> => |Aldeeran> + |Coruscant>
  planet-adj |Bespin> => |Coruscant>
  planet-adj |Coruscant> => |Bespin>
  planet-adj |Deathstar> => |Deathstar> + |Bespin>
  dump
  matrix[planet-adj]
  planet-adj^3 |Aldeeran>
  ket-sort planet-adj^3 |Aldeeran>
  ket-sort planet-adj^3 |Deathstar>
  save history
  history
  exp-max[planet-adj] |Aldeeran>
  exp-max[planet-adj] |Bespin>
  exp-max[planet-adj] |Coruscant>
  exp-max[planet-adj] |Deathstar>
  save history
  history
  op-propagate[planet-adj,5] |Aldeeran>
  |row> => |Aldeeran> + 0|Bespin> + 0|Coruscant> + 0|Deathstar>
  "" |row>
  op-propagate[planet-adj,5] "" |row>
  -- need to fix it.
  save history
  history
  q

2014-08-29
  context adjacent planets homework example
  planet-adj |Aldeeran> => |Aldeeran> + |Coruscant>
   planet-adj |Bespin> => |Coruscant>
  planet-adj |Coruscant> => |Bespin>
  planet-adj |Deathstar> => |Deathstar> + |Bespin>
  dump
  save adjacent-planets-homework-example.sw
  source |context: adjacent planets homework example> => |url: http://www.math.ucla.edu/~wittman/10b.1.10w/Homework/HW2/homework2.html>
  dump
  save adjacent-planets-homework-example.sw
  history
  dump
  matrix[planet-adj]
  |row> => |Aldeeran> + 0|Bespin> + 0|Coruscant> + 0|Deathstar>
  dump
  save adjacent-planets-homework-example.sw
  dump
  op-propagate[planet-adj,5] "" |row>
  q

2014-08-29
  load adjacent-planets-homework-example.sw
  dump
  op-propagate[planet-adj,5] "" |row>
  save history

2014-08-29
  load adjacent-planets-homework-example.sw
  dump
  op-propagate[planet-adj,5] "" |row>
  save history
  [A[B
  op-propagate[planet-adj,10] "" |row>
  
  create inverse
  exp-max[inverse-planet-adj] |Aldeeran>
   exp-max[inverse-planet-adj] |Bespin>
  dump
  save history

2014-09-07
  load fred-sam-friends.sw
  dump
  |you> => |Sam>
  dump "" |you>
  display "" |you>
  long friends |Fred>
  q

2014-09-07
  load fred-sam-friends.sw
  long friends |Sam>
  q

2014-09-07
  load fred-sam-friends.sw
  long friends |Sam>
  dump
  friends |Sam>
  q

2014-09-07
  load fred-sam-friends.sw
  long friends |Sam>
  q

2014-09-07
  load fred-sam-friends.sw
  long friends |Sam>
  q

2014-09-07
  load fred-sam-friends.sw
  long friends |Sam>
  [6~[6~q
  [Aq
  q

2014-09-07
  load fred-sam-friends.sw
  long friends |Sam>
  -- Woot! I finally fixed the long display bug!
  q

2014-09-08
  multiply(2|a>,7|a>)
  multiply(2|a> + 7|b>,3|b>)
  drop multiply(2|a> + 7|b>,3|b>)
  q

2014-09-12
  load fred-sam-friends.sw
  friends |Fred>
  q

2014-09-12
  load fred-sam-friends.sw
  dump
  friends (|Fred> + |Sam>)
  q

2014-10-28
  -- hello world! 
  q

2014-10-28
  load methanol.sw
  dump
  atom-type molecular-pieces |molecule: methanol>
  bonds-to molecular-pieces |molecule: methanol>
  atom-type bonds-to molecular-pieces |molecule: methanol>
  dump
  q

2014-10-29
  is-zero |*> => |False>
  is-zero |0> => |True>
  fizz-buzz-0 |*> #=> |_self>
  arithmetic(|10>,|%>,|3>)
  is-zero arithmetic(|10>,|%>,|3>)
  dump
  fizz-buzz-0 |13>
  |list> => range(|1>,|20>)
  dump
  map[fizz-buzz-0,fizz-buzz] "" |list>
  dump
  fizz-buzz-1 |*> #=> if(is-zero arithmetic(|_self>,|%>,|3>),|Fizz>,|>)
  map[fizz-buzz-1,fizz-buzz] "" |list>
  history
  dump
  
  fizz-buzz-1 |3>
  fizz-buzz-1 |4>
  arithmetic(|15>,|%>,|3>)
  if(|True>,|is-true>,|is-false>)
  if(is-zero |0>,|is-true>,|is-false>)
  dump
  is-mod-3 |*> #=> is-zero arithmetic(|_self>,|%>,|3>)
  is-mod-3 |3>
  is-mod-3 |7>
  is-mod-5 |*> #=> is-zero arithmetic(|_self>,|%>,|5>)
  is-mod-15 |*> #=> is-zero arithmetic(|_self>,|%>,|15>)
  map[is-mod-3] "" |list>
  dump
  map[is-mod-5] "" |list>
  map[is-mod-15] "" |list>
  dump
  fizz-buzz-1 |*> #=> if(is-mod-3,|Fizz>,|>)
  fizz-buzz-2 |*> #=> if(is-mod-5,|Buzz>,|>)
  fizz-buzz-3 |*> #=> if(is-mod-15,|FizzBuzz>,|>)
  dump
  map[fizz-buzz-1,fizz-buzz] "" |list>
  dump
  fizz-buzz-1 |20>
  fizz-buzz-1 |*> #=> if(is-mod-3 |_self>,|Fizz>,|>)
  
  fizz-buzz-2 |*> #=> if(is-mod-5 |_self>,|Buzz>,|>)
  
  fizz-buzz-3 |*> #=> if(is-mod-15 |_self>,|FizzBuzz>,|>)
  map[fizz-buzz-1,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-2,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-3,fizz-buzz] "" |list>
  [A[A
  dump
  history
  history 50
  
  q

2014-10-29
  load fizz-buzz-example--working-version.sw
  dump
  map[is-mod-3] "" |list>
  dump
  q

2014-10-29
  load fizz-buzz-example--working-version.sw
  dump
  map[is-mod-3] "" |list>
  dump
  map[is-mod-5] "" |list>
  map[is-mod-15] "" |list>
  dump
  map[fizz-buzz-0,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-1,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-2,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-3,fizz-buzz] "" |list>
  dump
  history
  h
  save history

2014-10-29
  load fizz-buzz-example--working-version.sw
  dump
  map[is-mod-3] "" |list>
  dump
  map[is-mod-5] "" |list>
  map[is-mod-15] "" |list>
  dump
  map[fizz-buzz-0,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-1,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-2,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-3,fizz-buzz] "" |list>
  dump
  history
  h
  save history
  dump
  
  h
  context
  reset
  |list> => range(|1>,|100>)
  is-zero |*> => |False>
  is-zero |0> => |True>
  is-mod-3 |*> #=> is-zero arithmetic(|_self>,|%>,|3>)
  is-mod-5 |*> #=> is-zero arithmetic(|_self>,|%>,|5>)
  is-mod-15 |*> #=> is-zero arithmetic(|_self>,|%>,|15>)
  dump
  fizz-buzz-0 |*> #=> |_self>
  fizz-buzz-1 |*> #=> if(is-mod-3 |_self>,|Fizz>,|>)
  fizz-buzz-2 |*> #=> if(is-mod-5 |_self>,|Buzz>,|>)
  fizz-buzz-3 |*> #=> if(is-mod-15 |_self>,|FizzBuzz>,|>)
  dump
  map[fizz-buzz-0,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-1,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-2,fizz-buzz] "" |list>
  dump
  map[fizz-buzz-3,fizz-buzz] "" |list>
  dump
  save fizz-buzz-post-processing.sw
  q

2014-10-30
  -- cyc example (see WP page)
  -- "every tree is a plant"
  -- "plants die eventually"
  -- "do trees die"
  do-die |plant: *> => |yes>
  do-die |plant: tree: elm>
  dump
  save history

2014-10-30
  -- cyc example (see WP page)
  -- "every tree is a plant"
  -- "plants die eventually"
  -- "do trees die"
  do-die |plant: *> => |yes>
  do-die |plant: tree: elm>
  dump
  save history
  do-die |plant: tree>
  do-die |plant: tree: elm>
  do-die |plant>
  q

2014-10-30
  op |x> => |fish>
  dump
  op |x> => |>
  dump
  -- just demonstrating that if you try to learn |>, the rule is ignored. Sometimes useful, eg in the Fizz-Buzz example
  save history

2014-10-30
  op |x> => |fish>
  dump
  op |x> => |>
  dump
  -- just demonstrating that if you try to learn |>, the rule is ignored. Sometimes useful, eg in the Fizz-Buzz example
  save history
  q

2014-10-30
  -- quick play with plurals
  plural |word: *> #=> merge-label(|_self>,|s>)
  dump
  plural |word: cat>
  plural |word: *> #=> merge-labels(|_self> + |s>)
  plural |word: cat>
  plural |word: dog>
  plural |word: foot>
  plural |word: foot> => |word: feet>
  plural |word: foot>
  -- nice demo of plural
  history
  save history

2014-10-30
  -- quick play with plurals
  plural |word: *> #=> merge-label(|_self>,|s>)
  dump
  plural |word: cat>
  plural |word: *> #=> merge-labels(|_self> + |s>)
  plural |word: cat>
  plural |word: dog>
  plural |word: foot>
  plural |word: foot> => |word: feet>
  plural |word: foot>
  -- nice demo of plural
  history
  save history
  reset
  plural |word: cat>
  plural |word: *> #=> merge-labels(|_self> + |s>)
  plural |word: cat>
  plural |word: dog>
  plural |word: mouse>
  plural |word: foot>
  plural |word: mouse> => |word: mice>
  plural |word: foot> => |word: feet>
  plural |word: mouse>
  plural |word: foot>
  matrix[plural]
  q

2014-11-01
  load simple-network.sw
  dump
  matrix[O]
  q

2014-11-01
  load binary-tree.sw
  dump
  matrix[child]
  dump
  exp-max[child] |x>
  |list> => exp-max[child] |x>
  dump
  map[child] "" |list>
  dump
  matrix[child]
  dump
  save history

2014-11-01
  load binary-tree.sw
  dump
  matrix[child]
  dump
  exp-max[child] |x>
  |list> => exp-max[child] |x>
  dump
  map[child] "" |list>
  dump
  matrix[child]
  dump
  save history
  history
  q

2014-11-02
   |A> => |a1> + |a2> + |a3> + |ab> + |ac> + |abc>     
   |B> => |b1> + |b2> + |b3> + |ab> + |bc> + |abc>
   |C> => |c1> + |c2> + |c3> + |ac> + |bc> + |abc>
  dump
  intersection(""|A>, ""|B>)
  intersection(""|A>, ""|C>)
  intersection(""|B>, ""|C>)
  intersection(""|A>, ""|B>, ""
  intersection(""|A>,""|B>,""|C>)
  ""|A> + ""|B> + ""|C>
  clean(""|A> + ""|B> + ""|C>)
  drop-below[3] (""|A> + ""|B> + ""|C>)
  clean drop-below[3] (""|A> + ""|B> + ""|C>)
  clean drop-below[2] (""|A> + ""|B> + ""|C>)
  q

2014-11-02
  load simple-shopping-basket.sw
  dump
  similar[basket] |f>
  100 similar[basket] |f>
  history
  
  load disease-symptoms-example.sw
  dump
  100 similar[disease-symptoms] |patient: 1>
  history
  load H-I-pat-rec.sw
  dump
  context
  100 similar[pixels] |letter: H>
  100 similar[pixels] |letter: I>
  history
  relevant-kets[pixels]
  |list> => relevant-kets[pixels]
  dump
  history
  relevant-kets[pixels]
  |list> => |letter: H> + |noisy: H> + |noisy: H2> + |letter: I> + |noisy: I> + |noisy: I2> + |letter: O>
  dump
  find-simm |*> #=> 100 (similar[pixels] |_self> + |_self>)
  find-simm |letter: H>
  dump
  find-simm |*> #=> 100 (|_self> + similar[pixels] |_self>)
  find-simm |letter: H>
  ""|list>
  map[find-simm,similarity] "" |list>
  dump
  matrix[similarity]
  history
  matrix[similarity]
  categorize[pixels,0.75,result]
  dump |result>
  categorize[pixels,0.6,result2]
  dump |result2>
  history
  load internet-acronyms.sw
  dump
  read |text: WTF is going on OMg thx RTFM!>
  history
  active-buffer[7,0] read |text: WTF is going on OMg thx RTFM!>
  history
  load next-breakfast-menu.sw
  description |food: Homestyle Breakfast>
  read description |food: Homestyle Breakfast>
  active-buffer[7,0.5] read description |food: Homestyle Breakfast>
  history
  active-buffer[7,1] read description |food: Homestyle Breakfast>
  history
  context
  context face active buffer
  |body part: face> => 2|eyes> + |nose> + 2|ears> + 2|lips> + |hair>
  active-buffer[7,0] (2|eyes> + |nose>)
  active-buffer[7,0] (|hair> + |nose> + |lips>)
  active-buffer[7,0] (2|eyes> + |nose> + 2|ears> + 2|lips> + |hair>)
  context
  load names.sw
  find-topic[names] |Fred>
  find-topic[names] |fred>
  history
  find-topic[names] |emma>
  find-topic[names] |george>
  find-topic[names] |simon>
  context
  context fred friends
  save history

2014-11-02
  load simple-shopping-basket.sw
  dump
  similar[basket] |f>
  100 similar[basket] |f>
  history
  
  load disease-symptoms-example.sw
  dump
  100 similar[disease-symptoms] |patient: 1>
  history
  load H-I-pat-rec.sw
  dump
  context
  100 similar[pixels] |letter: H>
  100 similar[pixels] |letter: I>
  history
  relevant-kets[pixels]
  |list> => relevant-kets[pixels]
  dump
  history
  relevant-kets[pixels]
  |list> => |letter: H> + |noisy: H> + |noisy: H2> + |letter: I> + |noisy: I> + |noisy: I2> + |letter: O>
  dump
  find-simm |*> #=> 100 (similar[pixels] |_self> + |_self>)
  find-simm |letter: H>
  dump
  find-simm |*> #=> 100 (|_self> + similar[pixels] |_self>)
  find-simm |letter: H>
  ""|list>
  map[find-simm,similarity] "" |list>
  dump
  matrix[similarity]
  history
  matrix[similarity]
  categorize[pixels,0.75,result]
  dump |result>
  categorize[pixels,0.6,result2]
  dump |result2>
  history
  load internet-acronyms.sw
  dump
  read |text: WTF is going on OMg thx RTFM!>
  history
  active-buffer[7,0] read |text: WTF is going on OMg thx RTFM!>
  history
  load next-breakfast-menu.sw
  description |food: Homestyle Breakfast>
  read description |food: Homestyle Breakfast>
  active-buffer[7,0.5] read description |food: Homestyle Breakfast>
  history
  active-buffer[7,1] read description |food: Homestyle Breakfast>
  history
  context
  context face active buffer
  |body part: face> => 2|eyes> + |nose> + 2|ears> + 2|lips> + |hair>
  active-buffer[7,0] (2|eyes> + |nose>)
  active-buffer[7,0] (|hair> + |nose> + |lips>)
  active-buffer[7,0] (2|eyes> + |nose> + 2|ears> + 2|lips> + |hair>)
  context
  load names.sw
  find-topic[names] |Fred>
  find-topic[names] |fred>
  history
  find-topic[names] |emma>
  find-topic[names] |george>
  find-topic[names] |simon>
  context
  context fred friends
  save history
  friends |Fred> => |Sam> + |Harry> + |Liz> + |Rob> + |Emma> + |Mazza>
  friends |Sam> => |Eric> + |Smithie> + |Patrick> + |Tom>
  friends |Harry> => |Jane> + |Sarah> + |Jean> + |Alicia>
  dump
  history
  friends |Fred>
  count friends |Fred>
  friends friends |Fred>
  count friends^2 |Fred>
  h
  q

2014-11-03
  load fragment-webpages-64k.sw
  simm-0 |*> #=> 100 (|_self> + similar[hash-64k] |_self>)
  simm-0 |abc-1-64k>
  |list> => |abc-1-64k>  + |abc-2-64k>  + |abc-3-64k>  + |adelaidenow-1-64k>  + |adelaidenow-2-64k>  + |adelaidenow-3-64k>  + |slashdot-1-64k>  + |slashdot-2-64k>  + |slashdot-3-64k>  + |smh-1-64k>  + |smh-2-64k>  + |smh-3-64k>  + |youtube-1-64k>  + |youtube-2-64k>  + |youtube-3-64k>
  map[simm-0,similarity-0] "" |list>
  history
  matrix[similarity-0]
  [A
  matrix[similarity-0]
  history
  ops |abc-1-64k>
  simm-6 |*> #=> 100 (|_self> + similar[drop-6-hash] |_self>)
  simm-6 |abc-1-64k>
  history
  map[simm-6,similarity-6] "" |list>
  history
  matrix[similarity-6]
  history
  q

2014-11-03
  load fragment-webpages-64k.sw
  categorize[hash-64k,0.7,result]
  dump |result>
  history
  reset
  absolute-noise[10] (0|a> + 1|b> + |c> + 0|d>)
  |f> => absolute-noise[20] range(|x: 1>,|x: 50>)
  dump
  sp-as-list "" |f>
  history
  |f> => absolute-noise[4] range(|x: 1>,|x: 50>)
  dump
  drop-above[1] "" |f>
  history
  |f> => absolute-noise[2] range(|x: 1>,|x: 50>)
  drop-above[1] "" |f>
  |f> => absolute-noise[3] 0 range(|x: 1>,|x: 50>)
  dump
  drop-above[1] "" |f>
  history
  |f> => absolute-noise[3] 0 range(|x: 0>,|x: 255>)
  history
  sp-as-list "" |f>
  
  |r1> => binary-filter "" |f>
  sp-as-list "" |r1>
  threshold-filter[1] "" |f>
  sp-as-list threshold-filter[1] "" |f>
  history
  sp-as-list threshold-filter[2] "" |f>
  sp-as-list threshold-filter[2.5] "" |f>
  history
  save history

2014-11-03
  load fragment-webpages-64k.sw
  categorize[hash-64k,0.7,result]
  dump |result>
  history
  reset
  absolute-noise[10] (0|a> + 1|b> + |c> + 0|d>)
  |f> => absolute-noise[20] range(|x: 1>,|x: 50>)
  dump
  sp-as-list "" |f>
  history
  |f> => absolute-noise[4] range(|x: 1>,|x: 50>)
  dump
  drop-above[1] "" |f>
  history
  |f> => absolute-noise[2] range(|x: 1>,|x: 50>)
  drop-above[1] "" |f>
  |f> => absolute-noise[3] 0 range(|x: 1>,|x: 50>)
  dump
  drop-above[1] "" |f>
  history
  |f> => absolute-noise[3] 0 range(|x: 0>,|x: 255>)
  history
  sp-as-list "" |f>
  
  |r1> => binary-filter "" |f>
  sp-as-list "" |r1>
  threshold-filter[1] "" |f>
  sp-as-list threshold-filter[1] "" |f>
  history
  sp-as-list threshold-filter[2] "" |f>
  sp-as-list threshold-filter[2.5] "" |f>
  history
  save history
  q

2014-11-03
  q

2014-11-03
  load binary-tree.sw
  dump
  map[child] exp-max[child] |x>
  dump
  save binary-tree-with-child.sw
  dump
  matrix[child]
  history
  
  q

2014-11-03
  load simple-network.sw
  dump
  matrix[O]
  |x> => 2|a> + 3|b> + 4|c> + 5|d>
  select-elt[3] "" |x>
  context fred friends
  friends |Fred> => |Sam> + |Harry> + |Liz> + |Rob> + |Emma> + |Mazza>
  friends |Sam> => |Eric> + |Smithie> + |Patrick> + |Tom>
  friends |Harry> => |Jane> + |Sarah> + |Jean> + |Alicia>
  dump
  exp[friends,6] |Fred>
  exp-max[friends] |Fred>
  history
  q

2014-11-04
  load methanol.sw
  dump
  bonds-to^2 |methanol: 1>
  bonds-to^3 |methanol: 1>
  save history

2014-11-10
  load methanol.sw
  dump
  bonds-to^2 |methanol: 1>
  bonds-to^3 |methanol: 1>
  save history
  load simple-network.sw
  dump
  merged-matrix[O]
  merged-matrix[O,O]
  load binary-tree-with-child.sw
  dump
  merged-matrix[child]
  merged-matrix[child,child]
  context greetings play
  friends |Charlie> => |Jack> + |Emma>
  friends |Charlie>
  extract-value friends |Charlie>
  list-to-words friends |Charlie>
  extract-value list-to-words friends |Charlie>
  spell |word: frog>
  spell |frog>
  F |C: 37>
  q

2014-11-10
  union(|a>,|b>)
  apply(|op>,|x>)
  q

2014-11-10
  union(|a>,|b>)
  apply-sp(|op>,|x>)
  q

2014-11-10
  union(|A>,|b>)
  apply-sp(|x>,|y>)
  q

2014-11-10
  union(|A>,|b>)
  apply-sp(|x>,|y>)
  q

2014-11-10
  union(|a>,|b>)
  age |Fred> => |age: 23>
  friends |Fred> => |Sam>
  apply-sp(|op: age>,|Fred>)
  dump
  save small-fred.sw
  q

2014-11-10
  load small-fred.sw
  dump
  apply-sp(|op: age>,|Fred>)
  q

2014-11-10
  load small-fred.sw
  dump
  apply-sp(|op: age>,|Fred>)
  q

2014-11-10
  load small-fred.sw
  dump
  apply-sp(|op: age>,|Fred>)
  q

2014-11-10
  load small-fred.sw
  dump
  apply-sp(|op: age>,|Fred>)
  apply-sp(|op: age> + |op: friends>,|Fred>)
  q

2014-11-10
  load small-fred.sw
  apply-sp(|op: age> + |op: friends>,|Fred>)
  q

2014-11-10
  load small-fred.sw
  apply-sp(|op: age> + |op: friends>,|Fred>)
  ops |Fred>
  apply-sp(ops |Fred>,|Fred>)
  q

2014-11-10
  load small-fred.sw
  apply-sp(2|op: age> + 10|op: friends>,|Fred>)
  -- woot, I finally have apply-sp working. Maybe needs a better name though.
  star |*> #=> apply-sp(supported-ops |_self>,|_self>)
  dump
  star |Fred>
  dump
  friends |Fred> => |Sam> + |Harry> + |Mazza>
  star |Fred>
  star |Sam>
  star |Fred>
  apply-sp(10 ops |Fred>,|Fred>)
  dump
  save simple-apply-sp-example.sw
  files
  load bot-bella.sw
  dump
  star |*> #=> apply-sp(supported-ops |_self>,|_self>)
  star |bot: Bella>
  dump
  files
  load simple-apply-sp-example.sw
  dump
  context
  dump exact
  op-self |op: age> => 0.5 |_self>
  op-self |op: friends> => 30 |_self>
  dump
  apply-sp(op-self ops |Fred>,|Fred>)
  save history

2014-11-10
  load small-fred.sw
  apply-sp(2|op: age> + 10|op: friends>,|Fred>)
  -- woot, I finally have apply-sp working. Maybe needs a better name though.
  star |*> #=> apply-sp(supported-ops |_self>,|_self>)
  dump
  star |Fred>
  dump
  friends |Fred> => |Sam> + |Harry> + |Mazza>
  star |Fred>
  star |Sam>
  star |Fred>
  apply-sp(10 ops |Fred>,|Fred>)
  dump
  save simple-apply-sp-example.sw
  files
  load bot-bella.sw
  dump
  star |*> #=> apply-sp(supported-ops |_self>,|_self>)
  star |bot: Bella>
  dump
  files
  load simple-apply-sp-example.sw
  dump
  context
  dump exact
  op-self |op: age> => 0.5 |_self>
  op-self |op: friends> => 30 |_self>
  dump
  apply-sp(op-self ops |Fred>,|Fred>)
  save history
  history
  save simple-apply-sp-example.sw
  dump
  op-star |*> #=> apply-sp(op-self supported-ops |_self>, |_self>)
  save simple-apply-sp-example.sw
  dump
  height |Fred> => |cm: 177>
  star |Fred>
  dump
  op-star |Fred>
  dump
  save simple-apply-sp-example.sw
  dump
  q

2014-11-10
  load small-fred.sw
  dump
  apply-sp(|op: age>,|Fred>)
  apply-sp(|age>,|Fred>)
  files
  load simple-apply-sp-example.sw
  dump
  ops |Fred>
  |op> => pick-elt ops |Fred>
  dump
  |op> => pick-elt ops |Fred>
  dump
  |ket> => apply-sp(""|op>,|Fred>)
  dump
  history
  -- cool. as motivated by this: http://semantic-db.org/train-of-thought.swc
  save history

2014-11-10
  load small-fred.sw
  dump
  apply-sp(|op: age>,|Fred>)
  apply-sp(|age>,|Fred>)
  files
  load simple-apply-sp-example.sw
  dump
  ops |Fred>
  |op> => pick-elt ops |Fred>
  dump
  |op> => pick-elt ops |Fred>
  dump
  |ket> => apply-sp(""|op>,|Fred>)
  dump
  history
  -- cool. as motivated by this: http://semantic-db.org/train-of-thought.swc
  save history
  dump
  friends |Rob> => |Liz> + |George> + |Harry> + |Emma>
  common[friends] (|Rob> + |Fred>)
  apply(|a>,|b>)
  q

2014-11-10
  load small-fred.sw
  dump
  apply(|op: age>,|Fred>)
  extract-value |person: Fred>
  q

2014-11-10
  extract-hierarchy |a: b: c: d>
  expand-hierarchy |a: b: c: d>
  expand-hierarchy 30 |a>
  expand-hierarchy 100 |a: b: c: d: e: f>
  q

2014-11-10
  chars |fish>
  q

2014-11-10
  chars-fn |*> #= chars |_self>
  |list> => |George> + |george> + |gerge> + |orge>
  dump
  chars-fn |*> #=> chars |_self>
  dump
  map[chars-fn,chars] "" |list>
  dump
  similar[chars] |George>
  100 similar[chars] |George>
  dump
  history
  
  dump
  save similar-chars-example.sw
  q

2014-11-11
  load fragment-webpages-64k.sw
  |list> => |abc-1-64k>  + |abc-2-64k>  + |abc-3-64k>  + |adelaidenow-1-64k>  + |adelaidenow-2-64k>  + |adelaidenow-3-64k>  + |slashdot-1-64k>  + |slashdot-2-64k>  + |slashdot-3-64k>  + |smh-1-64k>  + |smh-2-64k>  + |smh-3-64k>  + |youtube-1-64k>  + |youtube-2-64k>  + |youtube-3-64k>
  dump |list>
  simm |*> #=> 100 (|_self> + similar[hash-64k] |_self>)
  map[simm,similarity] "" |list>
  matrix[similarity]
  clean-simm |*> #=> set-to[100] drop-below[0.7] (|_self> + similar[hash-64k] |_self>)
  clean-simm |abc-1-64k>
  map[clean-simm,clean-similarity] "" |list>
  matrix[clean-similarity]
  history
  -- wow. clean similarity matrix is kinda cool!
  save history

2014-11-12
  load fragment-webpages-64k.sw
  |list> => |abc-1-64k>  + |abc-2-64k>  + |abc-3-64k>  + |adelaidenow-1-64k>  + |adelaidenow-2-64k>  + |adelaidenow-3-64k>  + |slashdot-1-64k>  + |slashdot-2-64k>  + |slashdot-3-64k>  + |smh-1-64k>  + |smh-2-64k>  + |smh-3-64k>  + |youtube-1-64k>  + |youtube-2-64k>  + |youtube-3-64k>
  dump |list>
  simm |*> #=> 100 (|_self> + similar[hash-64k] |_self>)
  map[simm,similarity] "" |list>
  matrix[similarity]
  clean-simm |*> #=> set-to[100] drop-below[0.7] (|_self> + similar[hash-64k] |_self>)
  clean-simm |abc-1-64k>
  map[clean-simm,clean-similarity] "" |list>
  matrix[clean-similarity]
  history
  -- wow. clean similarity matrix is kinda cool!
  save history
  context
  context test inverse vs active-buffer
  |x> => |a> + |b> + |c> + |d> + |e>
  dump
  create inverse
  dump
  inverse- split |a c d>
  active-buffer[7,1] split |a c d>
  active-buffer[7,0.1] split |a c d>
  -- cool, so deep similarity in inverse-foo and active-buffer[7,0.5,foo]
  save history

2014-11-13
  next |*> #=> pick-elt (|op: N> + |op: NE>)
  next |fish>
  .
  .
  .
  .
  
  history
  |cell> => |here>
  next |*> #=> pick-elt (|> + |>)
  dump
  |cell> => next |_self>
  dump
  q

2014-11-13
  S |1 1> => |1 2>
  S |1 2> => |1 3>
  S |1 3> => |1 4>
  dump
  value |1 1> => |0>
  value |1 2> = |0>
  value |1 3> => |0>
  value |1 4> +> |0>
  dump
  value |1 2> => |0>
  dump
  value |1 4> => |0>
  dump
  next |*> #=> S |_self>
  next |1 1>
  next^2 |1 1>
  dump
  |cell> => |1 1>
  dump
  value "" |cell>
  -- doh! value is a built in fn.
  -- ie, name clash. Damn....
  dump
  val |1 1> => |0>
  dump
  val |1 2> => |0>
  val |1 3> => |0>
  val |1 4> => |0>
  dump
  val "" |cell>
  val "" |cell> => arithmetic(val "" |cell>,|+>,|1>)
  dump
  |cell> => next |cell>
  dump
  next |cell>
  next "" |cell>
  dump
  |cell> => next "" |cell>
  dump
  val "" |cell> => arithmetic(val "" |cell>,|+>,|1>)
  dump
  history
  q

2014-11-17
  load factorial.sw
  dump
  fact |4>
  fact |5>
  q

2014-11-23
  load names.sw
  find-topic[names] |thompson>
  load WP-word-frequencies.sw
  find-topic[words-2] |quantum mechanics>
  load internet-acronyms.sw
  dump
  |t> => |text: fwiw I think it is all fud imho, lol. thx.>
  read "" |t>
  active-buffer[7,0] read "" |t>
  history
  read |text: fwiw I think it is all fud imho, lol. thx.>
  active-buffer[7,0] read |text: fwiw I think it is all fud imho, lol. thx.>
  history
  q

2014-11-23
  plural |word: *> #=> merge-labels(|_self> + |s>)
  plural |word: mouse> => |word: mice>
  plural |word: foot> => |word: feet>
  dump
  matrix[plural]
  dump
  context
  context learning plurals
  plural |word: *> #=> merge-labels(|_self> + |s>)
  plural |word: mouse> => |word: mice>
  plural |word: foot> => |word: feet>
  dump
  save learning-plurals.sw
  q

2014-11-24
  load WP-word-frequencies.sw
  similar[words] |WP: rivers>
  history
  100 similar[words] |WP: rivers>
  |list> => clean find-topic[words] |wikipedia>
  dump |list>
  simm |*> #=> 100 (|_self> + similar[words] |_self>)
  simm |WP: rivers>
  map[simm,similarity] "" |list>
  matrix[similarity]
  display |list>
  |list> +=> |WP: Adelaide>
  map[simm,similarity] "" |list>
  matrix[similarity]
  history
  simm-2 |*> #=> 100 (|_self> + similar[words-2] |_self>)
  map[simm-2,similarity-2] "" |list>
  matrix[similarity-2]
  -- wow. once we drop to 2-grams the wikipedia pages look vastly different from each other.
  -- let's try 3-grams now.
  history
  simm-3 |*> #=> 100 (|_self> + similar[words-3] |_self>)
  map[simm-3,similarity-3] "" |list>
  matrix[similarity-3]
  -- wow. really, really different from each other. cool
  count words-2 |WP: Australia>
  count words-3 |WP: Australia>
  count words-3 |WP: US presidents>
  count words |WP: US presidents>
  count-1 |*> #=> count |_self>
  count-1 |*> #=> count words |_self>
  count-2 |*> #=> count words-2 |_self>
  count-3 |*> #=> count words-3 |_self>
  map[count-1,count-1-m] "" |list>
  history
  map[count-2,count-2-m] "" |list>
  history
  map[count-3,count-3-m] "" |list>
  matrix[count-1-m]
  matrix[count-2-m]
  matrix[count-3-m]
  -- interesting. probably belongs in my journal.html
  save history

2014-11-25
  load WP-word-frequencies.sw
  similar[words] |WP: rivers>
  history
  100 similar[words] |WP: rivers>
  |list> => clean find-topic[words] |wikipedia>
  dump |list>
  simm |*> #=> 100 (|_self> + similar[words] |_self>)
  simm |WP: rivers>
  map[simm,similarity] "" |list>
  matrix[similarity]
  display |list>
  |list> +=> |WP: Adelaide>
  map[simm,similarity] "" |list>
  matrix[similarity]
  history
  simm-2 |*> #=> 100 (|_self> + similar[words-2] |_self>)
  map[simm-2,similarity-2] "" |list>
  matrix[similarity-2]
  -- wow. once we drop to 2-grams the wikipedia pages look vastly different from each other.
  -- let's try 3-grams now.
  history
  simm-3 |*> #=> 100 (|_self> + similar[words-3] |_self>)
  map[simm-3,similarity-3] "" |list>
  matrix[similarity-3]
  -- wow. really, really different from each other. cool
  count words-2 |WP: Australia>
  count words-3 |WP: Australia>
  count words-3 |WP: US presidents>
  count words |WP: US presidents>
  count-1 |*> #=> count |_self>
  count-1 |*> #=> count words |_self>
  count-2 |*> #=> count words-2 |_self>
  count-3 |*> #=> count words-3 |_self>
  map[count-1,count-1-m] "" |list>
  history
  map[count-2,count-2-m] "" |list>
  history
  map[count-3,count-3-m] "" |list>
  matrix[count-1-m]
  matrix[count-2-m]
  matrix[count-3-m]
  -- interesting. probably belongs in my journal.html
  save history
  history
  find-topic[words-2] |donald bradman>
  find-topic[words-2] |nicole kidmann>
  find-topic[words-2] |nicole kidman>
  
  load methanol.sw
  dump
  atom-type molecular-pieces |molecule: methanol>
  [A
  history
  atom-type molecular-pieces |molecule: methanol>
  context
  context wikipedia word frequencies
  relevant-kets[words]
  history
  save history

2014-11-29
  load WP-word-frequencies.sw
  similar[words] |WP: rivers>
  history
  100 similar[words] |WP: rivers>
  |list> => clean find-topic[words] |wikipedia>
  dump |list>
  simm |*> #=> 100 (|_self> + similar[words] |_self>)
  simm |WP: rivers>
  map[simm,similarity] "" |list>
  matrix[similarity]
  display |list>
  |list> +=> |WP: Adelaide>
  map[simm,similarity] "" |list>
  matrix[similarity]
  history
  simm-2 |*> #=> 100 (|_self> + similar[words-2] |_self>)
  map[simm-2,similarity-2] "" |list>
  matrix[similarity-2]
  -- wow. once we drop to 2-grams the wikipedia pages look vastly different from each other.
  -- let's try 3-grams now.
  history
  simm-3 |*> #=> 100 (|_self> + similar[words-3] |_self>)
  map[simm-3,similarity-3] "" |list>
  matrix[similarity-3]
  -- wow. really, really different from each other. cool
  count words-2 |WP: Australia>
  count words-3 |WP: Australia>
  count words-3 |WP: US presidents>
  count words |WP: US presidents>
  count-1 |*> #=> count |_self>
  count-1 |*> #=> count words |_self>
  count-2 |*> #=> count words-2 |_self>
  count-3 |*> #=> count words-3 |_self>
  map[count-1,count-1-m] "" |list>
  history
  map[count-2,count-2-m] "" |list>
  history
  map[count-3,count-3-m] "" |list>
  matrix[count-1-m]
  matrix[count-2-m]
  matrix[count-3-m]
  -- interesting. probably belongs in my journal.html
  save history
  history
  find-topic[words-2] |donald bradman>
  find-topic[words-2] |nicole kidmann>
  find-topic[words-2] |nicole kidman>
  
  load methanol.sw
  dump
  atom-type molecular-pieces |molecule: methanol>
  [A
  history
  atom-type molecular-pieces |molecule: methanol>
  context
  context wikipedia word frequencies
  relevant-kets[words]
  history
  save history
  load george.sw
  parents |person: George>
  dump
  display |person: George>
  p |person: *> #=> mother |_self> + father |_self>
  p |person: George>
  q

2014-12-01
  h
  friends |Fred> => |Sam> + |Mary> + |Bella>
  age |Sam> => |age: 39>
  age |Mary> => |age: 42>
  age |Bella> => |age: 36>
  history
  friends |Fred>
  age friends |Fred>
  friends |Sam> => |Liz> + |Rob>
  friends |Bella> => |Joan> + |Tom>
  friends |Sam>
  friends |Mary>
  friends |Bella>
  friends friends |Fred>
  dump
  age friends friends |Fred>
  load http://semantic-db.org/write-up/binary-tree-with-child.sw
  load binary-tree-with-child.sw
  dump
  child |x>
  child child |x>
  child^2 |x>
  child^3 |x>
  child^4 |x>
  
  child^4 |x>
  
  exp[child,3] |x>
  exp[child,2] |1>
  exp[left,2] |1>
  exp-max[child] |x>
  dump
  exp-max[child] |0>
  exp[child,2] |x>
  context
  context sw console
  context learn you
  age |you> => |age: 29>
  dump
  h
  reset
  context learn you
  |you> => |Fred>
  age |you> => |age: 29>
  dump
  "" |you>
  age "" |you> => |age: 29>
  dump
  |you> => |Sam>
  age "" |you> => |age: 34>
  dump
  context shop closing time
  |weekday: _list> => |Monday> + |Tuesday> + |Wednesday> + |Thursday> + |Friday>
  |weekend: _list> => |Saturday> + |Sunday>
  closing-time "" |weekday: _list> => |time: 6pm>
  closing-time "" |weekend: _list> => |time: 4:30pm>
  dump
  
  q

2014-12-01
  name |Fred> => |Fred Roberts>
  dump
  dump exact
  supported-ops |Fred> +=> |op: fish>
  dump
  dump exact
  supported-ops |Sam> => |op: hungry>
  dump exact
  supported-ops |Fred> => |op: name> + |op: fish>
  dump exact
  reset
  name |Fred> => |Fred Roberts>
  height |Fred> => |cm: 176>
  dump
  dump exact
  dob |Fred> => |date: 17/5/1986>
  friends |Fred> => |Mary> + |Liz> + |Tom> + |Frank>
  mother |Fred> => |Sarah Roberts>
  father |Fred> => |James Roberts>
  ops |Fred>
  supported-ops |Fred>
  apply(|op: father> + |op: father>,|Fred>)
  apply(|op: father> + |op: mother>,|Fred>)
  apply(supported-ops |Fred>,|Fred>)
  dump exact
  display |Fred>
  |list> => 6 |apples> + |milk>
  display |list>
  display
  reset
  op |x> => |a> + |b> + |c>
  create inverse
  dump
  reset
  child |Mary> => |Tim> + |Liz> + |Jane> + |Rob>
  child |James> => |Tim> + |Liz> + |Jane> + |Rob>
  dump
  create inverse
  dump
  context primes
  is-prime |*> => |no>
  |list> => range(|2>,|20>)
  dump
  map[is-prime] "" |list>
  dump
  is-prime |2> => |yes>
  is-prime |3> => |yes>
  |prime-list> => split |2 3 5 7 11 13 17 19>
  is-prime |*> => |yes>
  map[is-prime] "" |prime-list>
  dump
  history
  map[is-prime] "" |prime-list>
  dump
  q

2014-12-02
  load short-list-primes.sw
  dump
  create inverse
  dump
  reset
  load early-us-presidents.sw
  dump
  train-of-thought[20] |Washington>
  
  create inverse
  train-of-thought[20] |Washington>
  .
  .
  .
  reset
  friends |Fred> + |Mary> + |Liz>
  friends |Fred> => friends |Fred> + |Sam> + |Rob> + |Emma>
  dump
  reset
  |a> => |start value>
  |r1> => "" |a>
  |r2> #=> "" |a>
  "" |r1>
  "" |r2>
  |a> => |next value>
  "" |r1>
  "" |r2>
  fish |fred>
  dump
  context
  reset
  op |x> => 100 |_self>
  dump
  q

2014-12-02
  load blog-george.sw
  dump
  display
  q

2014-12-03
  load general-people-rules.sw
  dump
  mother |person: Fred> => |person: Judith>
   father |person: Fred> => |person: Frank>
  sisters |person: Fred> => |person: Liz> + |person: Emma> + |person: Jane>
  dump
  parents |person: Fred>
  siblings |person: Fred>
  brother |person: Fred> => |person: Jack>
  siblings |person: Fred>
  brothers |person: Fred> => |person: Jack>
  siblings |person: Fred>
  immediate-family |person: Fred>
  load methanol.sw
  dump
  atom-type molecular-pieces |molecule: methanol>
  merge_labels(|a> + |b> + |c>)
  merge-labels(|a> + |b> + |c>)
  merge-labels(|a> + |b> + |c> + |a> + |a>)
  plural |word: radius> => |word: radii>
  plural |word: radius>
  plural |word: *> #=> merge-labels(|_self> + |s>)
  plural |word: foot> => |word: feet>
  plural |word: mouse> => |word: mice>
  matrix[plural]
  plural |word: foot> => |word: feet>
  matrix[plural]
  pick-elt (|a> + |b> + |c> + |d> + |e> + |f> + |g> + |h>)
  .
  .
  .
  .
  pick-elt (10|a> + 3.141592|pi> + |fred> + 7|cats>)
  dump
  history
  pick-elt (10|a> + 3.141592|pi> + |fred> + 7|cats>)
  .
  .
  .
  .
  is-alive |cat> #=> normalize pick-elt (0.5|yes> + 0.5|no>)
  is-alive |cat>
  .
  .
  normalize (3|a> + 10|b> + |c>)
  count-sum normalize (3|a> + 10|b> + |c>)
  q

2014-12-03
  load greetings-play.sw
  dump
  random-greet |Fred>
  random-greet |John>
  random-greet |Emma>
  .
  friends |Sam> => |Charlie> + |George> + |Emma> + |Jack> + |Rober> + |Frank> + |Julie>
  list-to-words friends |Sam>
  extract-value list-to-words friends |Sam>
  friends-list |*> #=> extract-value list-to-words friends |_self>
  friends |Sam> => |Charlie> + |George> + |Emma> + |Jack> + |Robert> + |Frank> + |Julie>
  friends-list |Sam>
  friends-list |Emma>
  friends |Emma> => |Liz> + |Bob>
  friends-list |Emma>
  random-greet friends-list |Emma>
  random-greet friends-list |Sam>
  history
  |you> => |Tim>
  random-greet "" |you>
  .
  .
  load factorial.sw
  dump
  context
  fact |5>
  load fibonacci.sw
  q

2014-12-04
  load fibonacci.sw
  dump
  fib |10> => fib |10>
  fib |11> => fib |11>
  dump
  fib |20> => fib |20>
  fib |21> => fib |_self>
  dump
  fib-ratio |30>
  dump
  fib (|10> + |11> + |12> + |13> + |14> + |15>)
  load factorial.sw
  fact (|0> + |1> + |2> + |3> + |4> + |5> + |6> + |7>)
  q

2014-12-05
  is-a |Mary> => |mother>
  is-a |mother> => |parent>
  is-a |father> => |parent>
  is-a is-a |Mary>
  q

2014-12-08
  context simple sets
  |A> => |a1> + |a2> + |a3> + |ab> + |ac> + |abc>     
  |B> => |b1> + |b2> + |b3> + |ab> + |bc> + |abc>
  |C> => |c1> + |c2> + |c3> + |ac> + |bc> + |abc>
  
  dump
  "" |A> + "" |B> + "" |C>
  drop-below[3] (""|A> + ""|B> + ""|C>)
  clean drop-below[3] (""|A> + ""|B> + ""|C>)
  clean 0 |a>
  drop-below[2] (""|A> + ""|B> + ""|C>)
  clean drop-below[2] (""|A> + ""|B> + ""|C>)
  clean drop-below[3] (""|A> + ""|B> + ""|C>)
  history
  history 100
  q

2014-12-09
  |cell> => |grid: 5 7>
  cell-value |grid: 5 7> => |4>
  cell-value "" |cell> => arithmetic(cell-value |_self>,|+>,|1>)
  dump
  cell-value "" |cell> => arithmetic(cell-value |_self>,|+>,|1>)
  dump
  cell-value "" |cell> => arithmetic(cell-value |_self>,|+>,|1>)
  dump
  history
  cell-value |grid: 2 2> => |20>
  |cell> => |grid: 2 2>
  cell-value "" |cell> => arithmetic(cell-value |_self>,|+>,|1>)
  dump
  save history

2014-12-10
  N |grid: 4 40> => |grid: 3 40>
  NE |grid: 4 40> => |grid: 3 41>
  E |grid: 4 40> => |grid: 4 41>
  SE |grid: 4 40> => |grid: 5 41>
  S |grid: 4 40> => |grid: 5 40>
  SW |grid: 4 40> => |grid: 5 39>
  W |grid: 4 40> => |grid: 4 39>
  NW |grid: 4 40> => |grid: 3 39>dump
  
  dump
  near |grid: *> #=> |_self> + N|_self> + NE|_self> + E|_self> + SE|_self> + S|_self> + SW|_self> + W|_self> + NW|_self>
  dump
  building |grid: 4 40> => |building: cafe>
  create inverse
  current |location> => inverse-building |building: cafe>
  current |location>
  near current |location>
  history
  near current |location>
  dump
  context friends
  friends |Fred> => |Sam> + |Liz>
  friends |Fred>
  op (2|x> + 3|y> + |z>)
  q

2014-12-11
  2436366 2436366 |x>
  q

2014-12-12
  age-n-1 |age: *> #=> arithmetic("" |_self>,|->,|age: 1>)
  age-n-1 |age: 23>
  age-n-1 |age: *> #=> arithmetic(|_self>,|->,|age: 1>)
  age-n-1 |age: 23>
  nearly |age: *> #=> age-n-1 |_self>
  nearly |age: 20>
  dump
  age-n+1 |age: *> #=> arithmetic(|_self>,|+>,|age: 1>)
  almost |age: *> #=> 0.5 age-n-1 |_self> + |_self> + 0.5 age-n+1 |_self>
  almost |30>
  almost |age: 30>
  dump
  age-n+1 |age: 20>
  age-np1 |age: *> #=> arithmetic(|_self>,|+>,|age: 1>)
  dump
  almost |age: *> #=> 0.5 age-n-1 |_self> + |_self> + 0.5 age-np1 |_self>
  almost |age: 30>
  f |*> #=> 3 algebra(""|_self>,|^>,|2>) + 5 ""|_self> + 19| >
  g |*> #=> 7 algebra(""|_self>,|^>,|2>)
  |x> => |a>
  g |x>
  f |x>
  |x> => |a>
  history
  f |x>
  g |x>
  g f |x>
  g |x>
  g f |x>
  |y> => f |x>
  g |y>
  h |*> #=> 2 algebra(|_self>,|^>,|3>)
  h |x>
  h (|a> + |b>)
  history
  h |x>
  h (|a> + |b>)
  q

2014-12-12
  age-n-1 |age: *> #=> arithmetic(|_self>,|->,|age: 1>)
  age-n-1 |age: 20>
  age-n+1 |age: *> #=> arithmetic(|_self>,|+>,|age: 1>)
  age-n+1 |age: 23>
  almost |age: *> #=> age-n-1 |_self>
  roughly |age: *> #=> 0.5 age-n-1 |_self> + |_self> + 0.5 age-n+1 |_self>
  dump
  almost |age: 20>
  roughly |age: 25>
  dump
  almost |19>
  almost |age: 19>
  roughly |age: 27>
  q

2014-12-12
  load 45-by-45-grid.sw
  dump
  near |grid: *> #=> |_self> + N|_self> + NE|_self> + E|_self> + SE|_self> + S|_self> + SW|_self> + W|_self> + NW|_self>
  building |grid: 4 40> => |building: cafe>
  create inverse
  history
  current |location> => inverse-building |building: cafe>
  current |location>
  near current |location>
  NW current |location>
  NW^3 current |location>
  NW^4 current |location>
  S^7 current |location>
  near S^7 current |location>
  history
  current |location>
  NW^3 current |location>
  near NW^3 current |location>
  history
  ops NW^3 current |location>
  q

2014-12-14
  hello |*> #=> merge-labels(|Hello, > + |_self> + |!>)
  hey |*> #=> merge-labels(|Hey Ho! > + |_self> + |.>)
  wat-up |*> #=> merge-labels (|Wat up my homie! > + |_self> + | right?>)
  greetings |*> #=> merge-labels(|Greetings fine Sir. I believe they call you > + |_self> + |.>)
  howdy |*> => |Howdy partner!>
  good-morning |*> #=> merge-labels(|Good morning > + |_self> + |.>)
  gday |*> #=> merge-labels(|G'day > + |_self> + |.>)
  
  random-greet |*> #=> pick-elt ( hello |_self> + hey |_self> + wat-up |_self> + greetings |_self> + howdy |_self> + good-morning |_self> + gday |_self>)
  random-greet |Sam>
  .
  |you> => |Sam>
  age "" |you> => |age: 23>
  age |Sam>
  dump
  random-greet "" |you>
  .
  .
  .
  history
  context
  history
  history 100
  context fuzzy logic
  |action> #=> if(is-very-cold current |temperature>,|stop fan>,|>)
  |action> #=> if(is-cold current |temperature>,|turn down fan>,|>)
  |action> #=> if(is-normal current |temperature>,|maintain level>,|>)
  |action> #=> if(is-hot current |temperature>,|speed up fan>,|>)
  
  dump
  |very cold action> #=> if(is-very-cold current |temperature>,|stop fan>,|>)
  |cold action> #=> if(is-cold current |temperature>,|turn down fan>,|>)
  |normal action> #=> if(is-normal current |temperature>,|maintain level>,|>)
  |hot action> #=> if(is-hot current |temperature>,|speed up fan>,|>)
  |action> #=> "" |very cold action> + "" |cold action> + "" |normal action> + "" |hot action>
  
  dump
  is-cold |C: 13> => |True>
  current |temperature> => |C: 13>
  dump
  ""|action>
  dump
  current |temperature> => |C: 20>
  "" |action>
  dump
  history
  if(|True>,|a>,|b>)
  if(0.2|True>,|a>,|b>)
  q

2014-12-15
  wif(0.7|true>,|a>,|b>)
  wif(0.8|false>,|a>,|b>)
  |context> => |context: fuzzy logic>
  
   |action> #=> "" |very cold action> + "" |cold action> + "" |normal action> + "" |hot action>
  
   |very cold action> #=> if(is-very-cold current |temperature>,|stop fan>,|>)
  
   |cold action> #=> if(is-cold current |temperature>,|turn down fan>,|>)
  
   |normal action> #=> if(is-normal current |temperature>,|maintain level>,|>)
  
   |hot action> #=> if(is-hot current |temperature>,|speed up fan>,|>)
  
  is-cold |C: 13> => |True>
  
  current |temperature> => |C: 13>
  
  dump
   |very cold action> #=> wif(is-very-cold current |temperature>,|stop fan>,|>)
  
   |cold action> #=> wif(is-cold current |temperature>,|turn down fan>,|>)
  
   |normal action> #=> wif(is-normal current |temperature>,|maintain level>,|>)
  
   |hot action> #=> wif(is-hot current |temperature>,|speed up fan>,|>)
  dump
  is-cold |C: 17> => 0.6 |true>
  current |temperature> => |C: 17>
  "" |action>
  dump
  is-very-cold |C: *> #=> |false>
  is-normal |C: *> #=> |false>
  is-hot |C: *> => |false>
  dump
  "" |action>
  dump
  source |context: fuzzy logic> => |url: http://en.wikipedia.org/wiki/Fuzzy_logic>
  is-very-cold |C: *> => |false>
  is-normal |C: *> => |false>
  dump
  save fuzzy-logic-example.sw
  dump
  pick-elt |>
  context semantic network
  -- http://en.wikipedia.org/wiki/Semantic_network
  is-a |canary> => |bird>
  color |canary> => |yellow>
  size |canary> => |small>
  
  is-a |penguin> => |bird>
  movement |penguin> => |swim>
  
  is-a |bird> => |vertebrate>
  has-part |bird> => |wings>
  reproduction |bird> => |egg-laying>
  dump
  display
  is-a |canary>
  is-a is-a |canary>
  
  dump
  create inverse
  inverse-is-a |bird>
  inverse-size |small>
  context
  display |canary>
  context
  -- "all humans are mortal"
  is-mortal |human: *> #=> |yes>
  -- "Socrates is a human, and therefore mortal"
  is-mortal |human> => |yes>
  dump
  history
  is-a |Socrates> => |human>
  is-mortal is-a |Socrates>
  -- reading here: http://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning
  save history

2014-12-15
  wif(0.7|true>,|a>,|b>)
  wif(0.8|false>,|a>,|b>)
  |context> => |context: fuzzy logic>
  
   |action> #=> "" |very cold action> + "" |cold action> + "" |normal action> + "" |hot action>
  
   |very cold action> #=> if(is-very-cold current |temperature>,|stop fan>,|>)
  
   |cold action> #=> if(is-cold current |temperature>,|turn down fan>,|>)
  
   |normal action> #=> if(is-normal current |temperature>,|maintain level>,|>)
  
   |hot action> #=> if(is-hot current |temperature>,|speed up fan>,|>)
  
  is-cold |C: 13> => |True>
  
  current |temperature> => |C: 13>
  
  dump
   |very cold action> #=> wif(is-very-cold current |temperature>,|stop fan>,|>)
  
   |cold action> #=> wif(is-cold current |temperature>,|turn down fan>,|>)
  
   |normal action> #=> wif(is-normal current |temperature>,|maintain level>,|>)
  
   |hot action> #=> wif(is-hot current |temperature>,|speed up fan>,|>)
  dump
  is-cold |C: 17> => 0.6 |true>
  current |temperature> => |C: 17>
  "" |action>
  dump
  is-very-cold |C: *> #=> |false>
  is-normal |C: *> #=> |false>
  is-hot |C: *> => |false>
  dump
  "" |action>
  dump
  source |context: fuzzy logic> => |url: http://en.wikipedia.org/wiki/Fuzzy_logic>
  is-very-cold |C: *> => |false>
  is-normal |C: *> => |false>
  dump
  save fuzzy-logic-example.sw
  dump
  pick-elt |>
  context semantic network
  -- http://en.wikipedia.org/wiki/Semantic_network
  is-a |canary> => |bird>
  color |canary> => |yellow>
  size |canary> => |small>
  
  is-a |penguin> => |bird>
  movement |penguin> => |swim>
  
  is-a |bird> => |vertebrate>
  has-part |bird> => |wings>
  reproduction |bird> => |egg-laying>
  dump
  display
  is-a |canary>
  is-a is-a |canary>
  
  dump
  create inverse
  inverse-is-a |bird>
  inverse-size |small>
  context
  display |canary>
  context
  -- "all humans are mortal"
  is-mortal |human: *> #=> |yes>
  -- "Socrates is a human, and therefore mortal"
  is-mortal |human> => |yes>
  dump
  history
  is-a |Socrates> => |human>
  is-mortal is-a |Socrates>
  -- reading here: http://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning
  save history
  dump |Socrates>
  apply(ops|Socrates>,|Socrates>)
  star |*> #=> apply(ops|_self>,|_self>)
  is-mortal star |Socrates>
  star star |Socrates>
  history
  context smooth matrix
  smooth |x1> => 0.75 |y1> + 0.25 |y2>
  smooth |x2> => 0.25 |y1> + 0.5|y2> + 0.25 |y3>
  smooth |x3> => 0.25 |y2> + 0.5|y3> + 0.25|y4>
  smooth |x4> => 0.25|y3> + 0.75|y4>
  matrix[smooth]
  matrix[smooth,smooth]
  merged-matrix[smooth,smooth]
  dump
  smooth |x1> => 0.750|x1> + 0.250|x2>
  smooth |x2> => 0.250|x1> + 0.500|x2> + 0.250|x3>
  smooth |x3> => 0.250|x2> + 0.500|x3> + 0.250|x4>
  smooth |x4> => 0.250|x3> + 0.750|x4>
  
  dump
  matrix[smooth]
  matrix[smooth,smooth]
  merged-matrix[smooth,smooth]
  16 smooth |x1>
  16 smooth smooth |x1>
  save history

2014-12-16
  wif(0.7|true>,|a>,|b>)
  wif(0.8|false>,|a>,|b>)
  |context> => |context: fuzzy logic>
  
   |action> #=> "" |very cold action> + "" |cold action> + "" |normal action> + "" |hot action>
  
   |very cold action> #=> if(is-very-cold current |temperature>,|stop fan>,|>)
  
   |cold action> #=> if(is-cold current |temperature>,|turn down fan>,|>)
  
   |normal action> #=> if(is-normal current |temperature>,|maintain level>,|>)
  
   |hot action> #=> if(is-hot current |temperature>,|speed up fan>,|>)
  
  is-cold |C: 13> => |True>
  
  current |temperature> => |C: 13>
  
  dump
   |very cold action> #=> wif(is-very-cold current |temperature>,|stop fan>,|>)
  
   |cold action> #=> wif(is-cold current |temperature>,|turn down fan>,|>)
  
   |normal action> #=> wif(is-normal current |temperature>,|maintain level>,|>)
  
   |hot action> #=> wif(is-hot current |temperature>,|speed up fan>,|>)
  dump
  is-cold |C: 17> => 0.6 |true>
  current |temperature> => |C: 17>
  "" |action>
  dump
  is-very-cold |C: *> #=> |false>
  is-normal |C: *> #=> |false>
  is-hot |C: *> => |false>
  dump
  "" |action>
  dump
  source |context: fuzzy logic> => |url: http://en.wikipedia.org/wiki/Fuzzy_logic>
  is-very-cold |C: *> => |false>
  is-normal |C: *> => |false>
  dump
  save fuzzy-logic-example.sw
  dump
  pick-elt |>
  context semantic network
  -- http://en.wikipedia.org/wiki/Semantic_network
  is-a |canary> => |bird>
  color |canary> => |yellow>
  size |canary> => |small>
  
  is-a |penguin> => |bird>
  movement |penguin> => |swim>
  
  is-a |bird> => |vertebrate>
  has-part |bird> => |wings>
  reproduction |bird> => |egg-laying>
  dump
  display
  is-a |canary>
  is-a is-a |canary>
  
  dump
  create inverse
  inverse-is-a |bird>
  inverse-size |small>
  context
  display |canary>
  context
  -- "all humans are mortal"
  is-mortal |human: *> #=> |yes>
  -- "Socrates is a human, and therefore mortal"
  is-mortal |human> => |yes>
  dump
  history
  is-a |Socrates> => |human>
  is-mortal is-a |Socrates>
  -- reading here: http://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning
  save history
  dump |Socrates>
  apply(ops|Socrates>,|Socrates>)
  star |*> #=> apply(ops|_self>,|_self>)
  is-mortal star |Socrates>
  star star |Socrates>
  history
  context smooth matrix
  smooth |x1> => 0.75 |y1> + 0.25 |y2>
  smooth |x2> => 0.25 |y1> + 0.5|y2> + 0.25 |y3>
  smooth |x3> => 0.25 |y2> + 0.5|y3> + 0.25|y4>
  smooth |x4> => 0.25|y3> + 0.75|y4>
  matrix[smooth]
  matrix[smooth,smooth]
  merged-matrix[smooth,smooth]
  dump
  smooth |x1> => 0.750|x1> + 0.250|x2>
  smooth |x2> => 0.250|x1> + 0.500|x2> + 0.250|x3>
  smooth |x3> => 0.250|x2> + 0.500|x3> + 0.250|x4>
  smooth |x4> => 0.250|x3> + 0.750|x4>
  
  dump
  matrix[smooth]
  matrix[smooth,smooth]
  merged-matrix[smooth,smooth]
  16 smooth |x1>
  16 smooth smooth |x1>
  save history
  history
  context
  context smooth map
  smooth |x: 1> => 0.75|x: 1> + 0.25|x: 2>
  smooth |x: 10> => 0.25|x: 9> + 0.75|x: 10>
  x-1 |x: *> #=> arithmetic(|_self>,|->,|x: 1>)
  x+1 |x: *> #=> arithmetic(|_self>,|+>.|x: 1>)
  dump
  smooth |x: *> #=> 0.25 x-1 |_self> + 0.5 |_self> + 0.25 x+1 |_self>
  dump
  save smooth-map.sw
  range(|x: 1>,|x: 10>)
  |list> => range(|x: 1>,|x: 10>)
  save smooth-map.sw
  dump
  map[smooth,stored-smooth] "" |list>
  dump
  matrix[stored-smooth]
  dump
  x+1 |x: 7>
  q

2014-12-16
  files
  load smooth-map.sw
  dump
  x+1 |x: 13>
  x+1 |x: *> #=> arithmetic(|_self>,|+>,|x: 1>)
  x+1 |x: 13>
  dump
  history
  save smooth-map.sw
  map[smooth,stored-smooth] range(|x: 1>,|x: 10>)
  dump
  matrix[stored-smooth]
  matrix[smooth,smooth]
  matrix[stored-smooth,stored-smooth]
  .
  merged-matrix[stored-smooth,stored-smooth]
  history
  save history

2014-12-16
  files
  load smooth-map.sw
  dump
  x+1 |x: 13>
  x+1 |x: *> #=> arithmetic(|_self>,|+>,|x: 1>)
  x+1 |x: 13>
  dump
  history
  save smooth-map.sw
  map[smooth,stored-smooth] range(|x: 1>,|x: 10>)
  dump
  matrix[stored-smooth]
  matrix[smooth,smooth]
  matrix[stored-smooth,stored-smooth]
  .
  merged-matrix[stored-smooth,stored-smooth]
  history
  save history
  dump
  history
  q

2014-12-21
  |context> => |context: greetings play>
  
  hello |*> #=> merge-labels(|Hello, > + |_self> + |!>)
  hey |*> #=> merge-labels(|Hey Ho! > + |_self> + |.>)
  wat-up |*> #=> merge-labels (|Wat up my homie! > + |_self> + | right?>)
  greetings |*> #=> merge-labels(|Greetings fine Sir. I believe they call you > + |_self> + |.>)
  howdy |*> => |Howdy partner!>
  good-morning |*> #=> merge-labels(|Good morning > + |_self> + |.>)
  gday |*> #=> merge-labels(|G'day > + |_self> + |.>)
  dump
  wat-up |Fred>
  |greet list> => |op: hello> + |op: hey> + |op: wat-up>
  dump
  random-greet |*> #=> apply(pick-elt "" |greet list>,|_self>)
  dump
  random-greet |Sam>
  .
  .
  .
  .
  .
  .
  .
  dump
  |greet list> => |op: hello> + |op: hey> + |op: wat-up> + |op: greetings> + |op: howdy> + |op: good-morning> + |op; gday>
  dump
  random-greet |Rob>
  .
  .
  .
  .
  dump
  |greet list> => |op: hello> + |op: hey> + |op: wat-up> + |op: greetings> + |op: howdy> + |op: good-morning> + |op: gday>
  random-greet |Rob>
  .
  .
  .
  dump
  save improved-random-greet.sw
  dump
  context
  q

2014-12-23
  h
  context
  q

2014-12-23
  friends |Fred> => |Sam> + |Liz> + |Tyler>
  dump
  how-many friends |Fred>
  q

2014-12-24
  |list> => |x> + |y> + |z>
  "" |list>
  list-to-words "" |list>
  list-to-words (|x>)
  list-to-words (|x> + |y>)
  list-to-words split |a b c d e f>
  how-many split |a b c d e f>
  history
  q

2015-01-04
  do-you-know age |Fred>
  age |Fred> => |32>
  do-you-know age |Fred>
  not-empty age |Fred>
  o |x> => split |a b c d e>
  do-you-know o |x>
  subtraction-invert[10] 15 |x>
  q

2015-01-04
  subtraction-invert[10] 15 |x>
  subtraction-invert[1] 0|x>
  subtraction-invert[1] |x>
  q

2015-01-04
  equal(|a>,|a>)
  equal(2|a>,|a>)
  equal(|a> + |b>,|a>)
  q

2015-01-04
  push-float 3| >
  push-float 3|x>
  push-float 3.141592|x: y  >
  pop-float |3.2>
  pop-float 5|7>
  pop-float |x: 2>
  pop-float 5.2|x: y: 2>
  pop-float |x: y>
  q

2015-01-04
  do-you-know age friends |Fred>
  friends |Fred> => |Sam> + |Maz>
  age |Maz> => |23>
  do-you-know age friends |Fred>
  equal(count age friends |Fred>,count friends |Fred>)
  equal(pop-float count age freinds |Fred>,pop-float count friends |Fred>)
  dump
  age freinds |Fred>
  count age freinds |Fred>
  -- doh bug! count |> == |number: 1>
  count |>
  -- should be |number: 0>
  q

2015-01-04
  count |>
  count age |x>
  count (|> + |>)
   equal(pop-float count age freinds |Fred>,pop-float count friends |Fred>)
  pop-float count friends |Fred>
  pop-float count freinds |Fred>
  equal(0|x>,0|x>)
  friends |Fred> => |Sam> + |Maz>
  age |Maz> => |24>
  dump
  count friends |Fred>
  pop-float count friends |Fred>
  count age friends |Fred>
  pop-float count age friends |Fred>
  history
  equal(pop-float count age friends |Fred>,pop-float count friends |Fred>)
  -- cool. Finally got there!
  q

2015-01-04
  load bot-bella.sw
  dump
  display
  files
  load bots.sw
  display
  q

2015-01-04
  push-float |>
  pop-float |>
  push-float push-float |>
  push-float 5 push-float 3 push-float 2 |>
  -- cool! So suddenly a ket-label can act as a stack of floats.
  pop-float |2.0: 3.0: 5.0>
  pop-float^2 |2.0: 3.0: 5.0>
  pop-float^3 |2.0: 3.0: 5.0>
  pop-float^4 |2.0: 3.0: 5.0>
  pop-float 5| >
  pop-float 5|>
  pop-float | >
  pop-float |x: y >
  q

2015-01-05
  cat-depth |>
  cat-depth |x>
  cat-depth |x: y>
  cat-depth |x: y: z>
  pop-float cat-depth |x: y: z>
  push-float pop-float cat-depth |x: y: z>
  pop-float push-float |x>
  push-float |x>
  -- so push-float pop-float == pop-float push-float == no change
  N |here> => |there>
  north |*> #=> N |_self>
  north |here>
  N |here>
  q

2015-01-06
  max (|x> + |y> + 0.5|z>)
  min (|x> + |y> + 0.5|z>)
  display |x>
  transpose |x>
  discrimination |x>
  discrimination (10|x> + 7|y>)
  product (3|x> + 2|y>)
  drop (3|x> + 2|y)
  drop (3|x> + 2|y>)
  drop (3|x> + 2|y> + -7|fish> + |z> + -9|r>)
  drop-below[2] (3|x> + 2|y> + -7|fish> + |z> + -9|r>)
  drop-above[2] (3|x> + 2|y> + -7|fish> + |z> + -9|r>)
  mult[10] (3|x> + 2|y> + -7|fish> + |z> + -9|r>)
  select-elt[3] split |a b c d e f>
  delete-elt[4] split |a b c d e f>
  reverse split |a b c d e f>
  shuffle split |a b c d e f>
  ket-sort shuffle split |a b c d e f>
  max-elt split |a b c d>
  max-elt shuffle split |a b c d>
  .
  .
  .
  mult[7] split |a b c d>
  absolute-noise[10] 0 split |a b c d e f>
  relative-noise[1] split |a b c d e f>
  mormalize split |a b c d e>
  normalize split |a b c d e>
  normalize[10] split |a b c d e>
  not-empty |x>
  not-empty |>
  do-you-know |>
  q

2015-01-06
  min-coeff |x>
  max-coeff 13|x>
  max-coeff |y>
  max-coeff split |a b c>
  discrim split |a b c d>
  rescale[10] split |a b c>
  count split |a b c>
  q

2015-01-07
  load fred-sam-friends.sw
  dump
  q

2015-01-07
  arithmetic(|m: 3>,|+>,|km: 2>)
  arithmetic(|m: 3>,|+>,|m: 2>)
  load fred-sam-friends.sw
  dump
  star |*> #=> apply(supported-ops |_self>,|_self>)
  star |Fred>
  age |Fred> => |age: 23>
  star |Fred>
  height |Fred> => |cm: 177>
  star |Fred>
  dump
  reset
  name |Fred> => |Fred Roberts>
  
  height |Fred> => |cm: 176>
  
  dob |Fred> => |date: 17/5/1986>
  
  friends |Fred> => |Mary> + |Liz> + |Tom> + |Frank>
  
  mother |Fred> => |Sarah Roberts>
  
  father |Fred> => |James Roberts>
  dump
  dump exact
  display |Fred>
  q

2015-01-12
  load blog-george.sw
  dump
  what-do-you-know-about |*> #=> apply(ops |_self>,|_self>)
  what-do-you-know-about |person: George>
  q

2015-01-12
  load-image[frog.png] |some ket>
  dump
  q

2015-01-12
  load-image[frog.png] |some ket>
  dump
  load-image[bah.png] split |a b c d>
  dump
  q

2015-01-12
  load-image[frog.png] |x>
  dump
  load-image[lenna.png] |x>
  dump
  q

2015-01-12
  load-image[lenna.png] |x>
  dump
  q

2015-01-12
  load-image[220px-Lenna.png] |y>
  dump
  q

2015-01-12
  load-image[220px-Lenna.png] |x>
  dump
  q

2015-01-12
  load-image[220px-Lenna.png] |x>
  dump
  q

2015-01-12
  load-image[220px-Lenna.png] |x>
  dump
  q

2015-01-12
  load-image[220px-Lenna.png] |image>
  save new-220-lenna.sw
  history
  q

2015-01-13
  load-image[220px-Lenna.png] |image>
  save new-220-lenna.sw
  q

2015-01-17
  dump
  name |fred> => |Fred Roberts>
  age |fred> => |23>
  dump
  height |fred> => |cm: 177>
  dump exact
  age |fred> => |24>
  dump exact
  age |sam> => |27>
  dump exact
  q

2015-01-17
  mother |Fred> => |Jane>
  age |Fred> => |35>
  dump
  clone(|Fred>,|Sam>)
  dump
  q

2015-01-18
  foo |x> #=> |>
  dump
  foo |x>
  do-you-know foo |x>
  q

2015-01-18
  age |Fred> => |23>
  create inverse
  dump
  q

2015-01-18
  age |Fred> => |22>
  friends |Fred> => |Sam> + |Liz>
  display |Fred>
  q

2015-01-18
  age |Fred> => |27>
  friends |Fred> => |Sam> + |liz> + |Rob> + |patrick>
  display |Fred>
  parents |Fred> #=> mother |_self> + father |_self>
  dump
  display |Fred>
  dump |Fred>
  
  dump |Fred>
  q

2015-01-18
  age |Fred> => |27>
  friends |Fred> => |Sam> + |liz> + |Rob> + |patrick>
  parents |Fred> => |Rose> + |Tom>
  foo |Fred> #=> foo |_self>
  
  dump
  display
  q

2015-01-18
  load fred-sam-friends.sw
  dump
  h
  freq
  dump
  age |Fred> => |33>
  freq
  q

2015-01-18
  foo |Fred> #=> fish |x>
  dump
  age |Fred> => |27>
  dump
  clone(|Fred>,|Sam> + |Maz>)
  dump
  q

2015-01-18
  load fred-sam-friends.sw
  dump
  freq
  display
  load names.sw
  
  
  relevant-kets[names]
  find-topic[names] |fred>
  find-topic[names] |sam>
  reset
  dump
  files
  load improved-geonames-au.sw
  id |Adelaide>
  population id |Adelaide>
  id |Clare>
  is |Clare Valley>
  id |Clare Valley>
  population id |Clare Valley>
  dump id |Clare Valley>
  display id |Clare>
  display id |St Peters>
  display id |Penwortham>
  -- wow. This is cool!!!
  q

2015-01-19
  files
  load moby-thesaurus.sw
  synonym |word: sloth>
  synonym |word: mumble>
  synonym |word: hungry>
  synonym |word: sleepy>
  synonoym |word: furious>
  synonym |word: anger>
  common[synonym] (|word: sleepy> + |word: sloth>)
  synonym |word: sloth>
  synonym |word: stupor>
  common[synonym] (|word: sloth> + |word: stupor>)
  synonym |word: hack>
  common[synonym] (|word: sloth> + |word: stupor>)
  pick-elt common[synonym] (|word: sloth> + |word: stupor>)
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  history
  q

2015-01-19
  load improved-geonames-cities-1000.sw
  display id |Adelaide>
  display id |New York City>
  display id |Sydney>
  display id |Melbourne>
  display id |Canberra>
  display id |London>
  dispaly id |Hackney>
  display id |Hackney>
  display id |Perth>
  population id |Perth>
  population id |Adelaide>
  population id |Sydney>
  pop-float population id |Sydney>
  id 
  
  id |New-Castle>
  id |New Castle>
  dump id |New Castle>
  display id |New Castle>
  display id |Brisbane>
  display id |Berlin>
  
  population id |Berlin>
  q

2015-01-22
  height |everest> => |km: 8>
  -- height of action man is 4 times that of everest
  hieght |action man> => push-float 4 pop-float height |everest>
  dump
  -- height of some mountain is 1/3 that of everest
  height |some mountain> => push-float 0.333333 pop-float height |everest>
  dump
  -- just check the maths:
  3 pop-float height |some moutain>
  3 pop-float |some mountain>
  3 pop-float height |some mountain>
  dump
  display
  history
  -- so, this idea of "push-float number pop-float op |x>" is probably going to be useful!
  history
  q

2015-01-22
  op1 |x> => |fish>
  op2 |x> => |cats>
  op3 |x> => |soup>
  dump
  count supported-ops |x>
  how-man supported-ops |x>
  how-many supported-ops |x>
  dump
  load geonames-cities-15000.sw
  files
  load improved-geonames-cities-15000.sw
  id |Mexico City>
  display id |Mexico City>
  dump exact id |Mexico City>
  dump |Mexico City>
  dump id |Mexico City>
  pop-float longitude id |Mexico City>
  q

2015-01-24
  to-km |miles: 1>
  arithmetic(|miles: 7>,|+>,|km: 2>)
  arithmetic(to-km |miles: 7>,|+>,|km: 2>)
  to-miles |km: 3>
  to-mile |km: 3>
  to-mile arithmetic(to-km |miles: 7>,|+>,|km: 2>)
  value |price: 3.50>
  value |x: y>
  value |x>
  value |x: y: z: 3.1415>
  value |2.71>
  extract-category |a>
  extract-category |a: b>
  extract-category |a: b: c>
  extract-value |a>
  extract-value |a: b>
  extract-value |a: b: c>
  to-value |>
  to-value |19> 
  to-value |age: 23>
  pop-float |age: 23>
  pop-float |19>
  to-value |string>
  pop-float |string>
  to-value |a: b: c: 13>
  pop-float to-value |a: b: c: 13>
  to-category 57| >
  to-category |age>
  to-category 23|age>
  push-float 57| >
  push-float |age>
  push-float 23 |age>
  to-value 3|5>
  pop-float 3|5>
  push-float |x>
  push-float 3|x>
  push-float 3| >
  push-float 3.2|x: y>
  range(|x: 3>,|x: 10>)
  range(|2>,|15>)
  range(|3>,|11>,|2>)
  range(|x: 3>,|x: 11>,|2>)
  range(|x: 3>,|x: 13>,|x: 2>)
  range(|3>,|10>,|0.3>)
  range(|5>,|11>)
  range(|a: 2>,|b: 5>)
  range(|a: b: 2>,|b: 5>)
  range(|x: 1>,|x: 6>)
  range(|5>,|11>,|2>)
  range(|5>,|7>,|0.25>)
  range(|5>,|8>,|-1>)
  range(|8>,|5>,|-1>)
  value |a: b: 7>
  arithmetic(|a: 5>,|+>,|b: 3>)
  arithmetic(to-km |miles: 5>,|+>,|km: 3>)
  q

2015-01-24
  value |a: b: c>
  value |a: b: 7.2>
  value (|x: 3> + |x: 5>)
  to-number 3|x>
  to-number |number: 7.2>
  to-number 2|number: 3>
  to-number 8|a: b>
  to-number 8|number: text>
  to-number |3.7>
  to-number 3|5>
  
  to-number 3|9>
  to-number |number: 3.1415>
  to-number 8|number: 3>
  to-number |number: not-a-float>
  to-number |a: b>
  to-number 27|a: b: c: d: e>
  algebra(13|x> + 17| >,|*>,19|y> + 2|z> + 5| >)
  algebra(13|x> + |17>,|*>,19|y> + 2|z> + |5>)
  algebra(|a> + |b>,|^>,|4>)
  algebra(|a> + |b>,|^>,|6>)
  to-number 17|1>
  intersection(|a> + |c> + |d>,|a> + |b> + |c> + |d> + |e>)
  union(|a> + |c> + |d>,|a> + |b> + |c> + |d> + |e>)
  union(3|a>,7|a>)
  intersection(3|a>,7|a>)
  union(2|a> + 0.3|b> + 0|c> + 13|d> + 0.9|e>,|a> + 11|b> + 23|c> + 0.5|d> + 7|e>)
  intersection(2|a> + 0.3|b> + 0|c> + 13|d> + 0.9|e>,|a> + 11|b> + 23|c> + 0.5|d> + 7|e>)
  mulitply(2|a> + 3|b> + 5|c>,7|a> + 5|b> + 0|c> + 9|d>)
  multiply(2|a> + 3|b> + 5|c>,7|a> + 5|b> + 0|c> + 9|d>)
  addition(2|a> + 3|b> + 5|c>,7|a> + 5|b> + 0|c> + 9|d>)
  load early-us-presidents.sw
  dump
  create inverse
  train-of-thought[7] |Madison>
  .
  .
  .
  .
  history
  train-of-thought[13] |Madison>
  spell |frog>
  spell |word: frog>
  spell |word: letter>
  read |text: I don't know about that>
  algebra(|a>,|^>,|-1>)
  spell |word: happy>
  read |text: I don't know about that!>
  is-prime |2>
  is-prime |3>
  is-prime |number: 2>
  is-prime |number: 3>
  is-prime |number: 7>
  is-prime |number: 21>
  factor |number: 210>
  is-prime |blah>
  factor |number: 398714527>
  factor |number: 987298762329>
  factor |number: 1984719861987419854>
  factor |30>
  is-prime |number: 90214539181246357>
  factor |blah>
  is-prime |blah>
  q

2015-01-24
  is-prime |blah>
  do-you-know is-prime |blah>
  factor (|number: 30> + |number: 87>)
  q

2015-01-24
  factor |number: 30>
  factor |number: 87>
  factor (|number: 30> + |number: 87>)
  strange-int-prime |number: 8>
  strange-int |number: 8>
  strange-int-list |number: 8>
  strange-int-list |number: 19871097>
  strange-int-depth |number: 19871097>
  strange-int-depth |number: 8>
  strange-int-list |number: 8>
  strange-int^2 |number: 8>
  -- strange-ints are weirdly fun.
  q

2015-01-24
  apply-value |a: b: 3.3>
  apply-value |a: b: c>
  value |a: b: 3.3>
  to-base(|3571113>,|2>)
  to-base(|350024>,|2>)
  to-base(|350024>,|8>)
  to-base(|350024>,|10>)
  F |C: 0>
  F |C: 100>
  F |K: 0>
  C |K: 0>
  C |F: 0>
  C |F: 100>
  K |C: 18>
  K |C: 0>
  K |F: 100>
  to-km |miles: 1>
  to-meter |miles: 7>
  to-meter |km: 5.213>
  to-miles |km: 42>
  to-miles |m: 800>
  read-letters (|f> + |r> + |o> + |g>)
  spell |word: frog>
  read-letters spell |word: frog>
  read-letters spell |word: letter>
  spell |word: letter>
  read-letters (|letter: l> + 2.000|letter: e> + 2.000|letter: t> + |letter: r>)
  read-words read |text: I don't know about that!>
  to-meter |blah: 37>
  do-you-know to-meter |blah: 37>
  merge-labels(|a> + |b> + |c> + |d> + |e>)
  q

2015-01-24
  list-to-words split |a b c d e>
  list-to-words |x>
  list-to-words (|x> + |y>)
  list-to-words (|x> + |y> + |z>)
  list-to-words (|x> + |y> + |z> + |u> + |v>)
  friends |person: Eric> => |person: Fred> + |person: Sam> + |person: Harry> + |person: Mary> + |person: liz>
  list-to-words extract-value friends |person: Eric>
  q

2015-01-24
  day-of-the-week |date: 2015/01/24>
  split |a b c d e>
  split |word1 word2 word3 word4>
  |op list> => |op: mother> + |op: father> + |op: dob> + |op: age>
  
  dump
  basic-info |*> #=> apply("" |op list>,|_self>)
  
  dump
  age |Fred> => |age: 21>
  father |Fred> => |John>
  dump
  basic-info |Fred>
  do-you-know mother |Fred>
  dump
  basic-info |Fred>
  cat-depth |>
  cat-depth |x>
  cat-depth |a: b>
  cat-depth |a: b: c>
  q

2015-01-24
  cat-depth |>
  cat-depth |a>
  cat-depth |a: b>
  cat-depth |a: b: c>
  cat-depth |a: b: c: d: e>
  cat-depth |a: b: c: d: e: f: g>
  expand-hierarchy |a: b: c: d: e>
  intersection(expand-hierarchy |a: b: c: d: e: f>, expand-hierarchy |a: b: c: x: y>)
  friends |Fred> => |Sam> + |Liz>
  friends |Rob> => |Jack> + |Tom>
  age |Fred> => |22>
  dump
  history
  relevant-kets[friends]
  relevant-kets[age]
  do-you-know is-prime |number: 32>
  op |a> => |a> + 2|b> + 3|c>
  op |b> => 0.5|b> + 9 |c> + 5|e>
  op |c> => 7|e> + 2|b>
  matrix[op]
  dump
  matrix[op]
  q

2015-01-25
  height |everest> => |km: 8>
  height |action man> => push-float 4 pop-float height |everest>
  dump
  height |some mountain> => push-float 0.3333 pop-float height |everest>
  dump
  q

2015-01-25
  -- cyc: http://en.wikipedia.org/wiki/Cyc
  is-a |Bill Clinton> => |United States President>
  is-a |Richard Nixon> => |United States President>
  is-a |George Bush> => |United States President>
  dump
  create inverse
  inverse-is-a |United States President>
  capital-city |France> => |Paris>
  dump
  display
  -- "the knowledge base is divided into microtheories, collections of concepts and facts typically pertaining to one particular realm of knowledge"
  -- "Unlike the knowledge base as a whole, each microtheory is required to be free from contradictions"
  -- so in BKO, a micro-theory is close to my idea of "context"
  do-die |plant> => |yes>
  do-die |plant: *> => |yes>
  do-die |plant: tree: maple>
  -- "who was the forty-second president of the U.S.A.?"
  forty-second |US President> => |William Jefferson Clinton>
  dump
  works-at |daniel.brickley@bristol.ac.uk> => |http://ilrt.org/>
  based-in |http://ilrt.org/> => |Bristol>
  dump
  based-in works-at |daniel.brickley@bristol.ac.uk>
  -- see here: https://web.archive.org/web/20140331104046/http://www.foaf-project.org/original-intro
  |med org: list> => |med org 1> + |med org 2>
  employees |med org 1> => |person 1>
  employees |med org 2> => |person 2>
  dump
  employees "" |med org: list>
  web-recommendation |person 1> => |url: a> + |url: b>
  web-recommendation |person 2> => |url: p> + |url: q> + |url: r>
  dump
  web-recommendation employees "" |med org: list>
  co-authored-with |me> => |Rob> + |Jack> + |Frank>
  recent-publications |Rob> => |paper: a> + |paper: b>
  
  recent-publications |Jack> => |paper: j>
  
  recent-publications |Frank> => |paper: s> + |paper: t> + |paper: x> + |paper: y> + |paper: z>
  dump
  recent-publications co-authored-with |me>
  list-of-critiques |this web page> => |critique 1> + |critique 2>
  author |critique 1> => |Liz>
  
  author |critique 2> => |Ron>
  homepage |Liz> => |url: http://liz.org>
  
  homepage |Ron> => |url: http://ron.org> 
  
  dump
  homepage author list-of-critiques |this web page>
  works-at |daniel.brickley@bristol.ac.uk> => |http://ilrt.org/>
  based-in |http://ilrt.org/> => |Bristol>
  dump
  based-in works-at |daniel.brickley@bristol.ac.uk>
  list-to-words recent-publications people-co-authored-with |me>
  list-to-words recent-publications people-co-authored-with |me>
  dump
  people-co-authored-with |me> => |Rob> + |Jack> + |Frank>
  history
  list-to-words recent-publications people-co-authored-with |me>
  dump
  save just-some-workings-on-foaf-examples.sw
  history
  list-to-words recent-publications people-co-authored-with |me>
  [A
  q

2015-01-25
  is-mortal |human> => |yes>
  is-a |Socrates> => |human>
  is-mortal is-a |Socrates>
  factor |number: 987298762329>
  strange-int |number: 987298762329>
  pop-float factor |number: 987298762329>
  push-float pop-float factor |number: 987298762329>
  |r> => pop-float factor |number: 987298762329>
  "" |r>
  strange-int |number: 987298762329>
  push-float "" |r>
  history
  strange-int |number: 987298762329>
  pop-float factor |number: 987298762329>
  push-float pop-float factor |number: 987298762329>
  factor |number: 987298762329>
  -- why that doesn't work as expected, is deep in the bowels of the code. I don't fully understand yet!!
  q

2015-01-27
  |r> => spell |word: letter>
  dump
  read-letters "" |r>
  history
  -- is an adult
  -- if we had the code: is-adult |person: *> #=> age|_self> >= |age: 18>
  -- now, indirectly
  is-adult |person: *> #=> do-you-know drop-below[18] pop-float age|_self>
  age |person: Sam> => |age: 18>
  age |person: Fred> => |age: 17>
  age |person: Liz> => |age: 19>
  dump
  age |person: Sam>
  pop-float age |person: Sam>
  drop-below[18] pop-float age |person: Sam>
  drop-below[18] pop-float age |person: Fred>
  dump
  is-adult |person: Sam>
  is-adult |person: Fred>
  is-adult |person: Liz>
  -- reading here: http://savas.me/2012/01/knowledge-representation-and-reasoning-in-2012/
  dump
  is-teenager |person: *> #=> do-you-know drop-below[13] drop-above[19] pop-float age |_self>
  is-teenager |person: Sam>
  is-teenager |person: Fred>
  is-teenager |person: Liz>
  dump
  age |person: Emma> => |age: 12>
  age |person: Jack> => |age: 20>
  is-teenager |person: Emma>
  is-teenager |person: Jack>
  dump
  has-a-female-mother |person: *> => |yes>
  has-a-female-mother |person: Emma>
  dump
  history
  history 50
  dump
  is-teenager |person: Emma>
  is-adult |person: Emma>
  is-teenager |person: Fred>
  is-adult |person: Fred>
  is-teenager |person: Sam>
  is-adult |person: Sam>
  is-teenager |person: Liz>
  is-adult |person: Liz>
  is-teenager |person: Jack>
  is-adult |person: Jack>
  q

2015-01-27
  q

2015-01-29
  is-teenager |*> #=> do-you-know drop-below[13] drop-above[19] pop-float age |_self>
  dump
  age |Emma> => |12>
  age |person: Fred> => |17>
  dump
  is-teenager |Emma>
  pop-float age |Emma>
  is-teenager |person: Fred>
  dump
  [6~[6~q
  [A
  
  q

2015-01-29
  table[C,F,K] range(|C: 0>,|C: 10>)
  table[a,b] split |x y z>
  table[] split |x y z>
  q

2015-01-29
  table[a,b,c] split |a bb ccc frog soups>
  [A
  table[,b] split |a bbb xx z>
  q

2015-01-29
  [A
  table[,b] split |a bbb xx z>
  table[ ,b] split |a b c>
  table[a b,c] split |a b ccccc>
  table[a,b,c] split |x y z>
  fish |x>
  q

2015-01-29
   table[C,F] (|C: 0> + |C: 5>)
  Ft |*> #=> F |_self>
  table[C,Ft] (|C: 0> + |C: 5>)
  dump
  table[C,Ft] |>
  history
  q

2015-01-29
  Ft |*> #=> F |_self>
  table[C,Ft] (|C: 0> + |C: 5>)
  history
  q

2015-01-29
  Ft |*> #=> F |_self>
  table[C,Ft] (|C: 0> + |C: 5>)
  history
  table[C,Ft] range(|C: 0>,|C: 10>,|1>)
  history
  table[C,Ft] range(|C: 0>,|C: 5>,|1>)
  history
  q

2015-01-29
  Ft |*> #=> F |_self>
  
  table[C,Ft] range(|C: 0>,|C: 5>,|1>)
  history
  table[C,Ft] (|C: 0> + |C: 5>)
  history
  q

2015-01-29
  Ft |*> #=> F |_self>
  table[C,Ft] (|C: 0> + |C: 5>)
  q

2015-01-29
  Ft |*> #=> F |_self>
  table[C,Ft] (|C: 0> + |C: 5>)
  q

2015-01-29
  Ft |*> #=> F |_self>
  table[C,Ft] (|C: 0> + |C: 5>)
  q

2015-01-29
  table[C,F] split |a b c>
  q

2015-01-29
  table[C,F] split |a b c d>
  q

2015-01-29
  table[C,F] split |a b c d>
  q

2015-01-29
  table[C,F] split |a b c d e f>
  q

2015-01-29
  table[C,F] split |a b c d e>
  q

2015-01-29
  table[C,F] split |a b c d e>
  
  
  Ft |*> #=> F |_self>
  table[C,Ft] range(|C: 0>,|C: 100>,|5>)
  Kt |*> #=> K |_self>
  table[C,Ft,Kt] range(|C: 0>,|C: 100>,|5>)
  history
  q

2015-01-29
  F |*> #=> F |_self>
  dump
  table[C,F] (|C: 0> + |C: 100>)
  K |*> #=> K |_self>
  table[C,F,k] range(|C: 0>,|C: 100>,|1>)
  dump
  history
  table[C,F,K] range(|C: 0>,|C: 100>,|5>)
  mother |Fred> => |Jane>
  father |Fred> => |Robert>
  age |Fred> => |age: 21>
  height |Fred> => |cm: 179>
  mother |Sam> => |Betty>
  father |Sam> => |Tom>
  age |Sam> => |age: 27>
  height |Sam> => |cm: 183>
  dump
  table[mother,father,age,height] (|Fred> + |Sam>)
  table[name,mother,father,age,height] split |Fred Sam>
  table[fish,cats] |>
  load early-us-presidents.sw
  dump
  table[name,president-number,party] split |Washington Adams Jefferson Madison Monroe>
  dump
  history
  table[name,full-name,president-number,party] "" |early US Presidents: _list>
  dump
  context
  context sw console
  table[C,F,K] range(|C: 0>,|C: 50>,|10>)
  history
  dump
  table[C,F,K] range(|C: 0>,|C: 100>,|10>)
  history
  dump
  mother |Nicole> => |Bev>
  height |Nicole> => |cm: 168>
  dump
  table[name,mother,fater,age,height] (|Fred> + |Sam> + |Nicole>)
  dump
  history
  q

2015-01-29
  mother |Fred> => |Jane>
  father |Fred> => |Robert>
  age |Fred> => |age: 21>
  height |Fred> => |cm: 179>
  
  mother |Sam> => |Betty>
  father |Sam> => |Tom>
  age |Sam> => |age: 27>
  height |Sam> => |cm: 183>
  
  mother |Nicole> => |Bev>
  height |Nicole> => |cm: 168>
  
  dump
  table[name,mother,fater,age,height] (|Fred> + |Sam> + |Nicole>)
  table[name,mother,father,age,height] (|Fred> + |Nicole> + |Sam>)
  dump
  history
  context
  load early-us-presidents.sw
  dump
  history
  dump
  table[name,full-name,president-number,party] "" |early US Presidents: _list>
  table[name,president-era] "" |early US Presidents: _list>
  context
  context sw console
  
  age |person: Emma> => |age: 12>
  age |person: Fred> => |age: 17>
  age |person: Sam> => |age: 18>
  age |person: Liz> => |age: 19>
  age |person: Jack> => |age: 20>
  dump
  is-teenager |person: *> #=> do-you-know drop-below[13] drop-above[19] pop-float age |_self>
  is-adult |person: *> #=> do-you-know drop-below[18] pop-float age|_self>
  
  dump
  |list> => |person: Emma> + |person: Fred> + |person: Sam> + |person: Liz> + |person: Jack>
  table[name,is-teenager,is-adult] "" |list>
  dump
  history
  table[name,is-teenager,is-adult] "" |list>
  
  table[name,age,is-teenager,is-adult] "" |list>
  table[name] "" |list>
  load simple-network.sw
  dump
  matrix[O]
  relevant-kets[O]
  table[pos,O] relevant-kets[O]
  O2 |*> #=> O^2 |_self>
  O3 |*> #=> O^3 |_self>
  O4 |*> #=> O^4 |_self>
  O5 |*> #=> O^5 |_self>
  table[position,O,O2,O3,O4,O5] relevant-kets[O]
  dump
  history
  table[position,O,O2,O3,O4,O5] relevant-kets[O]
  context
  context pretty-print-table-cities-example.sw
  |city list> => |Adelaide> + |Brisbane> + |Darwin> + |Hobart> + |Melbourne> + |Perth> + |Sydney>
  area |Adelaide> => |1295>
  area |Brisbane> => |5905>
  area |Darwin> => |112>
  area |Hobart> => |1357>
  area |Melbourne> => |1566>
  area |Perth> => |5386>
  area |Sydney> => |2058>
  population |Adelaide> => |1158259>
  population |Brisbane> => |1857594>
  population |Darwin> => |120900>
  population |Hobart> = |205556>
  population |Hobart> => |205556>
  population |Melbourne> => |3806092>
  population |Perth> => |1554769>
  population |Sydney> => |4336374>
  annual-rainfall |Adelaide> => |mm: 600.5>
  annual-rainfall |Brisbane> => |mm: 1146.4>
  annual-rainfall |Darwin> => |mm: 1714.7>
  annual-rainfall |Hobar> => |mm: 619.5>
  annual-rainfall |Hobart> => |mm: 619.5>
  annual-rainfall |Melbourne> => |mm: 646.9>
  annual-rainfall |Perth> => |mm: 869.4>
  annual-rainfall |Sydney> => |mm: 1214.8>
  dump
  table[city-name,area,population,annual-rainfall] "" |city list>
  dump
  context pretty print table of Australian cities
   |city list> => |Adelaide> + |Brisbane> + |Darwin> + |Hobart> + |Melbourne> + |Perth> + |Sydney>
  
  area |Adelaide> => |1295>
  population |Adelaide> => |1158259>
  annual-rainfall |Adelaide> => |mm: 600.5>
  
  area |Brisbane> => |5905>
  population |Brisbane> => |1857594>
  annual-rainfall |Brisbane> => |mm: 1146.4>
  
  area |Darwin> => |112>
  population |Darwin> => |120900>
  annual-rainfall |Darwin> => |mm: 1714.7>
  
  area |Hobart> => |1357>
  population |Hobart> => |205556>
  annual-rainfall |Hobart> => |mm: 619.5>
  
  area |Melbourne> => |1566>
  population |Melbourne> => |3806092>
  annual-rainfall |Melbourne> => |mm: 646.9>
  
  area |Perth> => |5386>
  population |Perth> => |1554769>
  annual-rainfall |Perth> => |mm: 869.4>
  
  area |Sydney> => |2058>
  population |Sydney> => |4336374>
  annual-rainfall |Sydney> => |mm: 1214.8>
  
  annual-rainfall |Hobar> => |mm: 619.5>
  
  dump
  save pretty-print-table-of-australian-cities.sw
  dump
  history
  q

2015-01-29
  load pretty-print-table-of-australian-cities.sw
  dump
  history
  dump
  table[city-name,area,population,annual-rainfall] "" |city list>
  q

2015-01-29
  foo |x> => 3|fish> + 2|cats> + |dog>
  table[ket,foo] |x>
  bah |x> => list-to-words foo |x>
  table[ket,foo,bah] |x>
  where-live |Dan> => |UK: Bristol: Zetland road>
  lives-with |Dan> => |Libby> + |Craig>
  email |Dan> => |email: danbri@w3.org>
  works-for |Dan> => |organisation: ILRT>
  
  email |Libby> => |email: libby.miller@bris.ac.uk>
  works-for |Libby> => |organisation: ILRT>
  
  email |Craig> => |email: craig@netgates.co.uk>
  works-for |Craig> => |organisation: Netgates>
  wife |Craig> => |Liz>
  
  where-live |Liz> => |UK: Bristol>
  lives-with |Liz> => |Kathleen>
  works-for |Liz> => |organisation: Netgates>
  
  works-for |Kathleen> => |organisation: Netgates>
  
  website |organisation: ILRT> => |url: http://ilrt.org/>
  
  website |organisation: Netgates> => |url: http://www.netgates.co.uk/>
  
  where-live |Damian> => |UK: London>
  
  knows-quite-well |Martin> => |Craig> + |Damian> + |Dan> + |Libby>
  where-lives |Martin> => |UK: Bristol>
  email |Martin> => |email: m.l.poulter@bristol.ac.uk>
  dump
  |list> => |Dan> + |Libby> + |Craig> + |Liz> + |Kathleen> + |Damian> + |Martin> + |organisation: ILRT> + |organisation: Netgates>
  dump
  table[name,where-live,lives-with,email,works-for,wife,website,knows-quite-well] "" |list>
  table[name,where-live,lives-with,email,works-for,website] "" |list>
  strange-int-list |number: 8>
  to-number strange-int-list |number: 8>
  strange-int-list |*> #=> strange-int-list |_self>
  is-prime |*> #=> is-prime |_self>
  table[number,is-prime,strange-int-list] range(|number: 1>,|number: 40>)
  history
  table[number,is-prime,strange-int-list] range(|number: 1>,|number: 100>)
  dump
  
  history
  table[number,is-prime,strange-int-list] range(|number: 1>,|number: 300>)
  history
  table[name,where-live,lives-with,email,works-for,website] "" |list>
  dump
  |people list> => |Dan> + |Libby> + |Craig> + |Liz> + |Kathleen> + |Damian> + |Martin>
  table[name,wife,where-live,lives-with,knows-quite-well] "" |people list>
  history
  table[number,is-prime,strange-int-list] range(|number: 1>,|number: 1000>)
  history
  table[number,is-prime,strange-int-list] range(|number: 1>,|number: 10000>)
  history
  q

2015-01-29
  q

2015-01-29
  is-prime |*> #=> is-prime |_self>
  strange-in-list |*> #= strange-int-list |_self>
  strange-int-list |*> #=> strange-int-list |_self>
  dump
  table[number,is-prime,strange-in-list] range(|number: 1>,|number: 100>)
  dump
  history
  table[number,is-prime,strange-int-list] range(|number: 1>,|number: 10000>)
  history
  sil-count |*> #=> count strange-int-list |_self>
  table[number,is-prime,strange-int-list,sil-count] range(|number: 1>,|number: 20>)
  to-number |number: 3>
  sil-count |*> #=> to-number count strange-int-list |_self>
  table[number,is-prime,strange-int-list,sil-count] range(|number: 1>,|number: 20>)
  history
  table[number,is-prime,strange-int-list,sil-count] range(|number: 1>,|number: 10000>)
  strange-int-list |number: 9974>
  extract-value strange-in-list |number: 9974>
  extract-value strange-int-list |number: 9974>
  history
  q

2015-02-01
  is-prime |*> #=> is-prime |_self>
  strange-int-list |*> #=> extract-value strange-int-list |_self>
  sil-count |*> #=> extract-value count strange-int-list |_self>
  dump
  table[name,is-prime,strange-int-list,sil-count] range(|number: 1>,|number: 20>)
  history
  table[name,is-prime,strange-int-list,sil-count] range(|number: 1>,|number: 20000>)
  history
  table[name,is-prime] |number: 13>
  q

2015-02-01
    is-prime |*> #=> is-prime |_self>
    strange-int-list |*> #=> extract-value strange-int-list |_self>
    sil-count |*> #=> extract-value count strange-int-list |_self>
  
  dump
  table[name,is-prime,strange-int-list] range(|number: 0>,|number: 50>)
  history
  extract-value |mm: 600>
  q

2015-02-01
  load pretty-print-table-of-australian-cities.sw
  dump
  sort-by[population] "" |city list>
  history
  q

2015-02-01
  load pretty-print-table-of-australian-cities.sw
  
  dump
  sort-by[population] "" |city list>
  table[city-name,area,population,annual-rainfall] sort-by[population] "" |city list>
  history
  table[city-name,area,population,annual-rainfall] sort-by[annual-rainfall] "" |city list>
  table[city-name,area,population,annual-rainfall] sort-by[population] "" |city list>
  table[city-name,area,population,annual-rainfall] sort-by[area] "" [3;2~|city list>
  history
  table[city-name,area,population,annual-rainfall] sort-by[annual-rainfall] "" |city list>
  extract-value annual-rainfall |Adelaide>
  history
  q

2015-02-01
  load pretty-print-table-of-australian-cities.sw
  dump
  table[city-name,area,population,annual-rainfall] sort-by[annual-rainfall] "" |city list>
  history
  table[city-name,area,population,annual-rainfall] reverse sort-by[annual-rainfall] "" |city list>
  history
  table[city-name,area,population,annual-rainfall] ket-sort sort-by[population] "" |city list>
  context
  load early-us-presidents.sw
  dump
  years-in-office |*> #=> extract-value president-era |_self>
  table[name,years-in-office] "" |early US Presidents: _list>
  history
  [5~context
  
  context
  context pretty print table of Australian cities
  area-self |Adelaide> => 1295|Adelaide>
  population-self |Adelaide> => 1158259|Adelaide>
  annual-rainfall |Adelaide> => 600.5|Adelaide>
  
  area-self |Brisbane> => 5905|Brisbane>
  population-self |Brisbane> => 1857594|Brisbane>
  annual-rainfall-self |Brisbane> => 1146.4|Brisbane>
  
  area-self |Darwin> => 112|Darwin>
  population-self |Darwin> => 120900|Darwin>
  annual-rainfall-self |Darwin> => 1714.7|Darwin>
  
  area-self |Hobart> => 1357|Hobart>
  population-self |Hobart> => 205556|Hobart>
  annual-rainfall-self |Hobart> => 619.5|Hobart>
  
  area-self |Melbourne> => 1566|Melbourne>
  population-self |Melbourne> => 3806092|Melbourne>
  annual-rainfall-self |Melbourne> => 646.9|Melbourne>
  
  area-self |Perth> => 5386|Perth>
  population-self |Perth> => 1554769|Perth>
  annual-rainfall-self |Perth> => 869.4|Perth>
  
  area-self |Sydney> => 2058|Sydney>
  population-self |Sydney> => 4336374|Sydney>
  annual-rainfall-self |Sydney> => 1214.8|Sydney>
  dump
  annual-rainfall |Adelaide> => 600.5|Adelaide>
  dump
  q

2015-02-01
  is-late |time: 24h: *> #=> do-you-know drop-below[1030] drop-above[330] pop-float |_self>
  is-late |time: 24h: 1100>
  is-late |time: 24h: 900>
  do-you-know drop-below[1030] 1100|x>
  do-you-know drop-below[1030] 900|x>
  do-you-know drop-above[330] 7|x>
  do-you-know drop-above[330] 700|x>
  is-late |*> #=> do-you-know (drop-below[1030] pop-float |_self> + drop-above[330] pop-float |_self>)
  dump
  is-late |1100>
  is-late |930>
  is-late |300>
  is-late |630>
  dump
  is-early |*> #=> do-you-know (drop-below[330] pop-float |_self> + drop-above[700] pop-float |_self>)
  dump
  is-early |400>
  is-early |710>
  is-early |200>
  |times> => range(|100>,|2400>,|100>)
  table[times] "" |times>
  table[times,is-early,is-late] "" |times>
  dump
  is-late |*> #=> do-you-know (drop-below[2230] pop-float |_self> + drop-above[330] pop-float |_self>)
  table[times,is-early,is-late] "" |times>
  dump
  is-early |*> #=> do-you-know drop-below[330] pop-float |_self>
  table[times,is-early,is-late] "" |times>
  dump
  is-early |*> #=> do-you-know drop-above[700] pop-float |_self>
  table[times,is-early,is-late] "" |times>
  history
  is-early |*> #=> do-you-know drop-above[700] drop-below[330] pop-float |_self>
  table[times,is-early,is-late] "" |times>
  history
  |24-h times> => range(|100>,|2400>,|100>)
  dump
  table[24-h-time,is-early,is-late] "" |24-h times>
  dump
  history
  |24h times> => range(|100>,|2400>,|100>)
  dump
  history
  table[24h-time,is-early,is-late] "" |24h times>
  history
  table[24h-time,is-early,is-late] "" |24h times>
  history
  table[24h-time,is-early,is-late] "" |24h times>
  dump
  is-late |time: 24h: *> #=> do-you-know (drop-below[2230] pop-float |_self> + drop-above[330] pop-float |_self>)
  is-early |time: 24h: *> do-you-know drop-above[700] drop-below[330] pop-float |_self>
  dump
  is-early |time: 24h: *> #=> do-you-know drop-above[700] drop-below[330] pop-float |_self>
  dump
  |24h times> => range(|time: 24h: 100>,|time: 24h: 2400>,|100>)
  dump
  table[24h-time,is-early,is-late] "" |24h times>
  history
  play-is-early |*> #=> do-you-know drop in-range[330,700] pop-float |_self>
  table[time,is-early,play-is-early] "" |times>
  dump
  play-is-late |*> #=> do-you-know drop (in-range[2230,2400] pop-float |_self> + in-range[0,330] pop-float |_self>)
  dump
  table[time,is-late,play-is-late] "" |times>
  dump
  context
  range-is-early |time: 24h: *> #=> do-you-know drop in-range[330,700] pop-float |_self>
  range-is-late |time: 24h: *> #=> do-you-know drop (in-range[2230,2400] pop-float |_self> + in-range[0,330] pop-float |_self>)
  dump
  table[24h-time,is-early,range-is-early,is-late,range-is-late] "" |24h times>
  history
  age |person: Emma> => |age: 12>
  
  age |person: Fred> => |age: 17>
  
  age |person: Sam> => |age: 18>
  
  age |person: Liz> => |age: 19>
  
  age |person: Jack> => |age: 20>
  dump
  is-teenager |person: *> #=> do-you-know drop in-range[13,19] pop-float age |_self>
  talbe[name,age,is-teenager,is-adult] relevant-kets[age]
  table[name,age,is-teenager] relevant-kets[age]
  age |Mary> => |age: 13>
  table[name,age,is-teenager] relevant-kets[age]
  age |person: Mary> => |age: 13>
  table[name,age,is-teenager] relevant-kets[age]
  age |person: Rob> => |age: 18.5>
  table[name,age,is-teenager] relevant-kets[age]
  dump
  history
  [Bload early-us-presidents.sw
  dump
  load early-us-presidents.sw
  dump
  table[name,full-name] "" |early US Presidents: _list>
  table[name,full-name] sort-by[full-name] "" |early US Presidents: _list>
  history
  q

2015-02-01
  load early-us-presidents.sw
  |list> => "" |early US Presidents: _list>
  dump
  sort-by[president-number] "" |list>
  sort-by[full-name] "" |list>
  ket-sort "" |list>
  table[name,full-name] sort-by[full-name] "" |list>
  q

2015-02-01
  load pretty-print-table-of-australian-cities.sw
  history
  save pretty-print-table-of-australian-cities.sw
  dump
  q

2015-02-01
  load pretty-print-table-of-australian-cities.sw
  dump
  table[city,area,population,annual-rainfall] ket-sort "" |city list>
  table[city,area,population,annual-rainfall] sort-by[area] "" |city list>
  table[city,area,population,annual-rainfall] sort-by[population] "" |city list>
  table[city,area,population,annual-rainfall] reverse sort-by[population] "" |city list>
  table[city,area,population,annual-rainfall] sort-by[annual-rainfall] "" |city list>
  q

2015-02-01
  adj |Aldeeran> => |Aldeeran> + |Coruscant>
  adj |Bespin> => |Coruscant>
  adj |Coruscant> => |Bespin>
  adj |Deathstar> => |Deathstar> + |Bespin>
  
  dump
  adj2 |*> #=> ajd^2 |_self>
  adj3 |*> #=> adj^3 |_self>
  adj2 |*> #=> adj^2 |_self>
  adj4 |*> #=> adj^4 |_self>
  adj5 |*> 
  adj5 |*> #=> adj^5 |_self>
  dump
  adjacent-planet |*> #=> adj |_self>
  table[planet,adjacent-planet] relevant-kets[adj]
  table[planet,adj,adj2,adj3,adj4,adj5] relevant-kets[adj]
  .
  |weekday: _list> => |Monday> + |Tuesday> + |Wednesday> + |Thursday> + |Friday>
  |weekend: _list> => |Saturday> + |Sunday>
  closing-time "" |weekday: _list> => |time: 6pm>
  closing-time "" |weekend: _list> => |time: 4:30pm>
  dump
  table[day,closing-time] "" |weekday: _list> + "" |weekend: _list>
  table[day,closing-time] ("" |weekday: _list> + "" |weekend: _list>)
  
  table[planet,adj,adj2,adj3,adj4,adj5] relevant-kets[adj]
  dump
  save death-star-adjacent-planet.sw
  q

2015-02-01
  in-range[3,5).display(True] 32 |x>
  [Bin-range[3,7).display(True] 4 |x>
  
  
  in-range[3,7).display(True] 4 |x>
  q

2015-02-01
  load http://semantic-db.org/sw-examples/foaf-example-in-sw.sw
  q

2015-02-02
  load foaf-example-in-sw.sw
  dump
  table[name,email] 
  |list> => |Dan> + |Libby> + |Craig> + |Liz> + |Kathleen> + |Damian> + |Martin> + |organisation: ILRT> + |organisation: Netgates>
  
  dump
  table[name,email] "" |list>
  table[name,email] intersection("" |list>,relevant-kets[email] )
  |has-email> => relevant-kets[email]
  history
  table[name,email] intersection(""|list>,""|has-email>)
  |filtered list> => intersection(""|list>,""|has-email>)
  dump
  history
  relevant-kets[email]
  table[name,email] relevant-kets[email]
  q

2015-02-02
  load foaf-example-in-sw.sw
  dump
  q

2015-02-02
  load foaf-example-in-sw.sw
  dump
  strict-table[name,where-live,email] "" |list>
  strict-table[name,email,works-for] "" |list>
  q

2015-02-02
  algebra(|a> + |b>,|^>,|2>)
  non-Abelian-algebra(|a> + |b>,|^>,|2>)
  non-Abelian-algebra(|a> + |b>,|^>,|3>)
  dump
  load foaf-example-in-sw.sw
  dump
  table[name,where-live,email] "" |list>
  strict-table[name,where-live,email] "" |list>
  table[name,email,works-for] "" |list>
  strict-table[name,email,works-for] "" |list>
  history
  algebra(|a> + |b>,|^>,|3>)
  algebra(|a> + |b>,|^>,|2>)
  non-Abelian-algebra(|a> + |b>,|^>,|2>)
  non-Abelian-algebra(|a> + |b>,|^>,|3>)
  q

2015-02-02
  int-coeffs-to-word 3 |apple>
  q

2015-02-02
  int-coeffs-to-word 3 |apple>
  plural |apple> => |apples>
  int-coeffs-to-word 3 |apple>
  q

2015-02-02
  plural |apple> => |apples>
  int-coeffs-to-word 3 |apple>
  int-coeffs-to-word 3 |cat>
  q

2015-02-02
  int-coeffs-to-word 3 |cat>
  plural |apple> => |apples>
  int-coeffs-to-word 7 |apple>
  int-coeffs-to-word |apple>
  int-ceoffs-to-word (3|apple> + 2|pear> + |orange> + 7|lemon>)
  plural |*> #=> merge-labels(|_self> + |s>)
  int-coeffs-to-word 2 |pear>
  int-coeffs-to-word |pear>
  int-coeffs-to-word 1.3 |pear>
  int-coeffs-to-word split |frog cat>
  split 2 |a b>
  int-coeffs-to-word 7 split |frog cat>
  int-coeffs-to-word (|frog> + |cat>)
  int-coeffs-to-word (3|apple> + 2|pear>)
  int-coeffs-to-word (3|apple> + 2|pear> + |orange> + 7|lemon>)
  list-to-words split |a b c>
  list-to-words int-coeffs-to-word (3|apple> + 2|pear> + |orange> + 7|lemon>)
  int-coeffs-to-word 0 |apple>
  int-coeffs-to-word |apple>
  int-coeffs-to-word 2 |apple>
  int-coeffs-to-word 3 |apple>
  int-coeffs-to-word 1.75 |cat>
  dump
  int-coeffs-to-word (|apple> + 3|mouse> + 2|tooth> + 9|cat>)
  plural |foot> => |feet>
  plural |mouse> => |mice>
  plural |radius> => |radii>
  plural |tooth> => |teeth>
  plural |person> => |people> 
  int-coeffs-to-word (|apple> + 3|mouse> + 2|tooth> + 9|cat>)
  dump
  plural |foot> => |feet>
  plural |mouse> => |mice>
  plural |radius> => |radii>
  plural |tooth> => |teeth>
  plural |person> => |people> 
  
  dump
  plural |foot> => |feet>
  plural |mouse> => |mice>
  plural |radius> => |radii>
  plural |tooth> => |teeth>
  plural |person> => |people>
  dump
  
  
  dump
  plural |foot> => |feet>
  dump
  history
  q

2015-02-02
  plural |foot> => |feet>
  dump
  plural |*> #=> merge-labels(|_self> + |s>)
  dump
  q

2015-02-02
  plural |foot> => |feet>
  plural |mouse> => |mice>
  plural |radius> => |radii>
  plural |tooth> => |teeth>
  plural |person> => |people> 
  
  dump
  int-coeffs-to-word (|apple> + 3|mouse> + 2|tooth> + 9|cat>)
  int-coeffs-to-word (0|fish> + 2|rat>)
  dump
  foo |*> #=> |bingo>
  dump
  foo |x> => |y>
  dump
  history
  q

2015-02-02
  foo |x> => |fish>
  dump
  foo |x: *> => |fuck you!>
  dump
  foo |x: y>
  foo |x: z> => |happy>
  dump
  q

2015-02-02
  int-coeffs-to-word 0 |fish>
  
  
  plural |*> #=> merge-labels(|_self> + |s>)
  plural |foot> => |feet>
  plural |mouse> => |mice>
  plural |radius> => |radii>
  plural |tooth> => |teeth>
  plural |person> => |people> 
  
  dump
  int-coeffs-to-word 0 |tooth>
  list-to-words int-ceoffs-to-word (2|ear> + 2|eye> + |nose> + 0|tooth>)
  list-to-words int-coeffs-to-word (2|ear> + 2|eye> + |nose> + 0|tooth>)
  q

2015-02-03
  load shopping-basket.sw
  dump
  similar[basket] |f>
  context play with similar chars
  |list> => |elephant> + |ellyfant>
  chars |*> #=> chars |_self>
  dump
  map[chars] "" |list>
  dump
  similar[chars] |ellyfant>
  |actors> => |actor: Kevin (I) Bacon> + |actor: Kevin Bacon>
  history
  map[chars] "" |actors>
  dump
  100 similar[chars] |actor: Kevin Bacon>
  load foaf-example-in-sw.sw
  strict-table[name,email] "" |list>
  q

2015-02-03
  load africa.sw
  dump
  table[country,capital-city] relevant-kets[capital-city]
  |Africa: country: list> => relevant-kets[capital-city]
  dump
  history
  op |> => |fish>
  dump
  
  |list> => relevant-kets[capital-city] |x>
  dump
  |Africa: country: list> => relevant-kets[capital-city] |>
  dump
  history
  reset
  load africa.sw
  dump
  create inverse
  relevant-kets[inverse-capital-city]
  |Africa: capital-cities: list> => ket-sort relevant-kets[inverse-capital-city] |>
  |Africa: country: list> => ket-sort relevant-kets[capital-city] |>
  dump
  history
  reset
  load africa.sw
  dump
  reset
  load africa.sw
  dump
  
  history
  table[country,capital-city] relevant-kets[capital-city]
  reset
  load africa.sw
  dump
  
  table[country,capital-city] relevant-kets[capital-city]
  reset
  load africa.sw
  table[name,capital-city,population] "" |Africa: country: list>
  count relevant-kets[capital-city]
  count relevant-kets[population]
  q

2015-02-03
  load africa.sw
  dump
  table[name,capital-city,population] "" |Africa: country: list>
  history
  
  q

2015-02-03
  load africa.sw
  table[name,capital-city,population] "" |Africa: country: list>
  capital-city |country: Egypt>
  capital-city |country: Niger>
  capital-city |country: Botswana>
  table[name,population] sort-by[population] "" |Africa: country: list>
  history
  [B[Bq
  [A
  
  q

2015-02-03
  load africa.sw
  dump
  table[name,population] sort-by[population] "" |Africa: country: list>
  q

2015-02-03
  load africa.sw
  q

2015-02-03
  load early-us-presidents.sw
  dump
  table[name,full-name] sort-by[full-name] "" |early US Presidents: _list>
  table[name,president-number] shuffle "" |early US Presidents: _list>
  table[name,president-number] sort-by[president-number] "" |early US Presidents: _list>
  load africa.sw
  table[name,population] sort-by[population] "" |Africa: country: list>
  dump
  history
  table[name,population] "" |Africa: country: list>
  context
  context early US Presidents
  table[name,full-name] sort-by[full-name] "" |early US Presidents: _list>
  table[name,president-number] sort-by[president-number] "" |early US Presidents: _list>
  table[name,president-number] sort-by[president-number] shuffle "" |early US Presidents: _list>
  q

2015-02-03
  load early-us-presidents.sw
  table[name,full-name] sort-by[full-name] "" |early US Presidents: _list>
  table[name,president-number] sort-by[president-number] shuffle "" |early US Presidents: _list>
  load africa.sw
  table[name,population] "" |Africa: country: list>
  history
  table[name,population] sort-by[population] "" |Africa: country: list>
  matrix[population]
  .
  .
  .
  q

2015-02-03
  load africa.sw
  |list> => "" |Africa: country: list>
  table[name,population] "" |list>
  table[name,population] sort-by[population] "" |list>
  load early-us-presidents.sw
  table[name,full-name] sort-by[full-name] "" |early US Presidents: _list>
  |list> => "" |early US Presidents: _list>
  table[name,president-number] sort-by[president-number] shuffle "" |list>
  load pretty-print-table-of-australian-cities.sw
  table[city,area,population,annual-rainfall] reverse sort-by[population] "" |city list>
  history
  table[city,area,population,annual-rainfall] sort-by[annual-rainfall] "" |city list>
  context
  context Africa
  strict-table[country,population] "" |list>
  history
  strict-table[country,population] sort-by[population] "" |list>
  q

2015-02-03
  |x> => sleep[10] |y>
  q

2015-02-04
  sleep[0.7]
  sleep[5.7]
  sleep[6]
  q

2015-02-04
  load improved-geonames-cities-15000.sw
  display id |Adelaide>
  dump id |Adelaide>
  dump |list>
  |list> => relevant-kets[population-self] |>
  count "" |list>
  dump id |Adelaide>
  -- cities with more than 2 million habitants
  |result> => coeff-sort drop-below[2000000] population-self "" |list>
  [Bhistory
  
  history
  count "" |result>
  dump id |Adelaide>
  table[id,name,population] clean "" |result>
  
  
  history
  display id |Sydney>
  
  
  history
  table[id,name,population] select[1,20] clean "" |result>
  history
  count "" |result>
  
  population-n |*> #=> extract-value population |_self>
  table[id,name,population-n] select[1,50] clean "" |result>
  history
  q

2015-02-04
  -- load up geonames data for all cities with population >= 15000
  load improved-geonames-cities-15000.sw
  -- restict to cities with population >= 2,000,000
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  history
  population-comma |*> #=> to-comma-number extract-value population |_self>
  -- how many results
  how-many "" |result>
  -- print table
  table[id,name,population-comma] clean "" |result>
  history
  table[id,name,population-comma] select[1,50] clean "" |result>
  history
  save history

2015-02-04
  like |*> #=> 0.9 |_self>
  exactly-like |*> #=> |_self>
  a-little-like |*> #=> 0.3 |_self>
  
  dump
  -- mandarin's taste like oranges
  taste |mandarin> #=> like taste |orange>
  dump
  taste |orange> => |citrus> + |sweet> + |juicy>
  -- now ask taste of mandarin:
  taste |mandarin>
  -- we could do with a better definition of "taste orange", but proof of concept is there.
  dump
  nothing-like |*> #=> 0 |_self>
  nothing-like taste |orange>
  dump
  taste |banana> #=> nothing-like taste |orange>
  taste |banana>
  dump
  -- if whistling then happy
  is-happy |*> #=> wif(is-whistling |_self>,|yes>,|no>)
  is-whistling |Fred> => 0.8|yes>
  is-happy |Fred>
  dump
  is-whistling |Fred> => |yes>
  is-happy |Fred>
  is-happy |*> #=> if(is-whistling |_self>,|yes>,|no>)
  is-happy |Fred>
  is-happy |Sam>
  dump
  is-happy |*> #=> if(is-whistling |_self>,|yes>,|>)
  is-happy |Sam>
  do-you-know is-happy |Sam>
  do-you-know is-happy |Fred>
  is-happy |Fred>
  dump
  save history

2015-02-05
  like |*> #=> 0.9 |_self>
  exactly-like |*> #=> |_self>
  a-little-like |*> #=> 0.3 |_self>
  
  dump
  -- mandarin's taste like oranges
  taste |mandarin> #=> like taste |orange>
  dump
  taste |orange> => |citrus> + |sweet> + |juicy>
  -- now ask taste of mandarin:
  taste |mandarin>
  -- we could do with a better definition of "taste orange", but proof of concept is there.
  dump
  nothing-like |*> #=> 0 |_self>
  nothing-like taste |orange>
  dump
  taste |banana> #=> nothing-like taste |orange>
  taste |banana>
  dump
  -- if whistling then happy
  is-happy |*> #=> wif(is-whistling |_self>,|yes>,|no>)
  is-whistling |Fred> => 0.8|yes>
  is-happy |Fred>
  dump
  is-whistling |Fred> => |yes>
  is-happy |Fred>
  is-happy |*> #=> if(is-whistling |_self>,|yes>,|no>)
  is-happy |Fred>
  is-happy |Sam>
  dump
  is-happy |*> #=> if(is-whistling |_self>,|yes>,|>)
  is-happy |Sam>
  do-you-know is-happy |Sam>
  do-you-know is-happy |Fred>
  is-happy |Fred>
  dump
  save history
  [Bq
  q

2015-02-05
  load pretty-print-table-of-australian-cities.sw
  table[city,population] "" |city list>
  history
  q

2015-02-05
  load africa.sw
  dump
  |list> => "" |Africa: country: list>
  table[name,capital-city] "" |list>
  history
  q

2015-02-05
  |list> => "" |Africa: country: list>
  load africa.sw
  |list> => "" |Africa: country: list>
  table[name,captial-city] "" |list>
  table[name,capital-city] "" |list>
  [A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A[A
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  table[name,capital-city] 0 "" |list>
  table[name,capital-city] clean 0 "" |list>
  set-to[1] (0|x> + 7|y>)
  q

2015-02-05
  load africa.sw
  |list> => "" |Africa: country: list>
  table[name,capital-city] 0 "" |list>
  history
  [B[B[B[B[B[Bq
  q

2015-02-05
  load africa.sw
  |list> => "" |Africa: country: list>
  table[name,capital-city,population] "" |list>
  population |*> #=> to-comma-number extract-value population |_self>
  population |country: Zimbabwe>
  -- of course. label descent, my "population |*>" is never reached
  tidy-population |*> to-comma-number population |_self>
  tidy-population |*> #=> to-comma-number population |_self>
  history
  table[name,capital-city,tidy-population] 0 "" |list>
  history
  tidy-population |*> #=> to-comma-number extract-value population |_self>
  table[name,capital-city,tidy-population] 0 "" |list>
  history
  rank-table[name,capital-city,tidy-population] sort-by[population] "" |list>
  history
  rank-table[name,capital-city,tidy-population] reverse sort-by[population] "" |list>
  history
  strict-rank-table[name,capital-city,tidy-population] sort-by[population] "" |list>
  history
  -- hrmm... a bug
  strict-rank-table[name,capital-city,tidy-population] reverse sort-by[population] "" |list>
  load foaf-example-in-sw.sw
  table[name,email] "" |list>
  rank-table[name,email] "" |list>
  strict-rank-table[name,email] "" |list>
  context
  -- load up geonames data for all cities with population >= 15000
  load improved-geonames-cities-15000.sw
  history
  -- restrict to cities with population >= 2,000,000
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  history
  population-comma |*> #=> to-comma-number extract-value population |_self>
  -- how many results:
  how-many "" |result>
  -- print table:
  rank-table[name,city,population-comma] select[1,20] "" |result>
  history
  rank-table[id,name,capital-city,population-comma] select[1,20] "" |result>
  rank-table[id,name,population-comma] select[1,20] "" |result>
  rank-table[id,name,population-comma] select[1,30] "" |result>
  history
  how-many "" |result>
  rank-table[id,name,population-comma] select[1,30] "" |result>
  map[population-comma] "" |result>
  rank-table[id,name,population-comma] select[1,30] "" |result>
  history
  map[population-comma] set-to[1] "" |result>
  rank-table[id,name,population-comma] select[1,30] "" |result>
  history
  new-popn |*> #=> to-comma-number extract-value population |_self>
  map[new-popn] set-to[1] clean "" |result>
  history
  rank-table[id,name,new-popn] "" |result>
  -- heh. due to label descent, you can only run "map[op] "" |list>" once. Second time round it changes nothing.
  save history

2015-02-05
  to-comma-number |8825>
  to-comma-number |population: 2300000>
  to-comma-number |3759.27>
  to-comma-number |km: 22956.53>
  q

2015-02-05
  push-float 3 |x>
  [6~[6~push-float 3.2 |x>
  
  push-float 3.2 |x>
  [B[B[A
  q

2015-02-05
  push-float 3 |x>
  push-float 3.1415 |x>
  push-float 312| >
  q

2015-02-05
  load africa.sw
  |list> => "" |Africa: country: list>
  table[name,capital-city,population] "" |list>
  population |*> #=> to-comma-number extract-value population |_self>
  population |country: Zimbabwe>
  -- of course. label descent, my "population |*>" is never reached
  tidy-population |*> to-comma-number population |_self>
  tidy-population |*> #=> to-comma-number population |_self>
  history
  table[name,capital-city,tidy-population] 0 "" |list>
  history
  tidy-population |*> #=> to-comma-number extract-value population |_self>
  table[name,capital-city,tidy-population] 0 "" |list>
  history
  rank-table[name,capital-city,tidy-population] sort-by[population] "" |list>
  history
  rank-table[name,capital-city,tidy-population] reverse sort-by[population] "" |list>
  history
  strict-rank-table[name,capital-city,tidy-population] sort-by[population] "" |list>
  history
  -- hrmm... a bug
  strict-rank-table[name,capital-city,tidy-population] reverse sort-by[population] "" |list>
  load foaf-example-in-sw.sw
  table[name,email] "" |list>
  rank-table[name,email] "" |list>
  strict-rank-table[name,email] "" |list>
  context
  -- load up geonames data for all cities with population >= 15000
  load improved-geonames-cities-15000.sw
  history
  -- restrict to cities with population >= 2,000,000
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  history
  population-comma |*> #=> to-comma-number extract-value population |_self>
  -- how many results:
  how-many "" |result>
  -- print table:
  rank-table[name,city,population-comma] select[1,20] "" |result>
  history
  rank-table[id,name,capital-city,population-comma] select[1,20] "" |result>
  rank-table[id,name,population-comma] select[1,20] "" |result>
  rank-table[id,name,population-comma] select[1,30] "" |result>
  history
  how-many "" |result>
  rank-table[id,name,population-comma] select[1,30] "" |result>
  map[population-comma] "" |result>
  rank-table[id,name,population-comma] select[1,30] "" |result>
  history
  map[population-comma] set-to[1] "" |result>
  rank-table[id,name,population-comma] select[1,30] "" |result>
  history
  new-popn |*> #=> to-comma-number extract-value population |_self>
  map[new-popn] set-to[1] clean "" |result>
  history
  rank-table[id,name,new-popn] "" |result>
  -- heh. due to label descent, you can only run "map[op] "" |list>" once. Second time round it changes nothing.
  save history
  [B[B[B[B[B[B[B[B[B[B[B[B[Bhistory
  
  history
  history 10000
  [Bq
  
  q

2015-02-05
  
  nothing-like |*> #=> 0 |_self>
  
  a-little-like |*> #=> 0.3 |_self>
  
  like |*> #=> 0.9 |_self>
  exactly-like |*> #=> |_self>
  dump
  taste |orange> => |citrus> + |sweet> + |juicy>
  
  
  taste |banana> #=> nothing-like taste |orange>
  
  taste |banana>
  
  
  
  is-happy |*> #=> if(is-whistling |_self>,|yes>,|>)
  is-whistling |Fred> => |yes>
  do-you-know is-happy |Fred>
  is-happy |Fred>
  do-you-know is-happy |Sam>
  is-happy |Sam>
  q

2015-02-05
  current-time |>
  current-date |>
  q

2015-02-05
  current-date |>
  current-time |>
  q

2015-02-05
  current-date |>
  current-time |>
  q

2015-02-05
  day-of-the-week |date: 2015/02/05>
  day-of-the-week current-date |>
  current-date |>
  day-of-the-week |some: date: 2015-04-18>
  q

2015-02-05
  a-lot-like |*> #=> 0.9 |_self>
  taste |orange> => |citrus> + |sweet> + |juicy>
  taste |mandaring> #=> a-lot-like taste |orange>
  taste |mandaring>
  q

2015-02-05
  "" |bah>
  q

2015-02-05
  select[1,3] "" |bah>
  select[2,3] |bah>
  select[1,10] |bah>
  load improved-geonames-cities-15000.sw
  |current time> => current-time |>
  "" |current time>
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  name select[1,5] "" |result>
  id |Shanghai>
  pop |*> #=> to-comma-number extract-value population id |_self>
  rank-table[name,pop] name select[1,30] "" |result>
  history
  save history

2015-02-05
  select[1,3] "" |bah>
  select[2,3] |bah>
  select[1,10] |bah>
  load improved-geonames-cities-15000.sw
  |current time> => current-time |>
  "" |current time>
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  name select[1,5] "" |result>
  id |Shanghai>
  pop |*> #=> to-comma-number extract-value population id |_self>
  rank-table[name,pop] name select[1,30] "" |result>
  history
  save history
  id |Moscow>
  it |London>
  id |London>
  count-match |*> #=> extract-value count id |_self>
  rank-table[name,pop,count-match] name select[1,50] "" |result>
  history
  rank-table[name,pop,count-match] name "" |result>
  save history

2015-02-05
  select[1,3] "" |bah>
  select[2,3] |bah>
  select[1,10] |bah>
  load improved-geonames-cities-15000.sw
  |current time> => current-time |>
  "" |current time>
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  name select[1,5] "" |result>
  id |Shanghai>
  pop |*> #=> to-comma-number extract-value population id |_self>
  rank-table[name,pop] name select[1,30] "" |result>
  history
  save history
  id |Moscow>
  it |London>
  id |London>
  count-match |*> #=> extract-value count id |_self>
  rank-table[name,pop,count-match] name select[1,50] "" |result>
  history
  rank-table[name,pop,count-match] name "" |result>
  save history
  history
  count-match |*> #=> drop-below[2] pop-float extract-value count id |_self>
  rank-table[name,pop,count-match] name "" |result>
  
  history
  count-match |*> #=> push-float drop-below[2] pop-float extract-value count id |_self>
  rank-table[name,pop,count-match] name "" |result>
  history
  count-match |*> extract-value push-float drop-below[2] pop-float count id |_self>
  count-match |*> #=> extract-value push-float drop-below[2] pop-float count id |_self>
  rank-table[name,pop,count-match] name "" |result>
  history
  -- tyring to get "count-match" to return int if match >= 2, and "" if match == 1.[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[Dry
  history
  save history

2015-02-05
  next-birthday |Fred> => |date: 2015/7/13>
  day-of-the-week next-birthday |Fred>
  q

2015-02-05
  push-float |>
  push-float 0|>
  push-float 9|>
  q

2015-02-06
  load improved-geonames-cities-15000.sw
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  history
  count-name-matches |*> #=> push-float drop-below[2] pop-float extract-value count id |_self>
  popn |*> #=> to-comma-number extract-value population id |_self>
  rank-table[name,popn,count-name-matches] name select[1,40] "" |result>
  history
  rank-table[name,popn,count-name-matches] name "" |result>
  history
  select[1,5] "" |result>
  name select[1,5] "" |result>
  rank-table[city,popn,count-name-mathces] name "" |result>
  
  history
  rank-table[city,popn,count-name-matches] name "" |result>
  id |London>
  population id |London>
  sort-by[population] id |London>
  reverse sort-by[population] id |London>
  population reverse sort-by[population] id |London>
  select[1,5] "" |result>
  name select[1,5] "" |result>
  history
  improved-popn |*> #=> to-comma-number extract-value population reverse sort-by[population] id |_self>
  improved-popn |London>
  history
  rank-table[city,improved-popn,count-name-matches] name "" |result>
  history
  save history

2015-02-06
  push-float |>
  push-float 29|>
  q

2015-02-09
  load improved-geonames-cities-15000.sw
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  history
  count-name-matches |*> #=> push-float drop-below[2] pop-float extract-value count id |_self>
  popn |*> #=> to-comma-number extract-value population id |_self>
  rank-table[name,popn,count-name-matches] name select[1,40] "" |result>
  history
  rank-table[name,popn,count-name-matches] name "" |result>
  history
  select[1,5] "" |result>
  name select[1,5] "" |result>
  rank-table[city,popn,count-name-mathces] name "" |result>
  
  history
  rank-table[city,popn,count-name-matches] name "" |result>
  id |London>
  population id |London>
  sort-by[population] id |London>
  reverse sort-by[population] id |London>
  population reverse sort-by[population] id |London>
  select[1,5] "" |result>
  name select[1,5] "" |result>
  history
  improved-popn |*> #=> to-comma-number extract-value population reverse sort-by[population] id |_self>
  improved-popn |London>
  history
  rank-table[city,improved-popn,count-name-matches] name "" |result>
  history
  save history
  improved-popn |Adelaide>
  improved-popn |Alexandria>
  list-to-words improved-popn |Alexandria>
  
  history
  improved-popn |*> #=> list-to-words to-comma-number extract-value population reverse sort-by[population] id |_self>
  improved-popn |London>
  rank-table[city,improved-popn,count-name-matches] name "" |result>
  history
  is-human |Socrates> => |yes>
  is-mortal |*> => if(is-human|_self>,|yes>,|>)
  is-mortal |Socrates>
  dump
  context socrates
  is-human |Socrates> => |yes>
  is-mortal |*> #=> if(is-human|_self>,|yes>,|>)
  is-mortal |Socrates>
  list-of-critiques |this web page> => |critique 1> + |critique 2>
  author |critique 1> => |Liz>
  author |critique 2> => |Ron>
  -- learn their homepages:
  homepage |Liz> => |url: http://liz.org>
  homepage |Ron> => |url: http://ron.org> author |critique 1> => |Liz>
  author |critique 2> => |Ron>
  -- learn their homepages:
  homepage |Liz> => |url: http://liz.org>
  homepage |Ron> => |url: http://ron.org> 
  
  dump
  table[author,homepage] author list-of-critiques |this web page>
  load bots.sw
  dump
  table[name,mother,fater,birth-sign,hair-colour,eye-colour,where-live] relevant-kets[name] |>
  table[name,mother,father,birth-sign,hair-colour,eye-colour,where-live,bed-time] relevant-kets[name] |>
  merge-labels(3|x> + 20|y> + 0|z>)
  context
  q

2015-02-09
  extract-3-tail |a b c>
  q

2015-02-09
  extract-3-tail |a b c>
  extract-3-tail |a b c d e f>
  extract-3-tail |a b>
  extract-3-tail |a>
  extract-3-tail |a b c d>
  extract-3-tail |a b c d e f g h i j k>
  q

2015-02-09
  extract-3-tail |a b c>
  extract-3-tail |a b>
  extract-3-tail |a>
  extract-3-tail |a b c d>
  extract-3-tail |a b c d e>
  q

2015-02-09
  load ngram-pairs.sw
  dump
  q

2015-02-09
  load ngram-pairs.sw
  dump
  next-2 |of supplying half>
  next-2^3 |of supplying half>
  next-2 |in construction>
  next-2 |in construction and>
  extract-3-tail |in construction of some fish>
  q

2015-02-09
  ramble |*> #=> merge-labels(|_self> + | > + pick-elt next-2 extract-3-tail |_self>)
  ramble |of water services>
  ramble |and expected to>
  extract-3-tail |and expected to>
  next-2 extract-3-tail |and expected to>
  dump
  context
  history
  load ngram-pairs.sw
  context
  history
  ramble |*> #=> merge-labels(|_self> + | > + pick-elt next-2 extract-3-tail |_self>)
  dump
  ramble |is currently in>
  ramble^2 |is currently in>
  ramble^3 |is currently in>
  ramble^50 |is currently in construction>
  next-2 |government-owned SA Water.>
  dump
  ramble^50 |three other campuses>
  dump
  -- WOW! it works. I have rambler written in BKO.
  
  ramble^50 |of the population,>
  dump |*>
  q

2015-02-09
  load ngram-pairs--Tom-Sawyer.sw
  files
  q

2015-02-09
  load ngram-pairs--Tom-Sawyer.sw
  ramble |*> #=> merge-labels(|_self> + | > + pick-elt next-2 extract-3-tail |_self>)
  |result> => ramble^1000 |Project Gutenberg EBook>
  dump |result>
  history
  save history

2015-02-09
  load ngram-pairs--Tom-Sawyer.sw
  ramble |*> #=> merge-labels(|_self> + | > + pick-elt next-2 extract-3-tail |_self>)
  |result> => ramble^1000 |Project Gutenberg EBook>
  dump |result>
  history
  save history
  |result> => ramble^1000 "" |result>
  history
  pick-elt relevant-kets[next-2] |>
  .
  .
  .
  ramble^100 |she had passed>
  history
  ramble^300 pick-elt relevant-kets[next-2] |>
  history
  ramble^300 pick-elt relevant-kets[next-2] |>
  .
  .
  history
  q

2015-02-09
  select[1,3] "" |bah>
  select[2,3] |bah>
  select[1,10] |bah>
  load improved-geonames-cities-15000.sw
  |current time> => current-time |>
  "" |current time>
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  name select[1,5] "" |result>
  id |Shanghai>
  pop |*> #=> to-comma-number extract-value population id |_self>
  rank-table[name,pop] name select[1,30] "" |result>
  history
  save history
  id |Moscow>
  it |London>
  id |London>
  count-match |*> #=> extract-value count id |_self>
  rank-table[name,pop,count-match] name select[1,50] "" |result>
  history
  rank-table[name,pop,count-match] name "" |result>
  save history
  history
  count-match |*> #=> drop-below[2] pop-float extract-value count id |_self>
  rank-table[name,pop,count-match] name "" |result>
  
  history
  count-match |*> #=> push-float drop-below[2] pop-float extract-value count id |_self>
  rank-table[name,pop,count-match] name "" |result>
  history
  count-match |*> extract-value push-float drop-below[2] pop-float count id |_self>
  count-match |*> #=> extract-value push-float drop-below[2] pop-float count id |_self>
  rank-table[name,pop,count-match] name "" |result>
  history
  -- tyring to get "count-match" to return int if match >= 2, and "" if match == 1.[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[Dry
  history
  save history
  count split |a b c>
  count |a>
  pop-float count split |a b c>
  drop-below[2] count |a>
  push-float drop-below[2] count |a>
  history
  drop-below[2] pop-float extract-value count split |a b>
  -- solved. I tweaked readable_display() using float().is_integer()
  history 10000
  -- solved again. push-float n|> == |> for any n
  load africa.sw
  table[name,capital-city,population] extract-value "" |Africa: country: list>
  capital |*> #=> extract-value capital-city merge-labels(|country: > + |_self>)
  capital |Mali>
  popn |*> #=> extract-value population merge-labels(|country: > + |_self>)
  popn |Mali>
  popn |*> #=> to-comma-number extract-value population merge-labels(|country: > + |_self>)
  popn |Mali>
  history
  table[name,capital,popn] extract-value "" |Africa: country: list>
  [A
  history
  [A[A[A
  
  history
  table[name,capital-city,population] extract-value select[1,5] "" |Africa: country: list>
  history
  table[name,capital,popn] extract-value "" |Africa: country: list>
  history
  
  table[name,capital,popn] extract-value sort-by[popn] "" |Africa: country: list>
  history
  table[name,capital,popn] sort-by[popn] extract-value "" |Africa: country: list>
  history
  table[name,capital,popn] extract-value sort-by[population] "" |Africa: country: list>
  history
  table[name,capital,popn] extract-value reverse sort-by[population] "" |Africa: country: list>
  history
  rank-table[name,capital,popn] select[1,10] extract-value reverse sort-by[population] "" |Africa: country: list>
  history
  rank-table[country,capital,popn] select[1,10] extract-value reverse sort-by[population] "" |Africa: country: list>
  history
  q

2015-02-10
  to-comma-number |3572>
  to-comma-number |3572k>
  q

2015-02-10
  load clean-breakfast-menu.sw
  dump
  table[name,price,calories,description] "" |menu: breakfast: list>
  price. |*> #=> extract-value price |_self>
  price. |food: French Toast>
  calories. |*> #=> extract-value calories |_self>
  description |*> #=> extract-value description |_self>
  history
  table[name,price.,calories.,description.] "" |menu: breakfast: list>
  history
  description. |*> #=> extract-value description |_self>
  table[name,price.,calories.,description.] "" |menu: breakfast: list>
  history
  extract-value |a b c>
  extract-value |a: b: c>
  history
  q

2015-02-10
  load clean-breakfast-menu.sw
  dump
  table[name,price,calories,description] "" |menu: breakfast: list>
  table[food-name,price,calories,description] "" |menu: breakfast: list>
  history
  table[food,price,calories,description] sort-by[price] "" |menu: breakfast: list>
  table[food,price,calories,description] sort-by[calories] "" |menu: breakfast: list>
  
  table[food,price,calories,description] sort-by[price] "" |menu: breakfast: list>
  table[food,price,calories,description] sort-by[calories] "" |menu: breakfast: list>
  load africa.sw
  table[name,capital-city,population] "" |Africa: country: list>
  to-comma-number |population: 3572>
  popn |*> #=> to-comma-number population |_self>
  history
  table[name,capital-city,popn] "" |Africa: country: list>
  rank-table[country,capital-city,popn] select[1,10] reverse sort-by[population] "" |Africa: country: list>
  [A
  history
  rank-table[country,capital-city,popn] select[1,10] reverse sort-by[population] "" |Africa: country: list>
  load foaf-example-in-sw.sw
  table[name,email,works-for] "" |list>
  is-early |time: 24h: *> #=> do-you-know drop-above[700] drop-below[330] pop-float |_self>
  is-late |time: 24h: *> #=> do-you-know (drop-below[2230] pop-float |_self> + drop-above[330] pop-float |_self>)
  |24h times> => range(|time: 24h: 100>,|time: 24h: 2400>,|100>)
  
  table[24h-time,is-early,is-late] "" |24h times>
  table[name,where-live,lives-with,email,works-for,website] "" |list>
  table[C,F,K] range(|C: 0>,|C: 50>,|10>)
  F |*> #=> F |_self>
  K |*> #=> K |_self>
  table[C,F,K] range(|C: 0>,|C: 50>,|10>)
  history
  table[C,F,K] range(|C: 0>,|C: 50>,|10>)
  load early-us-presidents.sw
  
  table[name,full-name,president-number,party] "" |early US Presidents: _list>
  
  age |person: Emma> => |age: 12>
  age |person: Fred> => |age: 17>
  age |person: Sam> => |age: 18>
  age |person: Liz> => |age: 19>
  age |person: Jack> => |age: 20>
  is-teenager |person: *> #=> do-you-know drop-below[13] drop-above[19] pop-float age |_self>
  is-adult |person: *> #=> do-you-know drop-below[18] pop-float age|_self>
  |list> => |person: Emma> + |person: Fred> + |person: Sam> + |person: Liz> + |person: Jack>
  table[name,age,is-teenager,is-adult] "" |list>
  context
  context breakfast menu
  q

2015-02-12
  is-greater-than-0 |*> #=> do-you-know push-float drop-below[1] pop-float |_self>
  is-greater-than-0 |1>
  is-greater-than-0 |0>
  is-greater-than-0 |number: 372>
  dump
  is-greater-than-0 (|0> + |1> + |2> + |3>)
  history
  normalize is-greater-than-0 split |0 1 2 3>
  history
  is-greater-than-0 |0>
  is-greater-than-0 |-1>
  pop-float |-1>
  is-greater-than-0 |-37>
  is-greater-than-0 |number: -3572>
  is-greater-than-0 |-3.21>
  is-greater-than-0 |-15>
  is-greater-than-0 |0>
  table[number,is-greater-than-0] range(|-5>,|10>)
  history
  is-greater-than-5 |*> #=> do-you-know push-float drop-below[5.01] pop-float |_self>
  table[number,is-greater-than-0,is-greater-than-5] range(|-5>,|10>)
  history
  table[number,is-greater-than-0.is-greater-than-5] range(|x: -5>,|x: 10>)
  history
  table[number,is-greater-than-0,is-greater-than-5] range(|x: -5>,|x: 10>)
  is-greater-than-0 range(|-5>,|10>)
  history
  is-greater-than-0 range(|-5>,|10>)
  is-greater-than-5 range(|-5>,|10>)
  q

2015-02-12
  context
  context foo
  context bah
  context rats
  context
  [Bfoo |x> => |fish>
  context
  q

2015-02-12
  context
  context fish
  context rats
  context horses
  context
  icontext
  q

2015-02-12
  context foo
  context bah
  context fubar
  context
  icontext
  q

2015-02-12
  context a
  context b
  context c
  context d
  context e
  context
  icontext
  context
  context a
  q

2015-02-12
  context a
  context b
  context c
  context d
  context e
  icontext
  icontext
  q

2015-02-12
  context a 
  context b
  context c
  context d
  icontext
  icontext
  icontext
  icontext
  icontext
  icontext 4
  icontext
  context
  q

2015-02-12
  is-greater-than[3] |5>
  is-greater-than[3] |2>
  q

2015-02-12
  is-greater-than[3] |5>
  q

2015-02-12
  is-greater-than[3] |5>
  q

2015-02-12
  is-greater-than[3] |5>
  q

2015-02-12
  is-greater-than[3] |5>
  is-greater-than[3] |3>
  is-greater-than[3] |age: 13>
  q

2015-02-12
  is-greater-than[3] |5>
  is-greater-than[3] |3>
  q

2015-02-12
  is-greater-than[3] |5>
  is-greater-than[3] |3>
  q

2015-02-12
  is-greater-than[3] |age: 5>
  is-greater-than[3] |3>
  q

2015-02-12
  is-equal[37] |37>
  is-equal[37] |36.9>
  is-less-than[30] |29>
  q

2015-02-12
  is-in-range[13,17] |age: 15>
  is-in-range[13,19] |age: 19>
  is-in-range[13,19] |age: 20>
  load improved-geonames-cities-15000.sw
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  
  how-many "" |result>
  count id |Moscow"
  count id |Moscow>
  is-greater-than[1] count id |Moscow>
  is-greater-than[1] count id |Shanghi>
  id |Mumbai>
  count id |Mumbai>
  is-greater-than[1] count id |Mumbai>
  improved-count-name-matches |*> #=> is-greater-than[1] count id |_self>
  popn |*> #=> to-comma-number population reverse sort-by[population] id |_self>
  rank-table[city,popn,improved-count-name-matches] name "" |result>
  history
  save history

2015-02-12
  load early-us-presidents.sw
  table[name,president-era] "" |early US Presidents: _list>
  list-of-critiques |this web page> => |critique 1> + |critique 2>
  author |critique 1> => |Liz>
  author |critique 2> => |Ron>
  
  homepage |Liz> => |url: http://liz.org>
  homepage |Ron> => |url: http://ron.org> 
  table[author,homepage] author list-of-critiques |this web page>
  author-homepage |*> #=> homepage author |_self>
  table[critique,author,author-homepage] list-of-critiques |this web page>
  history
  context
  icontext
  context is-greater-than examples
  is-greater-than-0 |*> #=> do-you-know push-float drop-below[1] pop-float |_self>
  is-greater-than-5 |*> #=> do-you-know push-float drop-below[5.01] pop-float |_self>
  count-name-matches |*> #=> push-float drop-below[2] pop-float extract-value count id |_self>
  is-early |time: 24h: *> #=> do-you-know drop-above[700] drop-below[330] pop-float |_self>
  is-late |time: 24h: *> #=> do-you-know (drop-below[2230] pop-float |_self> + drop-above[330] pop-float |_self>)
  range-is-early |time: 24h: *> #=> do-you-know drop in-range[330,700] pop-float |_self>
  range-is-late |time: 24h: *> #=> do-you-know drop (in-range[2230,2400] pop-float |_self> + in-range[0,330] pop-float |_self>)
  is-teenager |person: *> #=> do-you-know drop-below[13] drop-above[19] pop-float age |_self>
  is-adult |person: *> #=> do-you-know drop-below[18] pop-float age|_self>
  is-teenager |person: *> #=> do-you-know drop in-range[13,19] pop-float age |_self> 
  dump
  save is-greater-than-examples.sw
  improved-is-greater-than-0 |*> #=> do-you-know is-greater-than[0] |_self>
  improved-is-greater-than-5 |*> #=> do-you-know is-greater-than[5] |_self>
  table[number,is-greater-than-0,improved-is-greater-than-0,is-greater-than-5,improved-is-greater-than-5] range(|-5>,|10>)
  history
  dump
  improved-range-is-early |time: 24h: *> #=> do-you-know is-in-range[330,700] |_self>
  dump
  improved-range-is-late |time: 24h: *> #=> do-you-know (is-in-range[2230,2400] |_self> + is-in-range[0,330] |_self>)
  dump
  is-teenager |person: *> #=> do-you-know is-in-range[13,19] age |_self>
  is-teenager |person: *> #=> do-you-know drop in-range[13,19] pop-float age |_self>
  improved-is-teenager |person: *> #=> do-you-know is-in-range[13,19] age |_self>
  dump
  improved-is-adult |person: *> #=> do-you-know is-greater-equal-than[18] age |_self>
  dump
  save is-greater-than-examples.sw
  dump
  improved-count-name-matches |*> #=> is-greater-than[1] count id |_self>
  dump
  save is-greater-than-examples.sw
  dump
  save is-greater-than-examples.sw
  load foaf-example-in-sw.sw
  table[name,email,works-for] "" |list>
  history
  load early us-presidents.sw
  load early-us-presidents.sw
  table[name,full-name,president-number,party] "" |early US Presidents: _list>
  table[name,president-era] "" |early US Presidents: _list>
  
  
  q

2015-02-12
  is-in-range[13,17] |age: 15>
  is-in-range[13,19] |age: 19>
  is-in-range[13,19] |age: 20>
  load improved-geonames-cities-15000.sw
  |result> => coeff-sort drop-below[2000000] population-self relevant-kets[population-self] |>
  
  how-many "" |result>
  count id |Moscow"
  count id |Moscow>
  is-greater-than[1] count id |Moscow>
  is-greater-than[1] count id |Shanghi>
  id |Mumbai>
  count id |Mumbai>
  is-greater-than[1] count id |Mumbai>
  improved-count-name-matches |*> #=> is-greater-than[1] count id |_self>
  popn |*> #=> to-comma-number population reverse sort-by[population] id |_self>
  rank-table[city,popn,improved-count-name-matches] name "" |result>
  history
  save history
  factor |number: 29387419871>
  to-base(|29387419871>,|2>)
  q

2015-02-13
  load early-us-presidents.sw
  table[name,*] "" |early US Presidents: _list>
  supported-ops "" |early US Presidents: _list>
  q

2015-02-13
  factor |*> #=> factor |_self>
  table[number,factor] range(|100>,|200>)
  
  history
  factor |37>
  table[number,factor] range(|number: 100>,|number: 200>)
  load foaf-example-in-sw.sw
  dump
  supported-ops |list>
  supported-ops "" |list>
  dump
  [6~i
  
  supported-ops "" |list>
  q

2015-02-13
  measure-currency |x>
  measure-currency split |a b c d e>
  load foaf-example-in-sw.sw
  supported-ops "" |list>
  extract-value supported-ops "" |list>
  list-to-words int-ceoffs-to-word extract-value supported-ops "" |list>
  history
  list-to-words int-coeffs-to-word extract-value supported-ops "" |list>
  history
  describe-supported-ops |*> #=> list-to-words int-coeffs-to-word extract-value supported-ops |_self>
  describe-supported-ops "" |list>
  history
  dso |*> #=> list-to-words int-coeffs-to-word extract-value supported-ops "" |_self>
  dso |list>
  q

2015-02-13
  load early-us-presidents.sw
  table[name,*] "" |early US Presidents: _list>
  load foaf-example-in-sw.sw
  table[name,*] "" |list>
  history
  supported-ops "" |list>
  icontext
  history
  supported-ops "" |early US Presidents: _list>
  icontext
  table[name,*] "" |list>
  icontext
  table[name,*] "" |early US Presidents: _list>
  icontext
  improved-is-adult |person: *> #=> do-you-know is-greater-equal-than[18] age |_self>
  improved-is-adult |person: Sam>
  load clean-breakfast-menu.sw
  table[food,*] "" |menu: breakfast: list>
  load 45-by-45-grid.sw
  value |grid: 4 25> => |39>
  place |grid: 4 25> => |my house>
  table[cell,*] |gird: 4 25>
  table[cell,*] |grid: 4 25>
  table[cell,*] (|grid: 4 25> + |grid: 4 26> + |grid: 3 25>)
  table[cell,*] (|grid: 1 10> + |grid: 2 10> + |grid: 1 11>)
  smell |grid: 5 7> => |smell: dead fish>
  create inverse
  table[cell,*] inverse-smell |smell: dead fish>
  near |grid: *> #=> |_self> + N|_self> + NE|_self> + E|_self> + SE|_self> + S|_self> + SW|_self> + W|_self> + NW|_self>
  history
  table[cell,*] near inverse-smell |smell: dead fish>
  table[cell,*] near^2 inverse-smell |smell: dead fish>
  is-happy |*> #=> if(is-whistling |_self>,|yes>,|>)
  is-whistling |Fred> => |yes>
  do-you-know-is-happy 
  
  do-you-know-is-happy |
  do-you-know-is-happy |*> #=> do-you-know is-happy |_self>
  table[name,do-you-know-is-happy,is-happy] (|Fred> + |Sam>)
  history
  table[name,do-you-know-is-happy,is-happy] (|Fred> + |Sam>)
  history
  table[name,do-you-know-is-happy,is-happy,is-whistling] (|Fred> + |Sam>)
  history
  load bots.sw
  table[name,*] relevant-kets[name]
  .
  history
  strict-table[name,*] relevant-kets[name]
  context
  history
  save history

2015-02-13
  friends |Fred> => |Liz> + |Maz> + |Sam> + |Jess>
  age |Fred> => |31>
  friends |Sam> => |Rob> + |Fred>
  friends |Rob> => |Harry> + |Jack>
  height |Rob> => |cm: 177>
  dump
  relevant-kets[age]
  relevant-kets[age] |>
  relevant-kets[friends] |>
  relevant-kets[friends] split |Sam Rob>
  relevant-kets[age] relevant-kets[friends] |>
  [B[B[B[B[B[B[B
  dump
  age |Rob> => |28>
  height |Fred> => |cm: 185>
  dump
  relevant-kets[height] relevant-kets[age] relevant-kets[friends] |>
  similar[friends] |Fred>
  dump
  friends |Alex> => |Jess>
  similar[friends] |Fred>
  load names.sw
  find-topic[names] |Fred>
  find-topic[names] |fred>
  find-topic[names] 
  
  find-topic[names] |jess>
  find-topic[names] |jessy>
  find-topic[names] |frank>
  find-topic[names] |liz>
  find-topic[names] |alice>
  find-topic[names] |sarah>
  find-topic[names] |garcia>
  find-topic[names] |jefferson>
  q

2015-02-14
  load early-us-presidents.sw
  table[name,*] "" |early US Presidents: _list>
  load foaf-example-in-sw.sw
  table[name,*] "" |list>
  history
  supported-ops "" |list>
  icontext
  history
  supported-ops "" |early US Presidents: _list>
  icontext
  table[name,*] "" |list>
  icontext
  table[name,*] "" |early US Presidents: _list>
  icontext
  improved-is-adult |person: *> #=> do-you-know is-greater-equal-than[18] age |_self>
  improved-is-adult |person: Sam>
  load clean-breakfast-menu.sw
  table[food,*] "" |menu: breakfast: list>
  load 45-by-45-grid.sw
  value |grid: 4 25> => |39>
  place |grid: 4 25> => |my house>
  table[cell,*] |gird: 4 25>
  table[cell,*] |grid: 4 25>
  table[cell,*] (|grid: 4 25> + |grid: 4 26> + |grid: 3 25>)
  table[cell,*] (|grid: 1 10> + |grid: 2 10> + |grid: 1 11>)
  smell |grid: 5 7> => |smell: dead fish>
  create inverse
  table[cell,*] inverse-smell |smell: dead fish>
  near |grid: *> #=> |_self> + N|_self> + NE|_self> + E|_self> + SE|_self> + S|_self> + SW|_self> + W|_self> + NW|_self>
  history
  table[cell,*] near inverse-smell |smell: dead fish>
  table[cell,*] near^2 inverse-smell |smell: dead fish>
  is-happy |*> #=> if(is-whistling |_self>,|yes>,|>)
  is-whistling |Fred> => |yes>
  do-you-know-is-happy 
  
  do-you-know-is-happy |
  do-you-know-is-happy |*> #=> do-you-know is-happy |_self>
  table[name,do-you-know-is-happy,is-happy] (|Fred> + |Sam>)
  history
  table[name,do-you-know-is-happy,is-happy] (|Fred> + |Sam>)
  history
  table[name,do-you-know-is-happy,is-happy,is-whistling] (|Fred> + |Sam>)
  history
  load bots.sw
  table[name,*] relevant-kets[name]
  .
  history
  strict-table[name,*] relevant-kets[name]
  context
  history
  save history
  q

2015-02-15
  fib |0> => |0>
  fib |1> => |1>
  n-1 |*> #=> arithmetic(|_self>,|->,|1>)
  n-2 |*> #=> arithmetic(|_self>,|->,|2>)
  fib |*> !=> arithmetic(fib n-1 |_self>,|+>,fib n-2 |_self>)
  dump
  fib |10>
  dump
  history
  q

2015-02-15
  is-alive |cat> !=> pick-elt (|yes> + |no>)
  dump
  is-alive |cat>
  dump
  is-alive |cat>
  q

2015-02-15
  sleep[5] |x>
  sleep[5] split |a b c d e>
  is-alive |cat> #=> normalize pick-elt (0.5|yes> + 0.5|no>)
  dump
  is-alive |cat>
  .
  .
  dump
  memoizing-is-alive |cat> !=> normalize pick-elt (0.5|yes> + 0.5|no>)
  
  dump
  table[cat,*] |cat>
  .
  .
  .
  dump
  q

2015-02-16
  load fred-sam-friends.sw
  dump
  age |Fred> => |29>
  friends |Liz> => |Jane> + |Mazza>
  dump
  age |Liz> => 
  age |Liz> => |33>
  dump
  relevant-kets[friends]
  intn_relevant-kets[friends]
  intn_relevant-kets[friends] relevant-kets[age]
  q

2015-02-18
  double |*> #=> arithmetic(|_self>,|+>,|_self>)
  double |3>
  double^2 |3>
  history
  double^3 |3>
  history
  m-double |*> !=> arithmetic(|_self>,|+>,|_self>)
  m-double |3>
  dump
  m-double |3>
  m-double^2 |3>
  dump
  can-opener |have closed can of food> => |have open can of food>
  eat |have open can of food> => |not hungry> + |have empty can of food>
  dump
  eat can-opener (|hungry> + |have closed can of food>)
  eat eat can-opener (|hungry> + |have closed can of food>)
  dump
  q

2015-02-19
  ket-simm(|a>,2|a>)
  ket-simm(|>,2|>)
  ket-simm(|a>,|a> + |b>)
  q

2015-02-19
  ket-simm(|a>,|a> + |b>)
  ket-simm(|a>,2|a>)
  q

2015-02-20
  similar[op] (|x> + |y>)
  load disease-symptoms-example.sw
  similar[disease-symptoms] |patient: 1>
  100 similar[disease-symptoms] |patient: 1>
  load simple-shopping-basket.sw
  dump
  100 similar[basket] |f>
  taste |orange> => |citrus> + |sweet> + |juicy>
  nothing-like |*> #=> 0 |_self>
  taste |banana> #=> nothing-like taste |orange>[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[
  dump
  taste |banana> => nothing-like taste |organe>
  dump
  
  
  dump
  
  q

2015-02-21
  taste |orange> => |citrus> + |sweet> + |juicy>
  dump
  nothing-like |*> #=> 0 |_self>
  dump
  taste |banana> => nothing-like taste |orange>
  dump
  similar[taste] |orange>
  similar[taste] |banana>
  load H-I-pat-rec.sw
  dump
  context
  relevant-kets[pixels] |>
  |list> => relevant-kets[pixels] |>
  dump
  simm |*> !=> 100 (|_self> + similar[pixels] |_self>)
  map[simm,similarity] "" |list>
  dump
  matrix[similarity]
  table[char,similarity] "" |list>
  history
  drop-simm |*> !=> drop-below[60] 100 (|_self> + similar[pixels] |_self>)
  map[drop-simm,drop-similarity] "" |list>
  matrix[drop-similarity]
  100 similar[pixels] |noisy: I2>
  save history

2015-02-21
  q

2015-02-21
  round[3] |number: 3.141592>
  round[2] |number: 3.141592>
  round[0] |3.1415>
  q

2015-02-22
  round[0] |3.141>
  round[1] |31.145>
  round[3] |pi: 3.14159265>
  smooth |x>
  x-1 |x: *> #=> arithmetic(|_self>,|->,|x: -1>)
  x-1 |x: 10>
  x-1 |x: *> #=> arithmetic(|_self>,|->,|x: 1>)
  x-1 |x: 10>
  x+1 |x: *> #=> arithmetic(|_self>,|+>,|x: 1>)
  x+1 |x: 10>
  smooth |x: *> #=> 0.25 x-1 |_self> + 0.5 |_self> + 0.25 x+1 |_self>
  smooth 16 |x: 10>
  smooth^2 16 |x: 10>
  smooth^50 16 |x: 10>
  history
  q

2015-02-22
  load early-us-presidents.sw
  is-equal[3] |number: 3>
  is-third-president |*> #=> is-equal[3] president-number |_self>
  is-third-president "" |early US Presidents: _list>
  history
  is-third-president |*> #=> do-you-know is-equal[3] president-number |_self>
  is-third-president |*> #=> do-you-know is-equal[3] president-number |_self>
  is-third-president "" |early US Presidents: _list>
  history
  q

2015-02-22
  q

2015-02-22
  load early-us-presidents.sw
  is-third-president |*> #=> do-you-know is-equal[3] president-number |_self>
  dump
  is-third-president |Jefferson>
  is-third-president |Madison>
  such-that[is-third-president] "" |early US Presidents: _list>
  history
  in-office-in-1825 |*> #=> do-you-know is-equal[1825] president-era |_self>
  such-that[in-office-in-1825] "" |early US Presidents: _list>
  history
  is-equal[1825] president-era |Q Adams>
  is-equal[1825] president-era |Monroe>
  is-equal[1825] president-era |Jefferson>
  history
  true |*> #=> |True>
  such-that[true] split |a b c d e>
  such-that[true] "" |early US Presidents: _list>
  history
  create inverse
  inverse-president-era |year: 1825>
  such-that[in-office-in-1825] "" |early US Presidents: _list>
  history
  is-equal[1825] president-era |Q Adams>
  history
  in-office-in-1825 |Q Adams>
  in-office-in-1825 |Monroe>
  president-era |Monroe>
  is-equal[1825] president-era |Monroe>
  do-you-know is-equal[1825] president-era |Monroe>
  sp-as-list is-equal[1825] president-era |Monroe>
  sp-as-list split |a b c d>
  |result> => is-equal[1825] president-era |Monroe>
  do-you-know "" |result>
  dump
  history
  do-you-know is-equal[1825] president-era |Monroe>
  q

2015-02-22
  load early-US-presidents.sw
  in-office-in-1825 |*> #=> do-you-know is-equal[1825] president-era |_self>
  such-that[in-office-in-1825] "" |early US Presidents: _list>
  history
  is-equal[1825] president-era |Monroe>
  do-you-know is-equal[1825] president-era |Monroe>
  q

2015-02-22
  in-office-in-1825 |*> #=> do-you-know is-equal[1825] president-era |_self>
  load early-US-presidents.sw
  dump
  history
  in-office-in-1825 |*> #=> do-you-know is-equal[1825] president-era |_self>
  dump
  in-office-in-1825 |Monroe>
  q

2015-02-22
  in-office-in-1825 |*> #=> do-you-know is-equal[1825] president-era |_self>
  load early-US-presidents.sw
  in-office-in-1825 |*> #=> do-you-know is-equal[1825] president-era |_self>
  dump
  in-office-in-1825 |Q Adams>
  in-office-in-1825 |Monroe>
  history
  q

2015-02-22
  load early-US-presidents.sw
  in-office-in-1825 |*> #=> do-you-know is-equal[1825] president-era |_self>
  in-office-in-1825 |Monroe>
  in-office-in-1825 |*> #=> do-you-know is-equal[1825] president-era |_self>
  q

2015-02-22
  load early-US-presidents.sw
  in-office-in-1825 |*> #=> do-you-know is-equal[1825] president-era |_self>
  in-office-in-1825 |Monroe>
  such-that[in-office-in-1825] "" |early US Presidents: _list>
  [BF |C: 38.3>
  
  F |C: 38>
  F |C: 38.3>
  F |C: 38>
  F |*> #=> F |_self>
  table[C,F] range(|C: 0>,|C: 50>,|1>)
  history
  temp-is-greater-than-20 |*> #=> do-you-know is-greater-than[20] |_self>
  table[C,F] such-that[temp-is-greater-than-20] range(|C: 0>,|C: 50>,|1>)
  history
  is-third-president |*> !=> do-you-know is-equal[3] president-number |_self>
  such-that[is-third-president] "" |early US Presidents: _list>
  history
  party such-that[is-third-president] "" |early US Presidents: _list>
  table[president,president-number,party] such-that[is-third-president] "" |early US Presidents: _list>
  table[president,full-name,president-number,party] such-that[is-third-president] "" |early US Presidents: _list>
  history
  dump
  create inverse
  inverse-is-third-president |no>
  inverse-is-third-president |yes>
  table[president,full-name,president-number,party] such-that[is-third-president] "" |early US Presidents: _list>
  q

2015-02-22
  true |*> => |True>
  such-that[true] split |a b c d e>
  false |*> => |False>
  such-that[false] split |a b c d e>
  such-that[true,false] split |a b c d e>
  such-that[true,true] split |a b c d e>
  such-that[true,fish] split |a b c>
  history
  load breakfast-menu.sw
  dump
  is-under-700-calories |*> #=> do-you-know is-less-than[700] calories |_self>
  table[food,*] "" |menu: breakfast>
  history
  table[food,*] such-that[is-under-700-calories] "" |menu: breakfast>
  history
  q

2015-02-22
  friends |Fred> => |Sam> + |Rob> + |Harry> + |Jack>
  friends |Sam> => |Rob> + |Jack>
  relevant-kets[friends]
  intn-relevant-kets[friends]
  age |Fred> => |23>
  dump
  intn-relevant-kets[age,friends] relevant-kets[friends] |>
  dump
  q

2015-02-22
  taste |orange> => |citrus> + |sweet> + |juicy>
  dump
  nothing-like |*> #=> 0 |_self>
  dump
  taste |banana> => nothing-like taste |orange>
  dump
  similar[taste] |orange>
  similar[taste] |banana>
  load H-I-pat-rec.sw
  dump
  context
  relevant-kets[pixels] |>
  |list> => relevant-kets[pixels] |>
  dump
  simm |*> !=> 100 (|_self> + similar[pixels] |_self>)
  map[simm,similarity] "" |list>
  dump
  matrix[similarity]
  table[char,similarity] "" |list>
  history
  drop-simm |*> !=> drop-below[60] 100 (|_self> + similar[pixels] |_self>)
  map[drop-simm,drop-similarity] "" |list>
  matrix[drop-similarity]
  100 similar[pixels] |noisy: I2>
  save history
  history
  tidy-simm |*> !=> set-to[100] drop-below[0.6] (|_self> + similar[pixels] |_self>)
  map[tidy-simm,tidy-similarity] "" |list>
  matrix[tidy-similarity]
  history
  history
  q

2015-02-22
  friends |Fred> => |Sam> + |Rob> + |Harry> + |Jack>
  age |Fred> => |23>
  
  friends |Sam> => |Rob> + |Jack>
  
  dump
  height |Maz> => |cm: 165>
  dump
  relevant-kets[*] |>
  intn-relevant-kets[*] relevant-kets[*] |>
  intn-relevant-kets[*,age] relevant-kets[*] |>
  |list> => relevant-kets[*] |>
  intn-relevant-kets[*,height] "" |list>
  intn-relevant-kets[*,friends,age] "" |list>
  context
  history
  load H-I-pat-rec.sw
  |list> => relevant-kets[*] |>
  dump
  history
  
  
  
  simm |*> !=> 100 (|_self> + similar[pixels] |_self>)
  drop-simm |*> !=> drop-below[60] 100 (|_self> + similar[pixels] |_self>)
  tidy-simm |*> !=> set-to[100] drop-below[0.6] (|_self> + similar[pixels] |_self>)
  map[simm,similarity] "" |list>
  map[drop-simm,drop-similarity] "" |list>
  map[tidy-simm,tidy-similarity] "" |list>
  history
  
  matrix[similarity]
  matrix[drop-similarity]
  matrix[tidy-similarity]
  dump
  history
  pixels |average H> => pixels |letter: H> + pixels |noisy: H> + pixels |noisy: H2>
  |list> => relevant-kets[*] |>
  map[simm,similarity] "" |list>
  matrix[similarity]
  dump
  q

2015-02-22
  ED(3|x>,4|y>)
  q

2015-02-22
  ED(3|x>,4|y>)
  q

2015-02-22
  q

2015-02-22
  ED(3|x>,4|y>)
  q

2015-02-22
  ED(3|x>,4|y>)
  round[0] ED(3|x>,4|y>)
  x-1 |x: *> #=> arithmetic(|_self>,|->,|x: 1>)
  x+1 |x: *> #=> arithmetic(|_self>,|+>,|x: 1>)
  smooth |x: *> #=> 0.25 x-1 |_self> + 0.5 |_self> + 0.25 x+1 |_self>
  x-1 |x: *> !=> arithmetic(|_self>,|->,|x: 1>)
  x+1 |x: *> !=> arithmetic(|_self>,|+>,|x: 1>)
  smooth 16 |x: 50>
  sp-as-list smooth 16 |x: 50>
  sp-as-list smooth^50 16 |x: 50>
  history
  dump
  sp-as-list smooth^50 16 |x: 50>
  history
  sp-as-list smooth^500 16 |x: 50>
  history
  q

2015-02-23
  load H-I-pat-rec.sw
  pixels |average H> => pixels |letter: H> + pixels |noisy: H> + pixels |noisy: H2>
  |list> => relevant-kets[pixels] |>
  dump
  
  simm |*> #=> 100 (|_self> + similar[pixels] |_self>)
  
  dump
  map[simm,similarity] "" |list>
  matrix[similarity]
  q

2015-02-23
  factor |37>
  factor |number: 21>
  q

2015-02-23
  load test-map-on-load.sw
  dump
  q

2015-02-23
  load test-map-on-load.sw
  dump
  q

2015-02-23
  load improved-fragment-webpages--post-processing.sw
  matrix[abc-similarity]
  q

2015-02-23
  load improved-fragment-webpages--post-processing.sw
  matrix[abc-similarity]
  history
  q

2015-02-23
  random |*> #=> pick-elt (|yes> + |no>)
  random |x>
  .
  .
  such-that[random] split |a b c d e f g h i j k>
  .
  .
  .
  history
  such-that[random] split |a b c d e f g h i j k>
  .
  .
  q

2015-02-23
  load improved-fragment-webpages--post-processing.sw
  matrix[abc-similarity]
  history
  q

2015-02-23
  load improved-fragment-webpages--post-processing.sw
  matrix[youtube-similarity]
  matrix[wikipedia-similarity]
  matrix[smh-similarity]
  matrix[slashdot-similarity]
  matrix[adelaidenow-similarity]
  history
  q

2015-02-23
  foo |x> => split |a b c d e f g h>
  bah |y> => split |a c d h>
  bah |z> => split |b c d>
  dump
  similar[foo,bah] |x>
  q

2015-02-23
  load improved-fragment-webpages--post-processing.sw
  relevant-kets[average-hash-4B] |>
  similar[hash-4B,average-hash-4B] |abc 1>
  100  similar[hash-4B,average-hash-4B] |abc 1>
  100 similar[hash-4B,average-hash-4B] |abc 11>
  100 similar[hash-4B,average-hash-4B] |smh 11>
  100 similar[hash-4B,average-hash-4B] |wikipedia 11>
  100 similar[hash-4B,average-hash-4B] |adelaidenow 11>
  100 similar[hash-4B,average-hash-4B] |slashdot 11>
  history
  q

2015-02-23
  load improved-fragment-webpages--post-processing.sw
  matrix[result]
  history
  save improved-fragment-webpages--post-processing--saved-results.sw
  matrix[result]
  matrix[count-1-hash-4B]
  .
  table[page,count-1-hash-4B] relevant-kets[hash-4B] |>
  
  history
  q

2015-02-23
  load improved-fragment-webpages--post-processing.sw
  table[page,count-1-hash-4B] relevant-kets[count-1-hash-4B] |>
  matrix[result]
  save improved-fragment-webpages--post-processing--saved-results.sw
  history
  dump
  
  
  q

2015-02-24
  load improved-fragment-webpages--post-processing.sw
  matrix[tidy-result]
  save improved-fragment-webpages--post-processing--saved-results.sw
  matrix[tidy-result]
  11 6 |x>
  descrim (10|x> + 3|y>)
  discrim (10|x> + 3|y>)
  discrimination |*> #=> discrim result |_self>
  table[page,discrimination] relevant-kets[result] |>
  history
  q

2015-02-24
  load H-I-pat-rec.sw
  |list> => relevant-kets[pixels] |>
  simm |*> #=> 100 self-similar[pixels] |_self>
  map[simm,similarity] "" |list>
  matrix[similarity]
  history
  drop-simm |*> #=> drop-below[60] 100 self-similar[pixels] |_self>
  tidy-simm |*> #=> set-to[100] drop-below[0.6] self-similar[pixels] |_self>
  map[drop-simm,drop-similarity] "" |list>
  map[tidy-simm,tidy-similarity] "" |list>
  matrix[drop-similarity]
  q

2015-02-25
  |vector> => 91.7|a> + 37.8|b> + 29.7|c> + 28.7|d>
  "" |vector>
  dump
  discrim-drop[30] "" |vector>
  q

2015-02-25
  load english-word-list.sw
  
  chars |*> #=> chars |_self>
  rel-kets[*}
  rel-kets[*]
  map[chars] "" |English: word: list>
  save simple-english-spell-check-dictionary.sw
  select[1,15] 100 similar[chars] |elephant>
  history
  to-number 37|x>
  my-chars |elephant> => chars |_self>
  coeffs |*> #=> push-float |_self>
  table[word,coeffs] select[1,10] 100 similar[my-chars,chars] |elephant>
  history
  q

2015-02-25
  do-you-know |x>
  equal(|a>,|a> + |b>)
  equal[30] |number: 30>
  
  [A
  
  q

2015-02-26
  equal(|a>,|a> + |b>)
  equal[30] |number: 30>
  equal[30] |number: 31>
  is-equal[30] |number: 30>
  is-in-range[3,7] |5>
  is-in-range[3,7] |15>
  in-range[3,7] |5>
  in-range[3,7] |15>
  q

2015-02-27
  load early-us-presidents.sw
  dump
  in-office-in-1825 |*> #=> is-equal[1825] president-era |_self>
  such-that[in-office-in-1825] "" |early US Presidents: _list>
  history
  is-third-president |*> #=> is-equal[3] president-number |_self>
  such-that[is-third-president] "" |early US Presidents: _list>
  history
  party such-that[is-third-president] "" |early US Presidents: _list>
  history
  such-that[is-third-president] "" |early US Presidents: _list>
  party such-that[is-third-president] "" |early US Presidents: _list>
  random |*> #=> pick-elt (|yes> + |no>)
  such-that[random] split |a b c d e f g h i j k>
  such-that[random] split |a b c d e f g h i j k>
  such-that[random] split |a b c d e f g h i j k>
  history
  such-that[random] split |a b c d e f g h i j k>
  history
  such-that[random] split |a b c d e f g h i j k>
  .
  equal[1825] president-era "" |early US Presidents: _list>
  load breakfast-menu.sw
  dump
  history
  is-under-6-dollars |*> #=> is-less-than[6] price |_self>
  table[food,*] "" |menu: breakfast>
  table[food,*] "" |menu: breakfast>
  history
  table[food,price,calories,description] such-that[is-under-6-dollars] "" |menu: breakfast>
  history
  is-under-700-calories |*> #=> is-less-than[700] calories |_self>
  table[food,calories,price,description] such-that[is-under-700-calories] "" |menu: breakfast>
  history
  table[food,price,calories,description] sort-by[price] such-that[is-under-6-dollars] "" |menu: breakfast>
  history
  table[food,calories,price,description] sort-by[calories] such-that[is-under-700-calories] "" |menu: breakfast>
  round[2] |pi: 3.14159265>
  round[3] 37|x>
  round[7] |a: b: c>
  history
  q

2015-03-01
  range-is-late |time: 24h: *> #=> do-you-know drop (in-range[2230,2400] pop-float |_self> + in-range[0,330] pop-float |_self>)
  improved-range-is-late |time: 24h: *> #=> is-in-range[2230,2400] |_self> + is-in-range[0,330] |_self>
  
  dump
  table[time,range-is-late,improved-range-is-late] range(|time: 24h: 100>,|time: 24h: 2400>,|100>)
  
  [A
  history
  range-is-late |time: 24h: *> #=> do-you-know drop (sigmoid-in-range[2230,2400] pop-float |_self> + sigmoid-in-range[0,330] pop-float |_self>)
  table[time,range-is-late,improved-range-is-late] range(|time: 24h: 100>,|time: 24h: 2400>,|100>)
  history
  fixed-is-liat |time: 24h: *> #=> do-you-know (in-range[2230,2400] |_self> + in-range[0,330] |_self>)
  table[time,range-is-late,improved-range-is-late,fixed-is-liat] range(|time: 24h: 100>,|time: 24h: 2400>,|100>)
  history
  history 1000
  q

2015-03-01
  to-coeff 37 |a: b: c>
  load shopping-basket-example.sw
  dump
  history
  q

2015-03-01
  load 
  load shopping-basket-example.sw
  table[basket,coeff] 100 self-similar[basket] |f>
  history
  q

2015-03-01
  load shopping-basket-example.sw
  
  table[basket,coeff] 100 self-similar[basket] |f>
  q

2015-03-02
  load improved-imdb.sw
  table[actor,coeff,movies] select[1,15] 100 self-similar[movies] |actor: Tom Cruise>
  history
  table[actor,coeff] select[1,15] 100 self-similar[movies] |actor: Tom Cruise>
  history
  how-many movies |actor: Tom Cruise>
  how-many movies |actor: Nicole Kidman>
  how-many common[movies] (|actor: Tom Crusie> + |actor: Nicole Kidman>
  how-many common[movies] (|actor: Tom Cruise> + |actor: Nicole Kidman>)
  common[movies] (|actor: Tom Cruise> + |actor: Nicole Kidman>)
  table[movies] common[movies] (|actor: Tom Cruise> + |actor: Nicole Kidman>)
  movies 
  movies |actor: Matt Damon>
  table[actor,coeff] select[1,15] 100 self-similar[movies] |actor: Matt Damon>
  history
  table[movies] common[movies] (|actor: Matt Damon> + |actor: Ben Affleck>)
  history
  table[movies] common[movies] (|actor: Matt Damon> + |actor: George Clooney>)
  history
  table[actor,coeff] select[1,15] 100 self-similar[movies] |actor: Morgan (I) Freeman>
  history
  
  table[movies] common[movies] (|actor: Morgan (I) Freeman> + |actor: Clint Eastwood>)
  history
  table[movie,coeff] select[1,15] 100 self-similar[actors] |move: 
  history
  actors |movie: Pulp Fiction (1994)>
  table[movie,coeff] select[1,15] 100 self-similar[actors] |movie: Pulp Fiction (1994)>
  history
  
  table[actors] common[actors] (|movie: Pulp Fiction (1994)> + |movie: Reservoir Dogs (1992)>)
  history
  table[movie,coeff] select[1,15] 100 self-similar[actors] |movie: Star Trek: The Motion Picture (1979)>
  history
  
  table[actor] common[actors] select[1,6] self-similar[actors] |movie: Star Trek: The Motion Picture (1979)>
  history
  save history

2015-03-02
  load improved-imdb.sw
  table[actor,coeff,movies] select[1,15] 100 self-similar[movies] |actor: Tom Cruise>
  history
  table[actor,coeff] select[1,15] 100 self-similar[movies] |actor: Tom Cruise>
  history
  how-many movies |actor: Tom Cruise>
  how-many movies |actor: Nicole Kidman>
  how-many common[movies] (|actor: Tom Crusie> + |actor: Nicole Kidman>
  how-many common[movies] (|actor: Tom Cruise> + |actor: Nicole Kidman>)
  common[movies] (|actor: Tom Cruise> + |actor: Nicole Kidman>)
  table[movies] common[movies] (|actor: Tom Cruise> + |actor: Nicole Kidman>)
  movies 
  movies |actor: Matt Damon>
  table[actor,coeff] select[1,15] 100 self-similar[movies] |actor: Matt Damon>
  history
  table[movies] common[movies] (|actor: Matt Damon> + |actor: Ben Affleck>)
  history
  table[movies] common[movies] (|actor: Matt Damon> + |actor: George Clooney>)
  history
  table[actor,coeff] select[1,15] 100 self-similar[movies] |actor: Morgan (I) Freeman>
  history
  
  table[movies] common[movies] (|actor: Morgan (I) Freeman> + |actor: Clint Eastwood>)
  history
  table[movie,coeff] select[1,15] 100 self-similar[actors] |move: 
  history
  actors |movie: Pulp Fiction (1994)>
  table[movie,coeff] select[1,15] 100 self-similar[actors] |movie: Pulp Fiction (1994)>
  history
  
  table[actors] common[actors] (|movie: Pulp Fiction (1994)> + |movie: Reservoir Dogs (1992)>)
  history
  table[movie,coeff] select[1,15] 100 self-similar[actors] |movie: Star Trek: The Motion Picture (1979)>
  history
  
  table[actor] common[actors] select[1,6] self-similar[actors] |movie: Star Trek: The Motion Picture (1979)>
  history
  save history
  how-many-movies |*> #=> how-many movies |_self>
  how-many-movies |actor: Tom Cruise>
  rank-table[actor,how-many-movies] select[1,200] reverse sort-by[how-many-movies] rel-kets[movies] |>
  
  history
  save history

2015-03-03
  load bots.sw
  table[name,supported-ops] rel-kets[name] |>
  .
  table[name,*] rel-kets[name]
  .
  split |person: Fred Smith>
  history
  split extract-value |person: Fred Smith>
  q

2015-03-03
  load improved-imdb.sw
  table[actor,coeff,movies] select[1,15] 100 self-similar[movies] |actor: Tom Cruise>
  history
  table[actor,coeff] select[1,15] 100 self-similar[movies] |actor: Tom Cruise>
  history
  how-many movies |actor: Tom Cruise>
  how-many movies |actor: Nicole Kidman>
  how-many common[movies] (|actor: Tom Crusie> + |actor: Nicole Kidman>
  how-many common[movies] (|actor: Tom Cruise> + |actor: Nicole Kidman>)
  common[movies] (|actor: Tom Cruise> + |actor: Nicole Kidman>)
  table[movies] common[movies] (|actor: Tom Cruise> + |actor: Nicole Kidman>)
  movies 
  movies |actor: Matt Damon>
  table[actor,coeff] select[1,15] 100 self-similar[movies] |actor: Matt Damon>
  history
  table[movies] common[movies] (|actor: Matt Damon> + |actor: Ben Affleck>)
  history
  table[movies] common[movies] (|actor: Matt Damon> + |actor: George Clooney>)
  history
  table[actor,coeff] select[1,15] 100 self-similar[movies] |actor: Morgan (I) Freeman>
  history
  
  table[movies] common[movies] (|actor: Morgan (I) Freeman> + |actor: Clint Eastwood>)
  history
  table[movie,coeff] select[1,15] 100 self-similar[actors] |move: 
  history
  actors |movie: Pulp Fiction (1994)>
  table[movie,coeff] select[1,15] 100 self-similar[actors] |movie: Pulp Fiction (1994)>
  history
  
  table[actors] common[actors] (|movie: Pulp Fiction (1994)> + |movie: Reservoir Dogs (1992)>)
  history
  table[movie,coeff] select[1,15] 100 self-similar[actors] |movie: Star Trek: The Motion Picture (1979)>
  history
  
  table[actor] common[actors] select[1,6] self-similar[actors] |movie: Star Trek: The Motion Picture (1979)>
  history
  save history
  how-many-movies |*> #=> how-many movies |_self>
  how-many-movies |actor: Tom Cruise>
  rank-table[actor,how-many-movies] select[1,200] reverse sort-by[how-many-movies] rel-kets[movies] |>
  
  history
  save history
  
  how-many-movies |actor: Tom Hanks>
  how-many-movies |actor: Julia Roberts>
  how-many-movies |actor: Julia (I) Roberts>
  history
  table[actor] common[actors] select[1,4] self-similar[actors] |movie: Star Trek: The Motion Picture (1979)>
  rank-table[actor,how-many-movies] select[1,200] sort-by[how-many-movies] rel-kets[movies] |>
  q

2015-03-03
  extract-year |movie: fish (1987)>
  q

2015-03-03
  load top-level-domains.sw
  dump
  table[country,top-level-domain] ket-sort rel-kets[top-level-domain] |>
  history
  table[country,top-level-domain] sort-by[top-level-domain] rel-kets[top-level-domain] |>
  history
  country |to>
  country |so>
  country |ly>
  tld |Brazil>
  country tld |Brazil>
  q

2015-03-03
  q

2015-03-03
  ket-length |abcde>
  ket-length |>
  ket-length |fish>
  q

2015-03-03
  extract-movie-year |movie: fish (1979)>
  load impro	
  load improved-imdb.sw
  extract-movie-year |movie: American Pimp (1999)>
  extract-year |*> #=> extract-movie-year |_self>
  extract-year |movie: American Pimp (1999)>
  map[extract-year,year] rel-kets[actors] |>
  save improved-imdb-year.sw
  history
  extract-movie-year |movie: example (2015)>
  ket-length |fish>
  q

2015-03-04
  load top-level-domains.sw
  is-longer-than-2 |*> is-greater-than[2] ket-length |_self>
  is-longer-than-2 |*> #=> is-greater-than[2] ket-length |_self>
  is-longer-than-2 |aero>
  is-longer-than-2 |ab>
  table[org,top-level-domain] sort-by[top-level-domain] such-that[is-longer-than-2] ket-kets[top-level-domain] |>
  history
  tld-is-longer-than-2 |*> #=> is-greater-than[2] ket-length top-level-domain |_self>
  table[org,top-level-domain] sort-by[top-level-domain] such-that[tld-is-longer-than-2] rel-kets[top-level-domain] |>
  history
  table[org,top-level-domain] sort-by[top-level-domain] such-that[tld-is-longer-than-2] rel-kets[top-level-domain] |>
  history
  q

2015-03-04
  running-time foo |x> => |y>
  dump
  foo |x> => |y>
  q

2015-03-04
  running-time foo |x> => |y>
  q

2015-03-04
  running-time foo |x> => |y>
  q

2015-03-04
  running-time foo |x> => |y>
  q

2015-03-04
  running-time foo |x> => |y>
  q

2015-03-04
  running-time |x> => |y>
  q

2015-03-04
  running-time |x> => |y>
  q

2015-03-04
  running-time |x> => |y>
  q

2015-03-04
  running-time |x> => |y>
  q

2015-03-04
  running-time |x> => |y>
  q

2015-03-04
  running-time |x> => |y>
  load fibonacci.sw
  dump
  running-time fib-ratio |15>
  running-time fib-ratio |20>
  load simple-network.sw
  dump
  running-time matrix[O]
  q

2015-03-04
  load simple-network.sw
  running-time matrix[O]
  load fibonacci.sw
  running-time fib-ratio |30>
  [Bq
  [A
  
  q

2015-03-04
  load improved-imdb-year.sw
  ket-length |movie: Pulp Fiction (1994)>
  ket-length extract-value |movie: Pulp Fiction (1994)>
  movie-length |*> #=> arithmetic(ket-length extract-value |_self>,|->,|number: 7>)
  movie-length |movie: Pulp Fiction (1994)>
  history
  movie-name-length |*> #=> arithmetic(ket-length extract-value |_self>,|->,|number: 7>)
  movie-name-length |movie: Pulp Fiction (1994)>
  rank-table[movie,movie-name-length] select[1,200] reverse sort-by[movie-name-length] rel-kets[actors] |>
  
  history
  table[movie] select[1,200] reverse sort-by[movie-name-length] rel-kets[actors] |>
  year |movie: Pulp Fiction (1994)>
  table[movie] sort-by[year] common[movies] (|actor: Matt Damon> + |actor: Ben Affleck>)
  history
  q

2015-03-04
  table[algebra] algebra(3|x*x> + 7|x> + |13>,|*>,5|y>)
  table[algebra,coeff] algebra(3|x*x> + 7|x> + |13>,|*>,5|y>)
  f |*> #=> 3 algebra(""|_self>,|^>,|2>) + 5 ""|_self> + 19| >
  |x> => |a> + |b>
  table[algebra,coeff,f] |x>
  |y> => |a> + |b> + |c>
  table[x,f] split |x y>
  table[base,coeff] to-base(|213>,|2>)
  table[base,coeff] to-base(|359822007>,|10>)
  history
  q

2015-03-04
  table[base,coeff] to-base(|359822007>,|10>)
  table[base,coeff] to-base(|213>,|2>)
  table[base,coeff] to-base(|255>,|2>)
  history
  table[base,coeff] to-base(|213>,|2>)
  history
  table[base,coeff] to-base(|359822007>,|10>)
  load new-george.sw
  table[person,*] |person: George>
  .
  factor |number: 30>
  factor |*> #=> factor |_self>
  table[number,factor] range(|number: 1>,|number: 200>)
  
  history
  how-many-factors |*> #=> how-many factor |_self>
  table[number,factor,how-many-factors] range(|number: 1>,|number: 200>)
  history
  prime |*> #=> if(is-equal[1] how-many-factors |_self>,|prime>,how-many-factors|_self>)
  prime |number: 3>
  prime |number: 30>
  history
  table[number,factor,prime] range(|number: 1>,|number: 200>)
  
  history
  factor |number: 4>
  how-many factor |number: 4>
  count-sum factor |number: 4>
  history
  count-factors |*> #=> count-sum factor |_self>
  prime |*> #=> if(is-equal[1] count-factors |_self>,|prime>,count-factors|_self>)
  prime |number: 7>
  prime |number: 4>
  history
  table[number,factor,prime] range(|number: 1>,|number: 200>)
  
  count |number: 3>
  count-sum |number: 3>
  history
  q

2015-03-04
  height |everest> => |km: 8>
  height |action man> => push-float 4 pop-float height |everest>
  history
  q

2015-03-04
  load fibonacci.sw
  dump
  fib |*> #=> arithmetic( fib n-1 |_self>, |+>, fib n-2 |_self>)
  running-time fib-ratio |33>
  history
  fib |*> !=> arithmetic( fib n-1 |_self>, |+>, fib n-2 |_self>)
  running-time fib-ratio |33>
  dump
  running-time fib-ratio |33>
  dump
  
  running-time fib-ratio |33>
  history
  q

2015-03-04
  running-time foo|x> => |y>
  fib |0> => |0>
  
  fib |1> => |1>
  
  n-1 |*> #=> arithmetic(|_self>,|->,|1>)
  n-2 |*> #=> arithmetic(|_self>,|->,|2>)
  fib |*> #=> arithmetic( fib n-1 |_self>, |+>, fib n-2 |_self>)
  fib-ratio |*> #=> arithmetic( fib |_self> , |/>, fib n-1 |_self> )
  
  dump
  fib |*> !=> arithmetic( fib n-1 |_self>, |+>, fib n-2 |_self>)
  running-time fib-ratio |33>
  .
  dump
  q

2015-03-04
  load fibonacci.sw
  running-time fib-ratio |20>
  
  
  running-time fib-ratio |33>
  history
  dump
  q

2015-03-04
   height |everest> => |km: 8>
  height |action man> => times[4] height |everest>
  dump
  history
  height |some mountain> => times[0.33333333] height |everest>
  dump
  history
  foo |x> => times[7] split |a b c d e>
  dump
  foo |y> => 7 split |a b c d e>
  dump
  q

2015-03-04
  count-sum 37.0|fish>
  count-sum (3|x> + 2|y>)
  count-factors |*> #=> count-sum factor |_self>
  prime |*> #=> if(is-equal[1] count-factors |_self>,|prime>,count-factors|_self>)
  table[number,factor,prime] range(|number: 1>,|number: 200>)
  
  factor |*> #=> factor |_self>
  table[number,factor,prime] range(|number: 1>,|number: 200>)
  history
  factors |*> #=> factor |_self>
  table[number,factors,prime] range(|number: 1>,|number: 400>)
  
  history
  table[number,factors,prime] range(|number: 1>,|number: 250>)
  history
  q

2015-03-04
  fib |0> => |0>
  
  fib |1> => |1>
  
  n-1 |*> #=> arithmetic(|_self>,|->,|1>)
  n-2 |*> #=> arithmetic(|_self>,|->,|2>)
  fib |*> !=> arithmetic( fib n-1 |_self>, |+>, fib n-2 |_self>)
  fib-ratio |*> #=> arithmetic( fib |_self> , |/>, fib n-1 |_self> )
  
  fib |2> => |1>
  
  fib |3> => |2>
  
  fib |4> => |3>
  dump
  running-time fib-ratio |40>
  q

2015-03-04
  table[base,coeff] to-base(|10973498714>,|2>)
  
  
  table[base,coeff] to-base(|10973498714>,|2>)
  to-comma-number |10983>
  history
  table[base,coeff] to-comma-number to-base(|10973498714>,|2>)
  to-comma-number 37|190723>
  history
  q

2015-03-05
  table[base,coeff] to-comma-number to-base(|10973498714>,|2>)
  history
  context
  q

2015-03-06
  load improved-fragment-webpages.sw
  matrix[count-1-hash-64k]
  
  table[page,count-1-hash-64k] rel-kets[hash-64k] |>
  
  .
  table[page,count-1-hash-64k] rel-kets[hash-64k] |>
  history
  table[page,count-1-hash-4B] rel-kets[hash-4B] |>
  history
  table[page,count-1-hash-64k,count-1-hash-1M,count-1-hash-4B] rel-kets[hash-64k] |>
  q

2015-03-06
  pretty-print-algebra 3|x*y>
  q

2015-03-06
  pretty-print-algebra 3|x*y>
  pretty-print-algebra (3|x*x> + 2|y> + |z> + 13| >)
  pretty-print-algebra 2|y>
  pretty-print-algebra |z>
  q

2015-03-06
  display-algebra |z>
  q

2015-03-06
  display-algebra |z>
  q

2015-03-06
  display-algebra (3|x*x> + 2|y> + |z> + 13| >)
  display-algebra 3.141592|pi>
  
  display-algebra (3|x*x> + 2|y> + |z> + 13| >)
  
  display-algebra (3|x> + 2|> + 7|z>)
  q

2015-03-06
  display-algebra (3|x*x> + 2|y> + |z> + 13| >)
  display-algebra 3.7|fish>
  display-algebra 3|>
  display-algebra 3| >
  display-algebra | >
  display-algebra algebra(2|x*x> + 11|x> + 19| >,|*>,11|y> + 13| >)
  f |*> #=> 3 algebra(""|_self>,|^>,|2>) + 5 ""|_self> + 19| >
  |x> => |a>
  |y> => |a> + |b>
  |z> => |a> + |b> + |c>
  display-f |*> #=> display-algebra f |_self>
  display-f |x>
  table[ket,display-f] split |x y z>
  history
  factors |*> #=> display-algebra factor |_self>
  count-factors |*> #=> count-sum factor |_self>
  prime |*> #=> if(is-equal[1] count-factors |_self>,|prime>,count-factors|_self>)
  table[number,factors,prime] range(|number: 1>,|number: 250>)
  history
  factor |number: 30>
  display-algebra factor |number: 30>
  extract-value display-algebra factor |number: 30>
  display-algebra extract-value factor |number: 30>
  history
  factors |*> #=> display-algebra extract-value factor |_self>
  table[number,factors,prime] range(|number: 1>,|number: 250>)
  history
  save history

2015-03-06
  display-algebra (3|x*x> + 2|y> + |z> + 13| >)
  display-algebra 3.7|fish>
  display-algebra 3|>
  display-algebra 3| >
  display-algebra | >
  display-algebra algebra(2|x*x> + 11|x> + 19| >,|*>,11|y> + 13| >)
  f |*> #=> 3 algebra(""|_self>,|^>,|2>) + 5 ""|_self> + 19| >
  |x> => |a>
  |y> => |a> + |b>
  |z> => |a> + |b> + |c>
  display-f |*> #=> display-algebra f |_self>
  display-f |x>
  table[ket,display-f] split |x y z>
  history
  factors |*> #=> display-algebra factor |_self>
  count-factors |*> #=> count-sum factor |_self>
  prime |*> #=> if(is-equal[1] count-factors |_self>,|prime>,count-factors|_self>)
  table[number,factors,prime] range(|number: 1>,|number: 250>)
  history
  factor |number: 30>
  display-algebra factor |number: 30>
  extract-value display-algebra factor |number: 30>
  display-algebra extract-value factor |number: 30>
  history
  factors |*> #=> display-algebra extract-value factor |_self>
  table[number,factors,prime] range(|number: 1>,|number: 250>)
  history
  save history
  strange-int |number: 8>
  strange-int |*> #=> strange-int |_self>
  table[number,factors,strange-int,prime] range(|number: 1>,|number: 400>)
  save history

2015-03-06
  
  load improved-fragment-webpages.sw
  delta-1M-64k |*> #=> arithmetic(count-1-hash-1M|_self>,|->,count-1-hash-64k|_self>)
  delta-1M-64k |youtube 11>
  delta-4B-1M |*> #=> arithmetic(count-1-hash-4B|_self>,|->,count-1-hash-1M|_self>)
  table[page,count-1-hash-64k,delta-1M-64k,delta-4B-1M] rel-kets[hash-64k] |>
  
  history
  table[page,count-1-hash-64k,delta-1M-64k,delta-4B-1M] rel-kets[hash-64k] |>
  history
  load create-average-website-fragments.sw
  dump |*> 
  count-1-hash-64k |*> #=> count hash-64k |_self>
  count-1-hash-1M |*> #=> count hash-1M |_self>
  count-1-hash-4B |*> #=> count hash-4B |_self>
  
  dump |*> 
  |ave list> => |average abc> + |average adelaidenow> + |average slashdot> + |average smh> + |average wikipedia> + |average youtube>
  
  table[page,count-1-hash-64k,count-1-hash-1M,count-1-hash-4B] "" |ave list>
  history
  table[page,count-1-hash-64k,delta-1M-64k,delta-4B-1M] "" |ave list>
  history
  table[page,count-1-hash-64k,count-1-hash-1M,count-1-hash-4B] "" |ave list>
  history
  table[page,count-1-hash-64k,delta-1M-64k,delta-4B-1M] "" |ave list>
  count-hash-64k |*> #=> count hash-64k |_self>
  count-hash-1M |*> #=> count hash-1M |_self>
  count-hash-4B |*> #=> count hash-4B |_self>
  
  delta-1M-64k |*> #=> arithmetic(count-hash-1M|_self>,|->,count-hash-64k|_self>)
  delta-4B-1M |*> #=> arithmetic(count-hash-4B|_self>,|->,count-hash-1M|_self>)
  
  dump |*> 
  table[page,count-hash-64k,count-hash-1M,count-hash-4B] "" |ave list>
  history
  table[page,count-hash-64k,delta-1M-64k,delta-4B-1M] "" |ave list>
  
  load create-website-similarity-matrices.sw
  matrix[abc-similarity]
  matrix[adelaidenow-similarity]
  matrix[slashdot-similarity]
  matrix[smh-similarity]
  matrix[wikipedia-similarity]
  matrix[youtube-similarity]
  history
  history 1000
  load create-website-pattern-recognition-matrix.sw
  matrix[result]
  load create-website-pattern-recognition-matrix.sw
  matrix[result]
  q

2015-03-07
  load blog-george.sw
  display
  history
  F |*> #=> F |_self>
  K |*> #=> K |_self>
  history
  table[C,F,K] range(|C: 0>,|C: 100>,|10>)
  history
  
  age |person: Emma> => |age: 12>
  
  age |person: Fred> => |age: 17>
  
  age |person: Sam> => |age: 18>
  
  age |person: Liz> => |age: 19>
  
  age |person: Jack> => |age: 20>
  dump
  is-teenager |person: *> #=> do-you-know drop sigmoid-in-range[13,19] pop-float age |_self>
  is-adult |person: *> #=> do-you-know drop-below[18] pop-float age|_self>
  table[person,is-teenager,is-adult] rel-kets[age]
  history
  table[person,age,is-teenager,is-adult] rel-kets[age] |>
  history
  table[person,age,is-teenager,is-adult] sort-by[age] rel-kets[age] |>
  dump
  q

2015-03-07
  F |C: 40>
  q

2015-03-10
  load improved-fragment-webpages.sw
  load create-average-website-fragments.sw
  history
  load create-website-pattern-recognition-matrix.sw
  matrix[result]
  history
  matrix[tidy-result]
  
  discrimination |*> #=> discrim result |_self>
  table[page,discrimination] rel-kets[result] |>
  q

2015-03-10
  director |movie: Avatar> => |person: James Cameron>
  genre |movie: Avatar> => |genre: science fiction>
  trailer |movie: Avatar> => |url: ../movies/avatar-theatrical-trailer.html>
  dump
  table[movie,director,genre,trailer] |movie: Avatar>
  birth-date |person: James Cameron> => |date: 1954-08-16>
  table[director,birth-date] director |movie: Avatar>
  dump
  load improved-fragment-webpages.sw
  categorize[hash-4B,0.7,categories]
  history
  dump |categories>
  supported-ops |categories>
  row |*> #=> apply(|_self>,|categories>)
  table[category,row] supported-ops |categories>
  history
  websites |*> #=> apply(|_self>,|categories>)
  table[category,websites] supported-ops |categories>
  factor |number: 120>
  history
  |null> -> table[category,websites] ops |categories>
  "" |null>
  |null> #=> table[category,websites] ops |categories>
  "" |null>
  .
  history
  -- woot! the idea worked! we no longer need the idea of saving/loading histories to save typing table types.
  -- now just define it: |my foo table> #=> table[...]; then "" |my foo table> to invoke it.
  -- ie, we can save and load these as sw files. Very useful!
  save history

2015-03-11
  running-time foo |x> => |y>
  load fibonacci.sw
  running-time fib |13>
  running-time fib |20>
  q

2015-03-11
  running-time foo |x> => |y>
  load fibonacci.sw
  dump
  running-time fib |20>
  .
  history
  running-time fib |21>
  q

2015-03-11
  director |movie: Avatar> => |person: James Cameron>
  genre |movie: Avatar> => |genre: science fiction>
  trailer |movie: Avatar> => |url: ../movies/avatar-theatrical-trailer.html>
  dump
  table[movie,director,genre,trailer] |movie: Avatar>
  birth-date |person: James Cameron> => |date: 1954-08-16>
  table[director,birth-date] director |movie: Avatar>
  dump
  load improved-fragment-webpages.sw
  categorize[hash-4B,0.7,categories]
  history
  dump |categories>
  supported-ops |categories>
  row |*> #=> apply(|_self>,|categories>)
  table[category,row] supported-ops |categories>
  history
  websites |*> #=> apply(|_self>,|categories>)
  table[category,websites] supported-ops |categories>
  factor |number: 120>
  history
  |null> -> table[category,websites] ops |categories>
  "" |null>
  |null> #=> table[category,websites] ops |categories>
  "" |null>
  .
  history
  -- woot! the idea worked! we no longer need the idea of saving/loading histories to save typing table types.
  -- now just define it: |my foo table> #=> table[...]; then "" |my foo table> to invoke it.
  -- ie, we can save and load these as sw files. Very useful!
  save history
  history
  context
  q

2015-03-11
  pattern |a> => |x0>
  M |a> => |1>
  
  pattern |b> => |x1>
  M |b> => |1>
  
  pattern |c> => 0|x0>
  M |c> => |0>
  
  pattern |d> => |x0> + |x1>
  M |d> => |0>
  
  input-pattern |u> => |x0>
  input-pattern |v> => |x1>
  input-pattern |x> => 0|x0> + 0|x1>
  input-pattern |y> => |x0> + |x1>
  
  foo |*> #=> M drop-below[0.7] similar[input-pattern,pattern] |_self>
  dump
  table[ket,foo] split |u v x y>
  dump
  similar[input-pattern,pattern] |x>
  pattern |c> => 0.000000001|x0>
  input-pattern |x> => 0.000000001|x0>
  table[ket,foo] split |u v x y>
  context
  context AND
  pattern |a> => 0.0000001|x0>
  M |a> => |0>
  
  pattern |b> => |x1>
  M |b> => |0>
  
  pattern |c> => |x0>
  M |c> => |0>
  
  pattern |d> => |x0> + |x1>
  M |d> => |1>
  
  input-pattern |u> => 0.0000001|x0>
  input-pattern |v> => |x1>
  input-pattern |x> => |x0>
  input-pattern |y> => |x0> + |x1>
  dump
  history
  foo |*> #=> M drop-below[0.7] similar[input-pattern,pattern] |_self>
  table[ket,foo] split |u v x y>
  context
  context new
  pattern |a> => 0.0000001|x0>
  M |a> => |0>
  
  pattern |b> => |x1>
  M |b> => |0>
  
  pattern |c> => |x0>
  M |c> => |0>
  
  pattern |d> => |x0> + |x1>
  M |d> => |1>
  
   
  
  -- now define some example input patterns:
  
  input-pattern |u> => 0.0000001|x0>
  input-pattern |v> => |x1>
  input-pattern |x> => |x0>
  input-pattern |y> => |x0> + |x1>
  
   
  
  -- now define our h:
  
  h |*> #=> M drop-below[0.7] similar[input-pattern,pattern] |_self>
  dump
  table[input,h] (|u> + |v> + |x> + |y>)
  history
  pattern |a> => |x0>
  pattern |b> => |x0> + |x2>
  pattern |c> => |x0> + |x1>
  pattern |d> => |x0> + |x1> + |x2>
  M |a> => |1>
  
  M |b> => |1>
  M |c> => |1>
  
  M |d> => |0>
  
   
  
  -- now define some example input patterns:
  
  input-pattern |u> => |x0>
  input-pattern |v> => |x0> + |x2>
  input-pattern |x> => |x0> + |x1>
  input-pattern |y> => |x0> + |x1> + |x2>
  dump
  table[input,h] split |U v x y>
  table[input,h] split |u v x y>
  history
  history 1000
  pattern |a> => |x0>
  pattern |b> => |x1>
  pattern |c> => 0.000001 |x0>
  pattern |d> => |x0> + |x1>
  M |a> => |1>
  M |b> => |1>
  M |c> => |0>
  M |d> => |0>
  
  -- now define some example input patterns:
  pattern |a> => |x0>
  pattern |b> => |x1>
  pattern |c> => 0.000001 |x0>
  pattern |d> => |x0> + |x1>
  
  dump
  table[input,h] split |u v x y>
  pattern |u> => |x0>
  pattern |v> => |x1>
  pattern |x> => 0.000001 |x0>
  pattern |y> => |x0> + |x1>
  
  dump
  table[input,h] split |u v x y>
  dump
  input-pattern |u> => |x0>
  input-pattern |v> => |x1>
  input-pattern |x> => 0.000001 |x0>
  input-pattern |y> => |x0> + |x1>
  
  dump
  table[input,h] split |u v x y>
  dump
  input-pattern |z> => |x0> + 0.9|x1>
  table[input.h[H[H
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  dump
  table[input,h] split |u v x y z>
  dump
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  table[input,h] split |u v x y z>
  context
  history
  history 1000
  
  q

2015-03-11
  load improved-imdb-year.sw
  running-time table[actor,coeff] select[1,20] 100 self-similar[movies] |actor: Joel Edgerton>
  running-time foo |x> => |y>
  context
  context perceptron
  -- url: http://en.wikipedia.org/wiki/Perceptron
  |a> => |x: 0>
  |b> => |x: 0> + |x: 2>
  |c> => |x: 0> + |x: 1>
  |d> => |x: 0> + |x: 1> + |x: 2>
  dump
  |1> => |a> + |b> + |c>
  |2> => |d>
  dump
  |0> => |d>
  dump
  active-buffer[3,1] (|x: 0> + |x: 1>)
  active-buffer[3,1] (|x: 0> + |x: 1> + |x: 2>)
  history
  active-buffer[3,1]^2 (|x: 0> + |x: 1>)
  history
  active-buffer[3,1]^2 (|x: 0> + |x: 1> + |x: 2>)
  dump
  context
  context perceptron v2
   |a> => |x: 0>
  
   |b> => |x: 0> + |x: 2>
  
   |c> => |x: 0> + |x: 1>
  
   |d> => |x: 0> + |x: 1> + |x: 2>
  
   |1> => |a> + |b> + |c>
  
  
   |0> => |d>
  
  dump
  active-buffer[1,1] active-buffer[3,1] |x: 0>
  active-buffer[3,0.3] |x: 0>
  active-buffer[3,1] |x: 0>
  dump
  active-buffer[3,1] (|x: 0> + |x: 2>)
  active-buffer[3,1] (|x: 0> + |x: 1>)
  dump
  active-buffer[3,1] (|x: 0> + |x: 1> + |x: 2>)
  dump
  context
  context v3
  pattern |a> => |x: 0>
  pattern |b> => |x: 0> + |x: 2>
  
  pattern |c> => |x: 0> + |x: 1>
  
  pattern |d> => |x: 0> + |x: 1> + |x: 2>
  dump
  input-pattern |u> => |x: 0>
  
  input-pattern |v> => |x: 0> + |x: 2>
  
  input-pattern |x> => |x: 0> + |x: 1>
  
  input-pattern |y> => |x: 0> + |x: 1> + |x: 2>
  
  dump
  100 similar[input-pattern,pattern] |u>
  100 similar[input-pattern,pattern] |v>
  100 similar[input-pattern,pattern] |x>
  100 similar[input-pattern,pattern] |y>
  history
  active-buffer[1,0] similar[input-pattern,pattern] |y>
  active-buffer[3,0] similar[input-pattern,pattern] |y>
  similar[input-pattern,pattern] |y>
  drop-below[0.7] similar[input-pattern,pattern] |y>
  drop-below[0.7] similar[input-pattern,pattern] |v>
  dump
   |1> => |a> + |b> + |c>
  
   |0> => |d>
  dump
  history
  active-buffer[1,0] drop-below[0.7] similar[input-pattern,pattern] |y>
  active-buffer[1,0] drop-below[0.7] similar[input-pattern,pattern] |u>
  active-buffer[1,0] drop-below[0.7] similar[input-pattern,pattern] |v>
  active-buffer[1,0] drop-below[0.7] similar[input-pattern,pattern] |x>
  active-buffer[2,0] drop-below[0.7] similar[input-pattern,pattern] |x>
  dump
  foo |*> #=> clean active-buffer[1,0] drop-below[0.7] similar[input-pattern,pattern] |_self>
  table[ket,foo] split |u v x y>
  dump
  table[ket,foo] split |u v x y>
  dump
  M |a> => |1>
  M |b> => |1>
  M |c> => |1>
  M |d> => |0>
  history
  bah |*> #=> M drop-below[0.7] similar[input-pattern,pattern] |_self>
  table[ket,bah] split |u v x y>
  dump
  M split |a b>
  history
  dump
  q

2015-03-11
  running-time foo |x> => |y>
  load fibonacci.sw
  running-time fib |20>
  context
  pattern |a> => |x0>
  pattern |b> => |x0> + |x2>
  pattern |c> => |x0> + |x1>
  pattern |d> => |x0> + |x1> + |x2>
  M |a> => |1>
  M |b> => |1>
  M |c> => |1>
  M |d> => |0>
  dump
  input-pattern |u> => |x0>
  input-pattern |v> => |x0> + |x2>
  input-pattern |x> => |x0> + |x1>
  input-pattern |y> => |x0> + |x1> + |x2>
  dump
  foo |*> #=> 100 similar[input-pattern,pattern] |_self>
  table[input,foo] split |u v x y>
  pattern |a> => |x0>
  pattern |b> => |x1>
  pattern |c> => 0.000001 |x0>
  pattern |d> => |x0> + |x1>
  M |a> => |1>
  M |b> => |1>
  M |c> => |0>
  M |d> => |0>
  input-pattern |u> => |x0>
  input-pattern |v> => |x1>
  input-pattern |x> => 0.000001 |x0>
  input-pattern |y> => |x0> + |x1>
  
  input-pattern |z> => |x0> + 0.900|x1>
  dump
  table[input,foo] split |u v x y z>
  history
  table[input,foo] split |u v x y z>
  history
  table[input,foo] split |u v x y z>
  q

2015-03-12
  pattern |a> => |x0> 
  pattern |b> => |x0> + |x2>
  pattern |c> => |x0> + |x1>
  pattern |d> => |x0> + |x1> + |x2>
  M |a> => |0>
  M |b> => |0>
  M |c> => |0>
  M |d> => |1>
  
  -- now define some example input patterns:
  input-pattern |u> => |x0> 
  input-pattern |v> => |x0> + |x2>
  input-pattern |x> => |x0> + |x1>
  input-pattern |y> => |x0> + |x1> + |x2>
  dump
  h |*> #=> M drop-below[0.7] similar[input-pattern,pattern] |_self>
  dump
  table[input,h] (|u> + |v> + |x> + |y>)
  pattern |a> => |x0> + |x1>
  pattern |b> => |x0> + |x2>
  pattern |c> => |x0>
  pattern |d> => |x0> + |x1> + |x2>
  M |a> => |1>
  M |b> => |1>
  M |c> => |0>
  M |d> => |0>
  
  -- now define some example input patterns:
  input-pattern |u> => |x0> + |x1>
  input-pattern |v> => |x0> + |x2>
  input-pattern |x> => |x0>
  input-pattern |y> => |x0> + |x1> + |x2>
  table[input.h] split |u v x y>
  table[input.h] split |u v x y>
  table[input,h] split |u v x y>
  input-pattern |z> => 0.7|x0> + 0.900|x1> + 0.6|x2>
  table[input,h] split |u v x y z>
  input-pattern |z> => 0.7|x0> + 0.900|x1> + 0.85|x2>
  table[input,h] split |u v x y z>
  dump
  table[input,h] split |u v x y z>
  foo |*> #=> 100 similar[input-pattern,pattern] |_self>
  table[input,foo] split |u v x y z>
  context
  dump
  q

2015-03-12
  load iris-pattern-recognition.sw
  dump
  foo |*> #=> 100 similar[input-pattern,pattern] |_self>
  h |*> #=> M drop-below[0.7] similar[input-pattern,pattern] |_self>
  table[input,h] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  dump |*> 
  h2 |*> #=> M drop-below[0.5] similar[input-pattern,pattern] |_self>
  history
  table[input,h2] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  dump
  table[input,h2] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  h2 |node-141>
  history
  foo |node-141>
  foo |node-140>
  dump |*> 
  history
  foo |node-41>
  dump |*> 
  h3 |*> #=> M similar[input-pattern,pattern] |_self>
  history
  table[input,h3] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  dump |*> 
  h3 
  dump |*>
  h4 |*> #=> coeff-sort M similar[input-pattern,pattern] |_self>
  history
  table[input,h4] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  dump |*> 
  foo |node-149>
  history
  table[input,h4] split |node-41 node-42 node-43 node-44 node-45 node-46 node-47 node-48 node-49 node-50>
  table[input,h4] split |node-91 node-92 node-93 node-94 node-95 node-96 node-97 node-98 node-99 node-100>
  dump |*>
  k |*> #=> coeff-sort M drop-below[0.5] similar[input-pattern,pattern] |_self>
  history
  table[input,k] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  history
  table[input,h4] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  foo |node-149>
  
  history
  table[input,h4] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  history
  table[input,h4] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  history
  table[input,h4] split |node-91 node-92 node-93 node-94 node-95 node-96 node-97 node-98 node-99 node-100>
  q

2015-03-12
  load iris-pattern-recognition.sw
  h2 |*> #=> coeff-sort M similar[input-pattern,pattern] |_self>
  discrimination |*> #=> push-float discrim h2 |_self>
  history
  table[input,h2,discrimination] split |node-41 node-42 node-43 node-44 node-45 node-46 node-47 node-48 node-49 node-50>
  table[input,h2,discrimination] split |node-91 node-92 node-93 node-94 node-95 node-96 node-97 node-98 node-99 node-100>
  table[input,h2,discrimination] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  dump |*>
  h |*> #=> M drop-below[0.7] similar[input-pattern,pattern] |_self>
  history
  table[input,h,discrimination] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  similar[input-pattern,pattern] |node-150>
  table[node,coeff] 100 similar[input-pattern,pattern] |node-150>
  history
  table[node,coeff] 100 similar[input-pattern,pattern] |node-150>
  history
  q

2015-03-12
  load improved-iris-pattern-recognition.sw
  h |*> #=> M drop-below[0.7] similar[input-pattern,pattern] |_self>
  h2 |*> #=> coeff-sort M similar[input-pattern,pattern] |_self>
  history
    discrimination |*> #=> push-float discrim h |_self>
    discrimination2 |*> #=> push-float discrim h2 |_self>
  dump
  table[input,h,discrimination] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  table[input,h2,discrimination2] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  dump
  history
  similar[input-pattern,pattern] |node-149>
  dump
  h3 |
  h3 |*> coeff-sort M drop-below[0.8] similar[input-pattern,pattern] |_self>
  discrimination3 |*> #=> round[3] push-float discrim h3 |_self>
  table[node,h3,discriminaiton3] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  dump
  h3 |*> #=> coeff-sort M drop-below[0.8] similar[input-pattern,pattern] |_self>
  history
  table[node,h3,discrimination3] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  history
  q

2015-03-12
  load improved-iris-pattern-recognition.sw
  h2 |*> #=> coeff-sort M similar[input-pattern,pattern] |_self>
  discrimination2 |*> #=> round[3] push-float discrim h2 |_self>
  table[input,h2,discrimination2] split |node-41 node-42 node-43 node-44 node-45 node-46 node-47 node-48 node-49 node-50>
  
  table[input,h2,discrimination2] split |node-91 node-92 node-93 node-94 node-95 node-96 node-97 node-98 node-99 node-100>
  table[input,h2,discrimination2] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  q

2015-03-12
  shuffle split |a b c d e f>
  select[1,3] shuffle split |a b c d e f g h>
  q

2015-03-12
  pick[3] split |a b c d e f g h i j k>
  .
  .
  .
  .
  .
  q

2015-03-13
  load adult-wage-pattern-recognition.sw
  h2 |*> #=> coeff-sort M similar[input-pattern,pattern] |_self>
  discrimination2 |*> #=> round[3] push-float discrim h2 |_self>
  h2 |example-1>
  dump |example-1>
  q

2015-03-13
  load adult-wage-pattern-recognition.sw
  h2 |*> #=> coeff-sort M similar[input-pattern,pattern] |_self>
  discrimination2 |*> #=> round[3] push-float discrim h2 |_self>
  table[input,h2,discrimination2,answer] split |example-1 example-2 example-3 example-4 example-5 example-6 example-7 example-8 example-9 example-10>
  dump |*>
  h |*> #=> coeff-sort M drop-below[0.8] similar[input-pattern,pattern] |_self>
  history
  h |example-3>
  dump |*> 
  sel-h |*> #=> M select[1,3] similar[input-pattern,pattern] |_self>
  sel-h |*> #=> coeff-sort M select[1,3] similar[input-pattern,pattern] |_self>
  sel-h |example-3>
  history
  select-10 |*> #=> coeff-sort M select[1,10] similar[input-pattern,pattern] |_self>
  select-10 |example-3>
  history
  table[input,coeff] select[1,50] similar[input-pattern,pattern] |example-3>
  history
  table[input,coeff,answer] select[1,200] similar[input-pattern,pattern] |example-3>
  history
  table[input,coeff,M] select[1,500] 100 similar[input-pattern,pattern] |example-3>
  
  save history

2015-03-13
  load iris-pattern-recognition.sw
  h4 |*> #=> coeff-sort M similar[input-pattern,pattern] |_self>
  table[input,h4] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  table[input,h4] split |node-41 node-42 node-43 node-44 node-45 node-46 node-47 node-48 node-49 node-50>
  table[input,h4] split |node-91 node-92 node-93 node-94 node-95 node-96 node-97 node-98 node-99 node-100>
  history
  discrimination |*> discrim h4 |_self>
  dump |*>
  
  discrimination |*> #=> discrim h4 |_self>
  history
  table[input,h4,discrimination] split |node-41 node-42 node-43 node-44 node-45 node-46 node-47 node-48 node-49 node-50>
  history
  table[input,h4,discrimination] split |node-91 node-92 node-93 node-94 node-95 node-96 node-97 node-98 node-99 node-100>
  table[input,h4,discrimination] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  discrimination |node-145>
  dump |*>
  discrim h4 |node-145>
  readable-display |x>
  table[ket] |x>
  is-equal[1] | >
  is-equal[2] 2| >
  is-equal[1] push-float | >
  discrimination-2 |*> #=> push-float discrim h4 |_self>
  history
  table[input,h4,discrimination-2] split |node-141 node-142 node-143 node-144 node-145 node-146 node-147 node-148 node-149 node-150>
  history
  
  q

2015-03-15
  load adult-wage-pattern-recognition--unknown-filtered.sw
    norm |above-50K> => .000127534753220 |_self>
    norm |below-50K> => .000040453074433 |_self>
  
  norm-h4 |*> #=> normalize[100] coeff-sort norm M select[1,5] similar[input-pattern,pattern] |_self>
  norm-h4 |example-13896>
  running-time table[input,norm-h4,answer] pick[100] rel-kets[input-pattern] |>
  equal(70|a> + 30|b>,|a>)
  equal(70|a> + 30|b>,100|a>)
  history
  equal? |*> #=> equal(norm-h4|_self>,100 answer|_self>)
  table[input,norm-h4,answer,equal?] pick[5] rel-kets[input-pattern] |>
  history
  is-equal? |*> #=> if(is-greater-equal-than[50] equal? |_self>,equal? |_self>,|False>)
  is-equal? |example-4099>
  history
  is-equal? |example-8350>
  history
  is-equal? |*> #=> if(is-greater-equal-than[0.5] equal? |_self>,equal? |_self>,|False>)
  is-equal? |example-8350>
  history
  is-greater-equal-than[0.5] 0.559 |True>
  is-greater-equal-than[0.5] push-float 0.559 |True>
  is-equal? |*> #=> if(is-greater-equal-than[0.5] push-float equal? |_self>,equal? |_self>,|False>)
  is-equal? |example-8350>
  history
  table[input,norm-h4,answer,is-equal?] pick[2] rel-kets[input-pattern] |>
  history
  running-time table[input,norm-h4,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  save history

2015-03-15
  max-coeff (3|a> + 7|b>)
  max-elt (3|a> + 7|b>)
  q

2015-03-15
  load adult-wage-pattern-recognition--unknown-filtered.sw
    norm |above-50K> => .000127534753220 |_self>
    norm |below-50K> => .000040453074433 |_self>
  
  norm-h4 |*> #=> normalize[100] coeff-sort norm M select[1,5] similar[input-pattern,pattern] |_self>
  norm-h4 |example-13896>
  running-time table[input,norm-h4,answer] pick[100] rel-kets[input-pattern] |>
  equal(70|a> + 30|b>,|a>)
  equal(70|a> + 30|b>,100|a>)
  history
  equal? |*> #=> equal(norm-h4|_self>,100 answer|_self>)
  table[input,norm-h4,answer,equal?] pick[5] rel-kets[input-pattern] |>
  history
  is-equal? |*> #=> if(is-greater-equal-than[50] equal? |_self>,equal? |_self>,|False>)
  is-equal? |example-4099>
  history
  is-equal? |example-8350>
  history
  is-equal? |*> #=> if(is-greater-equal-than[0.5] equal? |_self>,equal? |_self>,|False>)
  is-equal? |example-8350>
  history
  is-greater-equal-than[0.5] 0.559 |True>
  is-greater-equal-than[0.5] push-float 0.559 |True>
  is-equal? |*> #=> if(is-greater-equal-than[0.5] push-float equal? |_self>,equal? |_self>,|False>)
  is-equal? |example-8350>
  history
  table[input,norm-h4,answer,is-equal?] pick[2] rel-kets[input-pattern] |>
  history
  running-time table[input,norm-h4,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  save history
  history
  history 1000
  norm-h5 |*> !=> normalize[100] coeff-sort norm M select[1,5] similar[input-pattern,pattern] |_self>
  equal5? #=> equal(norm-h5|_self>,100 answer |_self>)
  history
  equal5? |*> #=> equal(norm-h5|_self>,100 answer |_self>)
  history
  is-equal5? |*> #=> max-elt wif(equal5? |_self>,|True>,|False>)
  is-equal5? |example-5707>
  history
  is-equal5? |example-9629>
  history
  save history

2015-03-15
  load adult-wage-pattern-recognition--unknown-filtered.sw
    norm |above-50K> => .000127534753220 |_self>
    norm |below-50K> => .000040453074433 |_self>
  
  norm-h4 |*> #=> normalize[100] coeff-sort norm M select[1,5] similar[input-pattern,pattern] |_self>
  norm-h4 |example-13896>
  running-time table[input,norm-h4,answer] pick[100] rel-kets[input-pattern] |>
  equal(70|a> + 30|b>,|a>)
  equal(70|a> + 30|b>,100|a>)
  history
  equal? |*> #=> equal(norm-h4|_self>,100 answer|_self>)
  table[input,norm-h4,answer,equal?] pick[5] rel-kets[input-pattern] |>
  history
  is-equal? |*> #=> if(is-greater-equal-than[50] equal? |_self>,equal? |_self>,|False>)
  is-equal? |example-4099>
  history
  is-equal? |example-8350>
  history
  is-equal? |*> #=> if(is-greater-equal-than[0.5] equal? |_self>,equal? |_self>,|False>)
  is-equal? |example-8350>
  history
  is-greater-equal-than[0.5] 0.559 |True>
  is-greater-equal-than[0.5] push-float 0.559 |True>
  is-equal? |*> #=> if(is-greater-equal-than[0.5] push-float equal? |_self>,equal? |_self>,|False>)
  is-equal? |example-8350>
  history
  table[input,norm-h4,answer,is-equal?] pick[2] rel-kets[input-pattern] |>
  history
  running-time table[input,norm-h4,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  save history
  history
  history 1000
  norm-h5 |*> !=> normalize[100] coeff-sort norm M select[1,5] similar[input-pattern,pattern] |_self>
  equal5? #=> equal(norm-h5|_self>,100 answer |_self>)
  history
  equal5? |*> #=> equal(norm-h5|_self>,100 answer |_self>)
  history
  is-equal5? |*> #=> max-elt wif(equal5? |_self>,|True>,|False>)
  is-equal5? |example-5707>
  history
  is-equal5? |example-9629>
  history
  save history
  running-time table[input,norm-h5,answer,is-equal5?] pick[10] rel-kets[input-pattern] |>
  [Bsave history
  
  save history

2015-03-16
  foo |x> => |y>
  load fibonacci.sw
  fib |20>
  q

2015-03-16
  load fibonacci.sw
  fib |15>
  q

2015-03-17
  range(|byte: 0>,|byte: 255>,|1>)
  history
  0 range(|byte: 0>,|byte: 255>,|1>)
  
  q

2015-03-17
  
  load files-to-bytes.sw
  simm |*> #=> 100 self-similar[bytes] |_self>
  map[simm,similarity] rel-kets[bytes] |>
  map[similarity]
  history
  matrix[similarity]
  history
  q

2015-03-17
  spikes |wave-1> => range(|0>,|1000>,|1>)
  history
  q

2015-03-17
  F |*> #=> F |_self>
  K |*> #=> K |_self>
  table[C,F,K] range(|C: 0>,|C: 50>,|10>)
  matrix[op]
  q
  [A
  
  q

2015-03-17
  load simple-network.sw
  dump
  matrix[O]
  load files-to-bytes.sw
  [2~[2~000000000000[
  [?1;2c
  simm |*> #=> 100 self-similar[bytes] |_self>
  map[simm,similarity] rel-kets[bytes] |>
  matrix[similarity]
  load make-ft-spikes.sw
  dump
  simm |*> #=> 100 self-similar[spikes] |_self>
  map[simm,similarity] rel-kets[spikes] |>
  matrix[similarity]
  .
  history
  reset
   load make-ft-spikes.sw
  load make-ft-spikes.sw
    simm |*> #=> 100 self-similar[spikes] |_self>
    map[simm,similarity] rel-kets[spikes] |>
  matrix[similarity]
  history
  table[wave,coeff] coeff-sort similarity |wave-2>
  table[wave,coeff] coeff-sort similarity |wave-3>
  table[wave,coeff] coeff-sort similarity |wave-4>
  table[wave,coeff] coeff-sort similarity |wave-5>
  load country-codes.sw
  load top-level-domains.sw
  dump
  country |gs>
  q

2015-03-18
  load top-level-domains.sw
  country |co>
  county |ch>
  country |ch>
  load improved-fragment-webpages.sw
  categorize[hash-4B,0.7,result]
  dump |result>
  q

2015-03-18
  load H-I-pat-rec.sw
  categorize[pixels,0.6,result]
  history
  dump |result>
  
  q

2015-03-18
  load improved-fragment-webpages.sw
  categorize[hash-4B,0.7,result]
  history
  dump |result>
  websites |*> #=> apply(|_self>,|result>)
  table[category,websites] supported-ops |result>
  .
  history
  
  q

2015-03-19
  if-pattern |node-1> => |Fred is whistling>
  M |node-1> => |Fred is happy>
  input-pattern |x> => |Fred is whistling>
  M similar[input-pattern,if-pattern] |x>
  dump
  if-pattern |node-1> => |Sam is whistling>
  M |node-2> => |Sam is happy>
  dump
  if-pattern |node-1> => |Fred is whistling>
  if-pattern |node-1> => |Sam is whistling>
  dump
  if-pattern |node-1> => |Fred is whistling>
  if-pattern |node-2> => |Sam is whistling>
  dump
  input-pattern |y> => |Sam is whistling>
  h |*> #=> M similar[input-pattern,if-pattern] |_self>
  dump
  h |x>
  h |y>
  dump
  h |x>
  h |y>
  history
  q

2015-03-19
  |X> => 
  [2~|X> => 3789654|the> + 2098762|he> + 57897|king> + 56975|boy> + 76|outragious> + 5|stringyfy> + 1|transducionalify> + 1|mouse>
  dump
  nfc(|the>,"" |X>)
  nfc(|the>,"" |X>) |nfc>
  simm(|a>,|a> + |b>)
  simm(|a>,|a> + |b>) |simmy>
  
  "" |X>
  history
  |X> => 3789654|the> + 2098762|he> + 57897|king> + 56975|boy> + 76|outragious> + 5|stringyfy> + 1|transducionalify> + 1|mouse>
  "" |X>
  nfc(|the>,"" |X>) |nfc>
  "" |X>
  nfc(|king>,""|X>) |nfc>
  nfc(|mouse>,""|X>) |nfc>
  q

2015-03-19
  |X> => 3789654|the> + 2098762|he> + 57897|king> + 56975|boy> + 76|outragious> + 5|stringyfy> + 1|transducionalify> + 1|mouse>
  "" |X>
  ket-nfc(|the>,""|X>)
  history
  q

2015-03-19
  |X> => 3789654|the> + 2098762|he> + 57897|king> + 56975|boy> + 76|outragious> + 5|stringyfy> + 1|transducionalify> + 1|mouse>
  "" |X>
  ket-nfc(|the>,""|X>)
  history
  q

2015-03-19
  |X> => 3789654|the> + 2098762|he> + 57897|king> + 56975|boy> + 76|outragious> + 5|stringyfy> + 1|transducionalify> + 1|mouse>
  ket-nfc(|the>,"" |X>)
  history
  [2~|X> => |the> + |he> + |king> + |boy> + |outragious> + |stringyfy> + |transducionalify> + |mouse>
  |Y> => 13|the> + 13|he> + 13|king> + 13|boy> + 13|outragious> + 13|stringyfy> + 13|transducionalify> + 13|mouse>
  |Z> => 3789654|the> + 2098762|he> + 57897|king> + 56975|boy> + 76|outragious> + 5|stringyfy> + |transducionalify> + |mouse>
  dump
  "" |X>
  |X> => |fish>
  dump
  q

2015-03-19
  |X> => |the> + |he> + |king> + |boy> + |outragious> + |stringyfy> + |transducionalify> + |mouse>
  |Y> => 13|the> + 13|he> + 13|king> + 13|boy> + 13|outragious> + 13|stringyfy> + 13|transducionalify> + 13|mouse>
  |Z> => 3789654|the> + 2098762|he> + 57897|king> + 56975|boy> + 76|outragious> + 5|stringyfy> + |transducionalify> + |mouse>
  
  dump
  the |*> #=> ket-nfc(|the>,""|_self>)
  the |X>
  the |Z>
  history
  the |*> #=> ket-nfc(|the>,""|_self>)
  he |*> #=> ket-nfc(|he>,""|_self>)
  king |*> #=> ket-nfc(|king>,""|_self>)
  boy |*> #=> ket-nfc(|boy>,""|_self>)
  outragious |*> #=> ket-nfc(|outragious>,""|_self>)
  stringyfy |*> #=> ket-nfc(|stringyfy>,""|_self>)
  transducionalify |*> #=> ket-nfc(|transducionalify>,""|_self>)
  mouse |*> #=> ket-nfc(|mouse>,""|_self>)
  not-in-set |*> #=> ket-nfc(|not-in-set>,""|_self>)
  
  dump
  table[superposition,the,he,king,boy,outragious,stringyfy,transducionalify,mouse,not-in-set] split |X Y Z>
  history
  q

2015-03-19
    |X> => |the> + |he> + |king> + |boy> + |outragious> + |stringyfy> + |transducionalify> + |mouse>
    |Y> => 13|the> + 13|he> + 13|king> + 13|boy> + 13|outragious> + 13|stringyfy> + 13|transducionalify> + 13|mouse>
    |Z> => 3789654|the> + 2098762|he> + 57897|king> + 56975|boy> + 76|outragious> + 5|stringyfy> + |transducionalify> + |mouse>
  
   the |*> #=> ket-nfc(|the>,""|_self>)
    he |*> #=> ket-nfc(|he>,""|_self>)
    king |*> #=> ket-nfc(|king>,""|_self>)
    boy |*> #=> ket-nfc(|boy>,""|_self>)
    outragious |*> #=> ket-nfc(|outragious>,""|_self>)
    stringyfy |*> #=> ket-nfc(|stringyfy>,""|_self>)
    transducionalify |*> #=> ket-nfc(|transducionalify>,""|_self>)
    mouse |*> #=> ket-nfc(|mouse>,""|_self>)
    not-in-set |*> #=> ket-nfc(|not-in-set>,""|_self>)
  dump
  context normed frequency class
   |X> => |the> + |he> + |king> + |boy> + |outragious> + |stringyfy> + |transducionalify> + |mouse>
  
   |Y> => 13.000|the> + 13.000|he> + 13.000|king> + 13.000|boy> + 13.000|outragious> + 13.000|stringyfy> + 13.000|transducionalify> + 13.000|mouse>
  
   |Z> => 3789654.000|the> + 2098762.000|he> + 57897.000|king> + 56975.000|boy> + 76.000|outragious> + 5.000|stringyfy> + |transducionalify> + |mouse>
  
  the |*> #=> ket-nfc(|the>,""|_self>)
  he |*> #=> ket-nfc(|he>,""|_self>)
  king |*> #=> ket-nfc(|king>,""|_self>)
  boy |*> #=> ket-nfc(|boy>,""|_self>)
  outragious |*> #=> ket-nfc(|outragious>,""|_self>)
  stringyfy |*> #=> ket-nfc(|stringyfy>,""|_self>)
  transducionalify |*> #=> ket-nfc(|transducionalify>,""|_self>)
  mouse |*> #=> ket-nfc(|mouse>,""|_self>)
  not-in-set |*> #=> ket-nfc(|not-in-set>,""|_self>)
  
  dump
  save normed-frequency-class-examples.sw
  |nfc table> => table[superposition,the,he,king,boy,outragious,stringyfy,transducionalify,mouse,not-in-set] split |X Y Z>
  dump
  |nfc table> #=> table[superposition,the,he,king,boy,outragious,stringyfy,transducionalify,mouse,not-in-set] split |X Y Z>
  dump
  save normed-frequency-class-examples.sw
  dump
  "" |nfc table>
  history
  dump
  history
  dump
  "" |nfc table>
  q

2015-03-19
  load normed-frequency-class-example.sw
  load normed-frequency-class-examples.sw
  dump
  "" |nfc table>
  q

2015-03-19
  load normed-frequency-class-examples.sw
  dump
  "" |nfc table>
  history
  q

2015-03-20
  load adult-wage-pattern-recognition.sw
  h2 |*> #=> coeff-sort M similar[input-pattern,pattern] |_self>
  discrimination2 |*> #=> round[3] push-float discrim h2 |_self>
  table[input,h2,discrimination2,answer] split |example-1 example-2 example-3 example-4 example-5 example-6 example-7 example-8 example-9 example-10>
  dump |*>
  h |*> #=> coeff-sort M drop-below[0.8] similar[input-pattern,pattern] |_self>
  history
  h |example-3>
  dump |*> 
  sel-h |*> #=> M select[1,3] similar[input-pattern,pattern] |_self>
  sel-h |*> #=> coeff-sort M select[1,3] similar[input-pattern,pattern] |_self>
  sel-h |example-3>
  history
  select-10 |*> #=> coeff-sort M select[1,10] similar[input-pattern,pattern] |_self>
  select-10 |example-3>
  history
  table[input,coeff] select[1,50] similar[input-pattern,pattern] |example-3>
  history
  table[input,coeff,answer] select[1,200] similar[input-pattern,pattern] |example-3>
  history
  table[input,coeff,M] select[1,500] 100 similar[input-pattern,pattern] |example-3>
  
  save history
  
  history
  rank-table[input,coeff,M] select[1,1000] 100 similar[input-pattern,pattern] |example-3>
  dump |*>
  rescale |below-50K> => .000040453074433 |_self>
  rescale |above-50K> => .000127534753220|_self>
  matrix[rescale]
  rescale |above-50K>
  norm |above-50K>
  norm |above-50K> => .000127534753220 |_self>
  norm |below-50K> => .000040453074433 |_self>
  matrix[norm]
  norm |above-50K>
  dump |*> 
  norm-h |*> #=> coeff-sort norm M select[1,20] similar[input-pattern,pattern] |_self>
  norm-h |example-3>
  dump |*>
  norm-h |*> #=> normalize[100] norm M select[1,20] similar[input-pattern,pattern] |_self>
  norm-h |example-3>
  history
  normalize[100] norm M select[1,15] similar[input-pattern,pattern] |example-3>
  dump |*>
  table[input,norm-h,answer] split |example-1 example-2 example-3 example-4 example-5 example-6 example-7 example-8 example-9 example-10>
  dump |*>
  norm-h |*> #=> normalize[100] coeff-sort norm M select[1,20] similar[input-pattern,pattern] |_self>
  norm-h |example-4>
  table[input,norm-h,answer] split |example-1 example-2 example-3 example-4 example-5 example-6 example-7 example-8 example-9 example-10>
  dump |*>
  history
  history 1000
  running-time table[input,norm-h,answer] pick[20] rel-kets[input-pattern] |>
  history
  norm-h2 |*> #=> normalize[100] coeff-sort norm M select[1,15] similar[input-pattern,pattern] |_self>
  norm-h3 |*> #=> normalize[100] coeff-sort norm M select[1,10] similar[input-pattern,pattern] |_self>
  running-time table[input,norm-h3,answer] pick[20] rel-kets[input-pattern] |>
  running-time table[input,norm-h4,answer] pick[20] rel-kets[input-pattern] |>
  norm-h4 |*> #=> normalize[100] coeff-sort norm M select[1,5] similar[input-pattern,pattern] |_self>
  running-time table[input,norm-h4,answer] pick[20] rel-kets[input-pattern] |>
  history
  test-random |*> #=> normalize[100] coeff-sort norm M select[1,10] rel-kets[pattern] |>
  running-time table[input,test-random,answer] pick[20] rel-kets[input-pattern] |>
  history
  test-random |*> #=> normalize[100] coeff-sort norm M pick[10] rel-kets[pattern] |>
  running-time table[input,test-random,answer] pick[20] rel-kets[input-pattern] |>
  history
  running-time table[input,test-random,answer] pick[20] rel-kets[input-pattern] |>
  history 1000
  table[input.coeff] 100 similar[input-pattern,pattern] |example-9861>
  history
  table[input,coeff] select[1,15] 100 similar[input-pattern,pattern] |example-9861>
  history
  
  table[input,coeff,M] select[1,15] 100 similar[input-pattern,pattern] |example-9861>
  q

2015-03-21
  load normed-frequency-class-examples.sw
  dump
  "" |nfc table>
  history
  q

2015-03-23
  load names.sw
  history
  find-topic[names] |alice>
  table[name,coeff] find-topic[names] |alice>
  table[name,coeff] find-topic[names] |bob>
  find-topic[names] |bob>
  find-topic[names] |alice>
  find-topic[names] |alex>
  find-topic[names] |sam>
  h |*> #=> find-topic[names] |_self>
  h |smith>
  h |frank>
  h |bella>
  h |lisa>
  h |richard>
  h |tim>
  h |alexandria>
  h |elizabeth>
  h |millie>
  h |natalie>
  h |lisa>
  h |jemma>
  h |gemma>
  h |ellen>
  h |bella>
  h |jane>
  history
  h |alexandria>
  how-many names |female name>
  how-many names |male name>
  how-many names |last name>
  q

2015-03-23
  load normed-frequency-class-examples.sw
  dump
  q

2015-03-23
  load adult-wage-pattern-recognition.sw
  simm |*> #=> select[1,100] similar[input-pattern,pattern] |_self>
  simm |example-37>
  map[simm,similarity-result] rel-kets[input-pattern] |>
  history
  save adult-wage-pattern-recognition--saved-simm.sw
  save history

2015-03-23
  load adult-wage-pattern-recognition.sw
  simm |*> #=> select[1,100] similar[input-pattern,pattern] |_self>
  simm |example-37>
  map[simm,similarity-result] rel-kets[input-pattern] |>
  history
  save adult-wage-pattern-recognition--saved-simm.sw
  save history
  history
  q

2015-03-24
  load names.sw
  |unique names> => drop-above[1] (clean names |male name> + clean names |female name> + clean names |last name>)
  
  find-topic[names] |acors>
  history
  save unique-names.sw
  is-male-name |*> #=> |no>
  is-male-name |*> do-you-know intn(|_self>,names |male name>)
  is-male-name |*> #=> do-you-know intn(|_self>,names |male name>)
  is-male-name |fred>
  is-male-name |bella>
  |unique male names> => such-that[is-male-name] "" |unique names>
  find-topic[names] |melissa>
  history
  save unique-names.sw
  is-unique |junko>
  is-unique |*> #=> is-equal[100] push-float find-topic[names] |_self>
  is-unique |junko>
  |unique female names> => such-that[is-unique] names |female name>
  history
  save unique-names.sw
  q

2015-03-24
  load top-level-domains.sw
  country |tv>
  q

2015-03-24
  display-algebra (3|x*x> + 2|y> + |z> + 13| >)
  display-algebra 3.7|fish>
  display-algebra 3|>
  display-algebra 3| >
  display-algebra | >
  display-algebra algebra(2|x*x> + 11|x> + 19| >,|*>,11|y> + 13| >)
  f |*> #=> 3 algebra(""|_self>,|^>,|2>) + 5 ""|_self> + 19| >
  |x> => |a>
  |y> => |a> + |b>
  |z> => |a> + |b> + |c>
  display-f |*> #=> display-algebra f |_self>
  display-f |x>
  table[ket,display-f] split |x y z>
  history
  factors |*> #=> display-algebra factor |_self>
  count-factors |*> #=> count-sum factor |_self>
  prime |*> #=> if(is-equal[1] count-factors |_self>,|prime>,count-factors|_self>)
  table[number,factors,prime] range(|number: 1>,|number: 250>)
  history
  factor |number: 30>
  display-algebra factor |number: 30>
  extract-value display-algebra factor |number: 30>
  display-algebra extract-value factor |number: 30>
  history
  factors |*> #=> display-algebra extract-value factor |_self>
  table[number,factors,prime] range(|number: 1>,|number: 250>)
  history
  save history
  strange-int |number: 8>
  strange-int |*> #=> strange-int |_self>
  table[number,factors,strange-int,prime] range(|number: 1>,|number: 400>)
  save history
  history
  q

2015-03-24
  load fred-sam-friends.sw
  find-unique[friends]
  friends |Fred>
  q

2015-03-24
  load fred-sam-friends.sw
  find-unique[friends]
  friends |Fred>
  q

2015-03-24
  load fred-sam-friends.sw
  find-unique[friends]
  q

2015-03-24
  load fred-sam-friends.sw
  find-unique[friends]
  q

2015-03-24
  load fred-sam-friends.sw
  find-unique[friends]
  dump
  q

2015-03-24
  load fred-sam-friends.sw
  find-unique[friends]
  q

2015-03-24
  load fred-sam-friends.sw
  find-unique[friends]
  dump
  q

2015-03-24
  load fred-sam-friends.sw
  dump
  friends |Liz> => 10|Mary> + 0.5|Samson>
  find-unique[friends]
  dump
  friends |Emma> => 17|Alex> + 19|Billy> + |Rob>
  find-unique[friends]
  dump
  q

2015-03-24
  load names.sw
  find-unique[names]
  save tmp-find-unique.sw
  find-topic[names] |theo>
  find-topic[names] |derek>
  find-topic[names] |mcbane>
  
  q

2015-03-24
  load fred-sam-friends.sw
  find-unique[friends]
  dump
  q

2015-03-25
  load fred-sam-friends.sw
  dump
  history
  find-unique[names]
  dump
  find-unique[friends]
  dump
  load names.sw
  find-unique[names]
  how-many names |female name>
  how-many unique-names |female name>
  how-many names |male name>
  how-many unique-names |male name>
  how-many names |last name>
  how-many unique-names |last name>
  q

2015-03-25
  rescale[100] (3|a> + 2|b>)
  q

2015-03-26
  load improved-fragment-webpages.sw
  load create-average-website-fragments.sw
  load create-website-pattern-recognition-matrix--unique.sw
  matrix[result]
  load create-website-pattern-recognition-matrix--unique.sw
  matrix[tidy-result]
  matrix[result]
  
  
  history
  
  matrix[tidy-result]
  how-many-unique-hash |*> #=> how-many unique-average-hash-4B |_self>
  table[website,how-many-unique-hash] "" |ave list>
  history
  how-many-hash |*> #=> how-many average-hash-4B |_self>
  table[website,how-many-hash,how-many-unique-hash] "" |ave list>
  history
  to-comma |number: 33772>
  to-comma-number |number: 33772>
  history
    how-many-hash |*> #=> to-comma-number how-many average-hash-4B |_self>
    how-many-unique-hash |*> #=> to-comma-number how-many unique-average-hash-4B |_self>
    table[website,how-many-hash,how-many-unique-hash] "" |ave list>
  
  history
    table[website,how-many-hash,how-many-unique-hash] "" |ave list>
  delta |*> #=> arithmetic(how-many-hash |_self>,|->,how-many-unique-hash |_self>)
  table[website,how-many-hash,how-many-unique-hash,delta] "" |ave list>
  
  delta |average abc>
  delta |*> #=> arithmetic(how-many average-hash-4B |_self>,|->,how-many unique-average-hash-4B |_self>)
  table[website,how-many-hash,how-many-unique-hash,delta] "" |ave list>
  
  history
  table[website,how-many-hash,how-many-unique-hash,delta] "" |ave list>
  [Bq
  
  q

2015-03-26
  load improved-fragment-webpages.sw
  load create-average-website-fragments.sw
  load create-website-pattern-recognition-matrix--unique.sw
  matrix[norm-result]
  history
  q

2015-03-26
  load improved-fragment-webpages.sw
  load create-average-website-fragments.sw
  load create-website-pattern-recognition-matrix--unique.sw
  
  
  matrix[tidy-result]
  q

2015-03-27
  load fred-sam-friends.sw
  dump
  mbr(|Ed>,friends |Fred>)
  mbr(|bah>,friends |Fred>)
  load names.sw
  is-male-name 
  is-male-name |*> #=> do-you-know mbr(|_self>,names |male name>)
  is-male-name |frank>
  is-male-name |robert>
  is-male-name |emily>
  |unique names> => drop-above[1] (clean names |male name> + clean names |female name> + clean names |last name>)
  
  dump |*> 
  |unique male names> => such-that[is-male-name] "" |unique names>
  q

2015-03-27
  load fibonacci.sw
  fib |10>
  q

2015-03-29
  load sw-files-to-frequency-lists.sw
  h |*> #=> find-topic[kets] |_self>
  h |frog>
  h |frogs>
  h |animal: frog>
  history
  h |george>
  history
  h |person: george>
  h |person: George>
  history
  h |bot: emma>
  h |bot: Emma>
  history
  h |op: fib>
  h |food: Belgian Waffles>
  h |word: btw>
  h |ch>
  history
  h |ch>
  h |document: www proposal>
  load breakfast-menu.sw
  dump
  contains-bacon |*> #=> do-you-know mbr(|food: bacon>,read description |_self>)
  such-that[contains-bacon] "" |menu: breakfast>
  history
  contains-bacon |*> #=> do-you-know mbr(|word: bacon>,read description |_self>)
  such-that[contains-bacon] "" |menu: breakfast>
  history
  such-that[contains-bacon] "" |menu: breakfast>
  history
  q

2015-04-02
  load improved-WP-word-frequencies.sw
  find-topic[words-1] |adelaide>
  find-topic[words-2] (|george> + |bush>)
  find-topic[words-1] split |george bush>
  h1 |*> #=> find-topic[words-1] |_self>
  h1 split |george bush>
  normalize[100] h1 split |george bush>
  dump |*>
  h1 |*> #=> find-topic[words-1] split |_self>
  split |fish>
  split |fish soup>
  dump |*>
  h1 |george bush>
  h1 |clinton>
  h1 |bill clinton>
  h1 |adelaide university>
  h1 |football park>
  h1 |perth>
  h1 |canberra>
  h1 |physics>
  h1 |electron>
  h1 |particle physics>
  h1 |maxwell>
  h1 |maxwells>
  h1 |egypt>
  h1 |egypt australia japan>
  h1 |japan china australia egypt russia spain>
  h1 |nile amazon ganges>
  dump |*>
  t1 |*> #=> table[page,coeff] find-topic[words-1] split |_self>
  t1 |electromagnetism>
  t1 |nixon>
  t1 |darwin>
  t1 |south australia>
  t1 |river murray>
  h1 |river murray>
  dump |*>
  h2 |*> #=> find-topic[words-2] |_self>
  h2 |river murray>
  h2 |george bush>
  h2 |adelaide university>
  h1 |adelaide university>
  split |a b>
  count split |a b>
  count split |a b c>
  |answer> => |null>
  "" |answer>
  |answer> => |>
  "" |answer>
  context
  q

2015-04-02
  load improved-WP-word-frequencies.sw
  h1 |*> #=> intn-find-topic[words-1] |_self>
  h1 |adelaide>
  q

2015-04-02
  load improved-WP-word-frequencies.sw
  intn-find-topic[words-1] |adelaide>
  [A[Aq
  
  q

2015-04-02
  load improved-WP-word-frequencies.sw
  intn-find-topic[words-1] |adelaide>
  q

2015-04-02
  load improved-WP-word-frequencies.sw
  history
  h1 |*> #=> find-topic[words-1] split |_self>
  h2 |*> #=> find-topic[words-2] |_self>
  h3 |*> #=> find-topic[words-3] |_self>
  t1 |*> #=> table[page,coeff] find-topic[words-1] split |_self>
  
  dump |*> 
  display |*>
  h1 |adelaide>
  h1 |adelaide university>
  h1 |aami stadium>
  h1 |sydney>
  h1 |perth>
  h1 |nile river>
  h2 |nile river>
  h1 |river>
  h2 |river nile>
  h3 |university of adelaide>
  h1 |bill clinton>
  h1 |nixon>
  h2 |george bush>
  h1 |george bush>
  h1 |george>
  h1 |bush>
  h1 |physics>
  h1 |electron>
  h1 |newton>
  h1 |einstein>
  h1 |feynman>
  rel-kets[words-1]
  h1 |japan russia china>
  h1 |japan>
  h1 |russia>
  h1 |china>
  intn(h1 |japan>, h1 |russia>, h1 |china>)
  intn(h1 |nile>, h1 |river>)
  intn(h1 |george>,h1 |bush>)
  normalize[100] intn(h1 |george>,h1 |bush>)
  history
  dump 
  dump |*>
  h2 |aami stadium>
  h2 37 |aami stadium>
  history
  dump |*>
  h1 |particle physics>
  h1 |newton>
  dump |*>
  h1 |university of adelaide>
  h1 |egypt brazil>
  q

2015-04-02
  load improved-WP-word-frequencies.sw
  intn-find-topic[words-1] |adelaide>
  h1 |*> #=> intn-find-topic[words-1] |_self>
  h1 |adelaide>
  h1 |adelaide university>
  h1 |university of adelaide>
  h1 |aami stadium>
  h1 |perth>
  h1 |nile river>
  h1 |bill clinton>
  h1 |george bush>
  h1 |particle physics>
  h1 |Feynman>
  h1 |japan russia china>
  h1 |Feynman>
  F1 |*> #=> intn-find-topic[words-1] |_self>
  F1 |nile river>
  F1 |george bush>
  F1 |japan russia china>
  F1 |Newton>
  F1 |university of adelaide>
  F1 |richard nixon>
  F1 |thailand burma new zealand>
  F1 |egypt brazil>
  F1 |adelaide perth sydney>
  F1 |adelaide perth sydney melbourne darwin>
  F1 |adelaide perth sydney melbourne brisbane hobart canberra>
  F1 |jefferson reagan>
  F1 |thomas ronald richard bill barack george james jimmy>
  history
  F1 |thomas ronald richard bill barack george james jimmy>
  simm-1 |*> #=> 100 self-similar[words-1] |_self>
  simm-1 |*> #=> 100 self-similar[words-2] |_self>
  simm-1 |*> #=> 100 self-similar[words-1] |_self>
  simm-2 |*> #=> 100 self-similar[words-2] |_self>
  simm-3 |*> #=> 100 self-similar[words-3] |_self>
  map[simm-1,similarity-1] rel-kets[words-1] |>
  history
  map[simm-2,similarity-2] rel-kets[words-2] |>
  history
  map[simm-3,similarity-3] rel-kets[words-3] |>
  matrix[similarity-1]
  matrix[similarity-2]
  matrix[similarity-3]
  history
  matrix[similarity-1]
  matrix[similarity-2]
  matrix[similarity-3]
  matrix[words]
  matrix[words-1]
  history
  matrix[words-2]
  history
  matrix[words-3]
  q

2015-04-10
  subset(|a>,|a> + |b>)
  subset(|a>,2|a>)
  subset(2|a>,|a>)
  subset(|a> + |b>,2|a> + 0.9|b>)
  subset(|a> + |b>,|c> + |d>)
  subset(|>,|a>)
  subset(|a>,|>)
  6.6 .17 |x>
  q

2015-04-12
  subset(|b>,|a> + |b> + |c>)
  subset(|a>,0.8|a>)
  subset(|a> + |d>,|a> + |b> + |c>)
  subset(|b> + |d> + |e> + |f>,|a> + |b> + |c> + |d> + |e> + |f> + |g> + |h>)
  subset(0.8|a> + 3|b> + 7|c> + 0.2|d>,|a> + 4|b> + 7|c> + 5|d> + 37|e>)
  subset(|d>,|a> + |b> + |c>)
  subset(|d> + |e> + |f>,|a> + |b> + |c>)
  files
  load improved-WP-word-frequencies.sw
  find-topic[words-1] |adelaide>
  history
  subset(|adelaide>,words-1 |WP: Adelaide>)
  history
  subset(split|adelaide university>,words-1 |WP: Adelaide>)
  history
  q

2015-04-12
  is-equal[100] push-float 100 |x>
  q

2015-04-12
  is-coeff-equal[100] 100 |x>
  coeff-equal[100] 100 |x>
  pop-float coeff-equal[100] 100 |x>
  q

2015-04-12
  coeff-equal[100] 100 |x>
  context new fizz buzz
  |list> => range(|1>,|100>)
  fizz-buzz-0 |*> #=> |_self>
  is-mod-3 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|3>)
  is-mod-3 |5>
  is-mod-3 |18>
  history
  is-mod-5 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|5>)
  is-mod-15 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|15>)
  dump
  fizz-buzz-1 |*> #=> if(is-mod-3 |_self>,|Fizz>,|>)
  fizz-buzz-2 |*> #=> if(is-mod-5 |_self>,|Buzz>,|>)
  fizz-buzz-3 |*> #=> if(is-mod-15 |_self>,|FizzBuzz>,|>)
  
  dump
  map[fizz-buzz-0,fizz-buzz] "" |list>
  map[fizz-buzz-1,fizz-buzz] "" |list>
  map[fizz-buzz-2,fizz-buzz] "" |list>
  map[fizz-buzz-3,fizz-buzz] "" |list>dump
  
  dump
  dump |*>
  load fizz-buzz-example.sw
  dump
  q

2015-04-13
  a |person: Fred> => |b>
  
  a |person: x: y: z> => |c>
  
  a |fish> => |d>
  
  dump
  list-kets |*>
  list-kets |person: *>
  list-kets |person: Fred>
  list-kets |person: x: *>
  q

2015-04-14
  M |a> => 10 |r1> + -20|r2>
  matrix[M]
  M |b> => -20|r1> + 10|r2>
  dump
  matrix[M]
  M split |a b>
  M (5|a> + |b>)
  M (|a> + 2|b>)
  M (|a> + 2.1|b>)
  dump
  N |a> => 10 |a> + -10|b>
  N |b> => -10|a> + 10|b>
  dump
  matrix[N]
  matrix[N,N]
  merged-matrix[N,N]
  merged-matrix[N,N,N]
  -- you know, that kinda rocks!
  -- the more iterations of N, the more it amplifies the difference between the input.
  N split |a b>
  N (|a> + 1.001|b>)
  N N (|a> + 1.001|b>)
  N^3 (|a> + 1.001|b>)
  N^10 (|a> + 1.001|b>)
  q

2015-04-16
  M |a> => 1000|a> + -1000|b>
  M |b> => -1000|a> + 1000|b>
  matrix[M]
  M (|a> + |b>)
  M (|a> + 1.00001|b>)
  f |*> #=> normalize drop M "" |_self>
  dump
  |x> => 2|a> + 2|b>
  f |x>
  |y> => 2|a> + 2.0000001|b>
  f |y>
  dump
  is-coeff-equal[100] 100 |x>
  is-coeff-equal[100] 99|x>
  coeff-greater-than[3] 4|x>
  coeff-greater-than[3] 3|x>
  dump
  list-kets |*>
  M-1 |*> #=> arithmetic(|_self>,|+>,|x; 1>)
  M-1 |x: 3>
  dump
  M-1 |*> #=> arithmetic(|_self>,|+>,|x: 1>)
  M-1 |x: 3>
  M-1^3 |x: 5>
  M^10 31|x: 5>
  M-1^10 31|x: 5>
  dump
  M |*> #=> arithmetic(|_self>,|+>,|x: 1>)
  M^1000 314|x: 3>
  M^5 range(|x: 1>,|x: 20>)
  history
  -- cool. M neatly implements translation.
  q

2015-04-16
  times[3] |x: 5>
  times[3] 2|x: 5>
  -- so not ideal. Maybe times[n] needs to be implemented differently ....
  q

2015-04-17
  times[10] |x>
  q

2015-04-17
  apply-weights[5,3] split |a b c d>
  q

2015-04-17
  apply-weights[5,3] split |a b c d e>
  apply-weights[3.141592,0,7,2.3] split |a b c d e f g h>
  q

2015-04-17
  M |*> #=> arithmetic(|_self>,|+>,|x: 1>)
  M |x: 1>
  exp[M,6] |x: 1>
  history
  q

2015-04-17
  M |*> #=> arithmetic(|_self>,|+>,|x: 1>)
  full-exp[M,6] |x: 0>
  q

2015-04-18
  M |*> #=> arithmetic(|_self>,|+>,|x: 1>)
  full-exp[M.6] |x: 0>
  full-exp[M,6] |x: 0>
  algebra(|x>,|*>,|y>)
  X |*> #=> algebra(|_self>,|*>,|x>)
  X |1>
  X^2 |1>
  X^7 |1>
  history
  full-exp[X,10] |1>
  history
  X^5 |1>
  history
  3 X^7 |1>
  history
  y |*> #=> algebra(|_self>,|*>,|y>)
  y^3
  y^3 |1>
  13 X^2 y^3 |1>
  history
  q

2015-04-18
  X |*> #=> algebra(|x>,|*>,|_self>)
  exp[X,6] |1>
  full-exp[X,6] |1>
  q

2015-04-18
  load breakfast-menu.sw
  dump
  list-kets |food: *>
  reset
  history
  load adult-wage-pattern-recognition--saved-simm.sw
  norm |above-50K> => .000127534753220 |_self>
  norm |below-50K> => .000040453074433 |_self>
  h |*> #=> normalize[100] coeff-sort norm M select[1,5] similarity-result |_self>
  h |example-5707>
  h |example-9629>
  h |example-14039>
  history
  w |*> #=> normalize[100] coeff-sort norm M apply-weights[5,4,3,2,1] similarity-result |_self>
  w |example-5707>
  h |example-5707>
  history
  table[node,coeff] select[1,10] similarity-result |example-5707>
  t |*> #=> table[node,coeff] select[1,20] 100 similarity-result |_self>
  history
  t |example-5707>
  history
  t |*> #=> table[node,coeff,answer] select[1,20] 10000 similarity-result |_self>
  t |example-5707>
  t |*> #=> table[node,coeff,M] select[1,20] 10000 similarity-result |_self>
  t |example-5707>
  history
  t |example-8>
  t |example-9629>
  t |example-5362>
  history
  equal? |*> #=> equal(h|_self>,100 answer |_self>)
  is-equal? |*> #=> max-elt wif(equal? |_self>,|True>,|False>)
  table[input,h,answer,is-equal?] split |example-5707 example-9629 example-14039 example-731>
  history
  h2 |*> #=> normalize[100] coeff-sort norm M select[1,20] similarity-result |_self>
  h |*> #=> normalize[100] coeff-sort norm M select[1,20] similarity-result |_self>
  table[input,h,answer,is-equal?] split |example-5707 example-9629 example-14039 example-731>
  h |*> #=> normalize[100] coeff-sort norm M select[1,10] similarity-result |_self>
  table[input,h,answer,is-equal?] split |example-5707 example-9629 example-14039 example-731>
  |list> => |example-5707> + |example-9629> + |example-14039> + |example-731> + |example-5362> + |example-8> + |example-5354> + |example-9825> + |example-14761> + |example-14586> + |example-8934> + |example-11743> + |example-10676> + |example-9861> + |example-7228> + |example-8039> + |example-11380> + |example-7476> + |example-10797> + |example-13409> + |example-14147> + |example-4809> + |example-5080>
  history
  |table> #=> table[input,h,answer,is-equal?] "" |list>
  "" |table>
  history
  history 1000
  h |*> #=> normalize[100] coeff-sort norm M apply-weights[10000,1000,100,10,1] similarity-result |_self>
  "" |table>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  h |*> #=> normalize[100] coeff-sort norm M apply-weights[1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1] similarity-result |_self>
  [A
  
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  h |*> #=> normalize[100] coeff-sort norm M apply-weights[1000000000,100000000,10000000,1000000,100000,1000000,100000,10000,1000,100] similarity-result |_self>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  h |*> #=> normalize[100] coeff-sort norm M apply-weights[10000,1000,100,10,1,1,1] similarity-result |_self>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  h |*> #=> normalize[100] coeff-sort norm M select[1,1] similarity-result |_self>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  h |*> #=> normalize[100] coeff-sort norm M select[1,2] similarity-result |_self>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  h |*> #=> normalize[100] coeff-sort norm M select[1,3] similarity-result |_self>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  h |*> #=> normalize[100] coeff-sort norm M apply-weights[16,8,4,2,1] similarity-result |_self>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  .
  h |*> #=> normalize[100] coeff-sort norm M apply-weights[256,64,16,4,1] similarity-result |_self>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  .
  .
  h |*> #=> normalize[100] coeff-sort norm M select[1,1] similarity-result |_self>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  .
  history
  table[input,h,answer,is-equal?] rel-kets[input-pattern] |>
  h |*> #=> normalize[100] coeff-sort norm M select[1,5] similarity-result |_self>
  table[input,h,answer,is-equal?] rel-kets[input-pattern] |>
  history
  dump |*>
  q

2015-04-20
  apply-weights[3.1415,0,6,7.3,13] split |a b c d e f g h i j>
  T |*> #=> arithmetic(|_self>,|+>,|x: 1>)
  T |x: 0>
  T^7 |x: 0>
  history
  T |x: 0>
  T^7 |x: 0>
  exp[T,7] |x: 0>
  q

2015-04-20
  load-image[220px-Lenna.png] |image>
  q

2015-04-20
  load-image[220px-Lenna.png] |image>
  dump
  list-kets |image: *>
  dump
  rel-kets[R]
  dump
  history
  reset
  load-image[220px-Lenna.png] |Lenna>
  dump
  history
  save 220-lenna.sw
  history
  q

2015-04-20
  load-image[220px-Lenna.png] |Lenna>
  save 220-lenna.sw
  history
  q

2015-04-20
  load-image[220px-Lenna.png] |Lenna>
  save 220-lenna.sw
  history
  map[R,old-R] rel-kets[R] |>
  save 220-lenna.sw
  diff-R |*> #=> - 0.5 old-R left |_self> + old-R |_self> + - 0.5 old-R right |_self>
  diff-R |Lenna: pixel: 219: 218>
  diff-R |*> #=> right - 0.5 old-R left |_self> + old-R |_self> + left - 0.5 old-R right |_self>
  diff-R |Lenna: pixel: 219: 218>
  left |Lenna: pixel: 219: 218>
  old-R left |Lenna: pixel: 219: 218>
  old-R right |Lenna: pixel: 219: 218>
  old-R |Lenna: pixel: 219: 218>
  history
  map[diff-R,R] rel-kets[old-R] |>
  save 220-lenna.sw
  dump
  diff-R |*> #=> pos( right - 0.5 old-R left |_self> + old-R |_self> + left - 0.5 old-R right |_self>)
  map[diff-R,R] rel-kets[old-R] |>
  dump
  history
  reset
  q

2015-04-20
  load find-left-right-difference-lenna-image.sw
  dump
  history
  save left-right-difference-lenna-image.sw
  history
  q

2015-04-20
  load-image[220px-Lenna.png] |Lenna>
  save-image[tmp-len.png] |Lenna>
  q

2015-04-20
  load-image[220px-Lenna.png] |Lenna>
  save-image[tmp-len.png] |Lenna>
  q

2015-04-20
  load-image[220px-Lenna.png] |Lenna>
  save-image[tmp-len.png] |Lenna>
  q

2015-04-20
  load-image[220px-Lenna.png] |Lenna>
  save-image[tmp-len.png] |Lenna>
  dump
  load find-image-left-right-difference.sw
  history
  save-image[tmp-len.png] |Lenna>
  
  dump
  round[0] R |Lenna: pixel: 219: 217>
  R |Lenna: pixel: 219: 217>
  round[1] R |Lenna: pixel: 219: 217>
  history
  reset
  load-image[220px-Lenna.png] |Lenna>
  save-image[tmp-len.png] |Lenna>
  diff-R |*> #=> pos( right - 0.5 old-R left |_self> + old-R |_self> + left - 0.5 old-R right |_self>)
  map[R,old-R] rel-kets[R]
  dump |*>
  map[diff-R,R] rel-kets[old-R]
  dump
  save-image[tmp-len.png] |Lenna>
  q

2015-04-20
  load-image[220px-Lenna.png] |Lenna>
  load find-image-left-right-difference.sw
  history
  save-image[tmp-len.png] |Lenna>
  history
  reset
  load-image[220px-Lenna.png] |Lenna>
  load create-2d-image-difference.sw
  history
  dump
  history
  save-image[tmp-len.png] |Lenna>
  history
  reset
  load-image[220px-Lenna.png] |Lenna>
  load create-2d-image-difference--inverse.sw
  .
  reset
  load-image[220px-Lenna.png] |Lenna>
  load create-2d-image-difference--inverse.sw
  history
  save-image[tmp-len.png] |Lenna>
  reset
  load-image[220px-Lenna.png] |Lenna>
  load create-2d-images-difference--inverse-amplify-by-10.sw[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[
  
  
  
  
  
  
  
  
  
  
  
  
  load create-2d-image-difference--inverse--amplify-by-10.sw
  save-image[tmp-len.png] |Lenna>
  history
  reset
  load-image[220px-Lenna.png] |Lenna>
  load create-2d-image-difference--inverse--amplify-by-20.sw
  save-image[tmp-len.png] |Lenna>
  reset
  load-image[220px-Lenna.png] |Lenna>
  load create-2d-image-difference--precompute.sw
  history
  save lenna-2d-image-difference-precomuted.sw
  q

2015-04-21
  load adult-wage-pattern-recognition--saved-simm.sw
  
  norm |above-50K> => .000127534753220 |_self>
  norm |below-50K> => .000040453074433 |_self>
  h |*> #=> normalize[100] coeff-sort norm M select[1,5] similarity-result |_self>
  equal? |*> #=> equal(h|_self>,100 answer |_self>)
  is-equal? |*> #=> max-elt wif(equal? |_self>,|True>,|False>)
  table[input,h,answer,is-equal?] |example-5707>
  history
  table[input,h,answer,is-equal?] rel-kets[input-pattern] |>
  h |*> #=> M select[1,1] similarity-result |_self>
  table[input,h,answer,is-equal?] rel-kets[input-pattern] |>
  h |*> #=> 100 M select[1,1] similarity-result |_self>
  table[input,h,answer,is-equal?] rel-kets[input-pattern] |>
  q

2015-04-21
  pattern |word: *> #=> spell |_self>
  pattern |word: frog>
  to-US |word: centre> => |word: center>
  to-US |word: fibre> => |word: fiber>
  to-US |word: litre> => |word: liter>
  to-US |word: theatre> => |word: theater> + |word: theatre>
  
  to-US |word: colour> => |word: color>
  to-US |word: flavour> => |word: flavor>
  to-US |word: humour> => |word: humor>
  to-US |word: labour> => |word: labor>
  to-US |word: neighbour> => |word: neighbor>
  
  to-US |word: apologise> => |word: apologize>
  to-US |word: organise> => |word: organize>
  to-US |word: recognise> => |word: recognize>
  
  to-US |word: analyse> => |word: analyze>
  to-US |word: breathalyse> => |word: breathalyze>
  to-US |word: paralyse> => |word: paralyze>
  
  to-US |word: leukaemia> => |word: leukemia>
  to-US |word: manoeuvre> => |word: maneuver>
  to-US |word: oestrogen> => |word: estrogen>
  to-US |word: paediatric> => |word: pediatric>
  
  to-US |word: defence> => |word: defense>
  to-US |word: licence> => |word: license>
  to-US |word: offence> => |word: offense>
  to-US |word: pretence> => |word: pretense>
  dump
  list-kets |word: *>
  is-third-president |*> #=> is-equal[3] number |_self>
  number |fred> => |number: 3>
  number |sam> => |number: 5>
  history
  is-third-president |fred>
  is-third-president |sam>
  load early-us-presidents.sw
  dump
  is-third-president |*> #=> is-equal[3] president-number |_self>
  list-kets |US President: *>
  create inverse
  list-kets |US President: *>
  dump
  history
  "" list-kets |US President: *>
  context
  reset
  strange-int-list |number: 33>
  sil |*> #=> strange-int-list |_self>
  map[sil,SIL] range(|number: 1>,|number: 10000>)
  dump
  self-similar[SIL] |number: 33>
  table[number,coeff] select[1,200] self-similar[SIL] |number: 33>
  history
  
  SIL |number: 33>
  SIL |number: 62>
  SIL |number: 116>
  -- in a weird kind of way, that is interesting!!!
  save history

2015-04-22
  load names.sw
  F1 |*> #=> intn-find-topic[names] |_self>
  F1 |daryl>
  F1 |raymond>
  F1 |dahma>
  F1 |fred>
  F1 |myritle>
  F1 |bobby>
  F1 |harry>
  q

2015-04-26
  rank split |a b c d e>
  q

2015-04-26
  rank split |a b c d e f>
  table[ket,coeff] rank split |a b c d e f g>
  q

2015-04-27
  lower-case |fish>
  lower-case |fiSHHSy 37>
  upper-case |fish>
  q

2015-04-27
  load fred-sam-friends.sw
  dump
  starts-with |Fr>
  starts-with |Har>
  create inverse
  starts-with |Har>
  starts-with |>
  q

2015-04-27
  push-float 3 |x>
  push-float split 3 |a b c>
  split 3 |abc>
  split 3 |a b c>
  split |a a b a a b c>
  history
  q

2015-04-27
  split 3 |a b c>
  push-float 3 |a b c>
  push-float split 3 |a b c>
  factor |number: 1908734>
  factor |number: 290874>
  2 5 5 5 7 2 |x>
  factor |number: 3500>
  pop-float factor |number: 3500>
  push-float pop-float factor |number: 3500>
  push-float 3 |x>
  q

2015-04-27
  push-float 3 |x>
  push-float split 3 |a b c>
  q

2015-04-27
  one-gram |a b c d e>
  one-gram |text: just some text here my friend>
  q

2015-04-27
  one-gram |text: just some text here>
  one-gram |text: what the fuck is going on>
  one-gram |text: here is some for you>
  one-gram |text: here>
  q

2015-04-27
  one-gram |text: here>
  q

2015-04-30
  one-gram |text: just some rubbish here!>
  one-gram |text: fish soup fish cats dogs cats rats>
  one-gram lower-case |Just some RANdom fish text just some yo!>
  q

2015-05-01
  plus-or-minus |x>
  plus-or-minus |+ x>
  plus-or-minus |- x>
  plus-or-minus 7|x>
  |x> + -|x>
  table[ket] plus-or-minus 7|x>
  sqrt |49> => plus-or-minus |7>
  table[number,sqrt] |49>
  history
  sqrt |4> => plus-or-minus |2>
  sqrt |9> => plus-or-minus |3>
  sqrt |16> => plus-or-minus |4>
  sqrt |25> => plus-or-minus |5>
  sqrt |36> => plus-or-minus |6>
  table[number,sqrt] split |4 9 16 25 36 49>
  history
  q

2015-05-01
  pattern |word: *> #=> spell |_self>
  pattern |word: frog>
  to-US |word: centre> => |word: center>
  to-US |word: fibre> => |word: fiber>
  to-US |word: litre> => |word: liter>
  to-US |word: theatre> => |word: theater> + |word: theatre>
  
  to-US |word: colour> => |word: color>
  to-US |word: flavour> => |word: flavor>
  to-US |word: humour> => |word: humor>
  to-US |word: labour> => |word: labor>
  to-US |word: neighbour> => |word: neighbor>
  
  to-US |word: apologise> => |word: apologize>
  to-US |word: organise> => |word: organize>
  to-US |word: recognise> => |word: recognize>
  
  to-US |word: analyse> => |word: analyze>
  to-US |word: breathalyse> => |word: breathalyze>
  to-US |word: paralyse> => |word: paralyze>
  
  to-US |word: leukaemia> => |word: leukemia>
  to-US |word: manoeuvre> => |word: maneuver>
  to-US |word: oestrogen> => |word: estrogen>
  to-US |word: paediatric> => |word: pediatric>
  
  to-US |word: defence> => |word: defense>
  to-US |word: licence> => |word: license>
  to-US |word: offence> => |word: offense>
  to-US |word: pretence> => |word: pretense>
  dump
  list-kets |word: *>
  is-third-president |*> #=> is-equal[3] number |_self>
  number |fred> => |number: 3>
  number |sam> => |number: 5>
  history
  is-third-president |fred>
  is-third-president |sam>
  load early-us-presidents.sw
  dump
  is-third-president |*> #=> is-equal[3] president-number |_self>
  list-kets |US President: *>
  create inverse
  list-kets |US President: *>
  dump
  history
  "" list-kets |US President: *>
  context
  reset
  strange-int-list |number: 33>
  sil |*> #=> strange-int-list |_self>
  map[sil,SIL] range(|number: 1>,|number: 10000>)
  dump
  self-similar[SIL] |number: 33>
  table[number,coeff] select[1,200] self-similar[SIL] |number: 33>
  history
  
  SIL |number: 33>
  SIL |number: 62>
  SIL |number: 116>
  -- in a weird kind of way, that is interesting!!!
  save history
  history
  SIL |number: 575>
  strict-rank-table[input,SIL] range(|number: 1>,|number: 10>)
  history
  how-many |>
  how-many foo |bah>
  extract-value |number: 13>
  push-float 3|number>
  push-float pop-float factor |number: 3500>
  q

2015-05-03
  |a> => "" |b>
  |b> => "" |c>
  |c> => "" |a>
  dump
  |a> #=> "" |b>
  |b> #=> "" |c>
  |c> #=> "" |a>
  dump
  "" |a>
  history
  dump
  q

2015-05-04
  load-image[220px-Lenna.png] |Lenna>
  q

2015-05-04
  equal(|b>,|a> + |b> + |c> + |d> + |e>)
  is-coeff-equal[1] 0.2|x>
  is-coeff-equal[1] 1|x>
  is-coeff-greater-than[0] 0|x>
  is-ceoff-greater-than[1] 0.2|x>
  is-coeff-greater-than[0] 0.2|x>
  is-coeff-greater-than[0] 1|x>
  normalze (|a> + |b> + |c> + |d>)
  normalize (|a> + |b> + |c> + |d>)
  normalize[100] (|a> + |b> + |c> + |d>)
  history
  q

2015-05-04
  load-image[220px-Lenna.png] |Lenna>
  show-image |Lenna>
  load apply-smooth.sw
  history
  show-image |Lenna>
  history
  save-image[inverse-smooth-1-lenna.png] |Lenna>
  history
  reset
  load-image[220px-Lenna.png] |Lenna>
  load apply-smooth.sw
  show-image |Lenna>
  history
  reset
  load-image[220px-Lenna.png] |Lenna>
  load apply-smooth-5.sw
  show-image |Lenna>
  history
  save-image[smooth-5-lenna.png] |Lenna>
  history
  save saved-smooth-5-lenna.sw
  history
  load apply-R-R0-diff.sw
  show-image |Lenna>
  history
  save-image[R-R0-diff-lenna.png] |Lenna>
  history
  reset
  load saved-smooth-5-lenna.sw
  load apply-invert-R-R0-diff.sw
  show-image |Lenna>
  history
  reset
  load saved-smooth-5-lenna.sw
  load apply-invert-R-R0-diff.sw
  show-image |Lenna>
  history
  save saved-invert-R-R0-diff-smooth-5-lenna.sw
  history
  save-image[invert-R-R0-diff-smooth-5-lenna.png] |Lenna>
  history
  save history

2015-05-04
  abs - |x>
  q

2015-05-04
  sigmoid-abs - 3|x>
  max-filter[10] 13 |x>
  history
  load saved-smooth-5-lenna.sw
  load improved-apply-invert-R-R0-diff.sw
  show-image |Lenna>
  history
  save-image[invert-abs-R-R0-diff-smooth-5-lenna.png] |Lenna>
  history
  save history

2015-05-04
  sigmoid-abs - 3|x>
  max-filter[10] 13 |x>
  history
  load saved-smooth-5-lenna.sw
  load improved-apply-invert-R-R0-diff.sw
  show-image |Lenna>
  history
  save-image[invert-abs-R-R0-diff-smooth-5-lenna.png] |Lenna>
  history
  save history
  reset
  load saved-smooth-5-lenna.sw
  load improved-apply-invert-R-R0-diff-v2.sw
  show-image |Lenna>
  history
  save-image[invert-abs-R-R0-diff-smooth-5-lenna-v2.png] |Lenna>
  save history

2015-05-05
  abs - |x>
  sigmoid-abs - |x>
  max-filter[10] 20 |x>
  max-filter[13] 9|x>
  max-filter[255] 257 |x>
  load-image[220px-Lenna.png] |Lenna>
  load apply-smooth-20.sw
  save saved-smooth-20-lenna.sw
  show-image |Lenna>
  load improved-apply-invert-R-R0-diff-v3.sw
  show-image |Lenna>
  save-image[invert-R-R0-diff-smooth-20-lenna.png] |Lenna>
  save history

2015-05-05
  abs - |x>
  sigmoid-abs - |x>
  max-filter[10] 20 |x>
  max-filter[13] 9|x>
  max-filter[255] 257 |x>
  load-image[220px-Lenna.png] |Lenna>
  load apply-smooth-20.sw
  save saved-smooth-20-lenna.sw
  show-image |Lenna>
  load improved-apply-invert-R-R0-diff-v3.sw
  show-image |Lenna>
  save-image[invert-R-R0-diff-smooth-20-lenna.png] |Lenna>
  save history
  history
  reset
  load saved-smooth-20-lenna.sw
  show-image |Lenna>
  save-image[smooth-20-lenna.png] |Lenna>
  history
  load improved-apply-invert-R-R0-diff-v4.sw
  show-image |Lenna>
  history
  save saved-invert-R-R0-diff-smooth-20-lenna.sw
  history
  save-image[invert-R0-R-diff-smooth-20-lenna-v4.png] |Lenna>
  history
  save history

2015-05-05
  load-image[220px-Lenna.png] |Lenna>
  show-image |Lenna>
  load apply-smooth.sw
  history
  show-image |Lenna>
  history
  save-image[inverse-smooth-1-lenna.png] |Lenna>
  history
  reset
  load-image[220px-Lenna.png] |Lenna>
  load apply-smooth.sw
  show-image |Lenna>
  history
  reset
  load-image[220px-Lenna.png] |Lenna>
  load apply-smooth-5.sw
  show-image |Lenna>
  history
  save-image[smooth-5-lenna.png] |Lenna>
  history
  save saved-smooth-5-lenna.sw
  history
  load apply-R-R0-diff.sw
  show-image |Lenna>
  history
  save-image[R-R0-diff-lenna.png] |Lenna>
  history
  reset
  load saved-smooth-5-lenna.sw
  load apply-invert-R-R0-diff.sw
  show-image |Lenna>
  history
  reset
  load saved-smooth-5-lenna.sw
  load apply-invert-R-R0-diff.sw
  show-image |Lenna>
  history
  save saved-invert-R-R0-diff-smooth-5-lenna.sw
  history
  save-image[invert-R-R0-diff-smooth-5-lenna.png] |Lenna>
  history
  save history
  q

2015-05-05
  sigmoid-abs - 3|x>
  max-filter[10] 13 |x>
  history
  load saved-smooth-5-lenna.sw
  load improved-apply-invert-R-R0-diff.sw
  show-image |Lenna>
  history
  save-image[invert-abs-R-R0-diff-smooth-5-lenna.png] |Lenna>
  history
  save history
  reset
  load saved-smooth-5-lenna.sw
  load improved-apply-invert-R-R0-diff-v2.sw
  show-image |Lenna>
  history
  save-image[invert-abs-R-R0-diff-smooth-5-lenna-v2.png] |Lenna>
  save history
  history
  q

2015-05-06
  load-image[220px-Lenna.png] |Lenna>
  load apply-smooth.sw
  show-image |Lenna>
  history
  q

2015-05-06
  abs - |x>
  sigmoid-abs - |x>
  max-filter[10] 20 |x>
  max-filter[13] 9|x>
  max-filter[255] 257 |x>
  load-image[220px-Lenna.png] |Lenna>
  load apply-smooth-20.sw
  save saved-smooth-20-lenna.sw
  show-image |Lenna>
  load improved-apply-invert-R-R0-diff-v3.sw
  show-image |Lenna>
  save-image[invert-R-R0-diff-smooth-20-lenna.png] |Lenna>
  save history
  history
  reset
  load saved-smooth-20-lenna.sw
  show-image |Lenna>
  save-image[smooth-20-lenna.png] |Lenna>
  history
  load improved-apply-invert-R-R0-diff-v4.sw
  show-image |Lenna>
  history
  save saved-invert-R-R0-diff-smooth-20-lenna.sw
  history
  save-image[invert-R0-R-diff-smooth-20-lenna-v4.png] |Lenna>
  history
  save history
  q

2015-05-06
  h
  q

2015-05-06
  normalize 0|x>
  normalize (0|x> + 0|y>)
  q

2015-05-07
  load-image[child.png] |child>
  load apply-smooth-20.sw
  [B[B[B[B[B[B[B[Bhistory
  
  history
  save saved-smooth-20-child.sw
  history
  save-image[smooth-20-child.png] |child>
  history
  show-image |child>
  history
  load improved-apply-invert-R-R0-diff-v4.sw
  history
  show-image |child>
  history
  save-image[invert-R0-R-diff-smooth-20-child.png] |child>
  history
  save history

2015-05-09
  load-image[child.png] |child>
  load apply-smooth-20.sw
  [B[B[B[B[B[B[B[Bhistory
  
  history
  save saved-smooth-20-child.sw
  history
  save-image[smooth-20-child.png] |child>
  history
  show-image |child>
  history
  load improved-apply-invert-R-R0-diff-v4.sw
  history
  show-image |child>
  history
  save-image[invert-R0-R-diff-smooth-20-child.png] |child>
  history
  save history
  C |F: 117>
  save saved-invert-R-R0-diff-smooth-20-child.sw
  history
  q

2015-05-10
  op |x> => |a>
  op |x>
  q

2015-05-10
  
  q

2015-05-10
  |lenna> => image-load[200px-Lenna.png] |>
  |lenna> => image-load[220px-Lenna.png] |>
  dump
  history
  save history

2015-05-10
  |lenna> => image-load[200px-Lenna.png] |>
  |lenna> => image-load[220px-Lenna.png] |>
  dump
  history
  save history
  q

2015-05-10
  |lenna> => image-load[220px-Lenna.png] |>
  q

2015-05-10
  |lenna> => image-load[220px-Lenna.png] |>
  q

2015-05-10
  |lenna> => load-image[220px-lenna.png] |>
  dump
  q

2015-05-10
  |lenna> => image-load[220px-Lenna.png] |>
  history
  save latest-lenna.sw
  how-many "" |lenna>
  q

2015-05-10
  load improved-fragment-webpages.sw
  load create-minimalist-average-website-fragments.sw
  history
  dump
  history
  save saved-minimalist-average-website-fragments.sw
  history
  q

2015-05-10
  load improved-fragment-webpages.sw
  load label-training-data-for-website-fragments.sw
  dump
  
  history
  save saved-label-training-data-for-website-fragments.sw
  q

2015-05-10
  load saved-average-categorize.sw
  load create-cat-ave-pat-rec-matrix.sw
  matrix[result]
  save history

2015-05-10
  load saved-average-categorize.sw
  load create-cat-ave-pat-rec-matrix.sw
  matrix[result]
  save history
  history
  save category-average-pat-rec-result-matrix.sw
  matrix[result]
  save history

2015-05-10
  |lenna> => image-load[220px-lenna.png] |>
  q

2015-05-11
  |lenna> => image-load[220px-lenna.png] |>
  dump
  history
  |lenna> => image-load[220px-lenna.png] |>
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  history
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  history
  how-many "" |lenna>
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  how-many "" |lenna>
  history
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  how-many "" |lenna>
  history
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  how-many "" |lenna>
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  how-many "" |lenna>
  dump
  history
  save new-lenna.sw
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  history
  subtraction-invert[255] "" |lenna>
  history
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  save 20-20-image.sw
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  save 10-10-image.sw
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  save 10-5-image.sw
  q

2015-05-11
  q

2015-05-11
  |lenna> => image-load[220px-Lenna.png] |>
  save 50-50-image.sw
  q

2015-05-11
  pixels |edge lenna> => image-load[invert-R0-R-diff-smooth-20-lenna-v4.png] |>
  history
  save 50-50-edge-lenna.sw
  q

2015-05-11
  pixels |edge lenna> => image-load[invert-R0-R-diff-smooth-20-lenna-v4.png] |>

2015-05-11
  |image> => image-load[50-50-edge-lenna.sw] |>
  load 50-50-edge-lenna.sw
  history
  image-save[fish] "" |image>
  dump
  history
  image-save[fish] pixels |edge lenna>
  reset
  load saved-average-categorize-pixels.sw
  dump
  history
  image-save[fish] pixels |phi: 1>
  
  history
  reset
  load red--saved-average-categorize-pixels.sw
  history
  image-save[fish] pixels |phi: 1>
  history
  q

2015-05-11
  load red--saved-average-categorize-pixels.sw
  image-save[fish] pixels |phi: 1>
  history
  image-save[fish] max-filter[255] 100 pixels |phi: 1>
  history
  image-save[fish] subtraction-invert[255] max-filter[255] 100 pixels |phi: 1>
  history
  save history

2015-05-11
  load saved-average-categorize.sw
  load create-cat-ave-pat-rec-matrix.sw
  matrix[result]
  save history
  history
  save category-average-pat-rec-result-matrix.sw
  matrix[result]
  save history
  result |abc 11>
  table[ket,coeff] normalize[100] result |abc 11>
  
  history
  matrix[result]
  M |phi: 0> => |abc>
  M |phi: 1> => |adelaidenow>
  M |phi: 2> => |slashdot>
  M |phi: 3> => |smh>
  M |phi: 4> => |wikipedia>
  M |phi: 5> => |youtube>
  matrix[result]
  matrix[M,result]
  save history

2015-05-11
  load saved-average-categorize.sw
  load create-cat-ave-pat-rec-matrix.sw
  matrix[result]
  save history
  history
  save category-average-pat-rec-result-matrix.sw
  matrix[result]
  save history
  result |abc 11>
  table[ket,coeff] normalize[100] result |abc 11>
  
  history
  matrix[result]
  M |phi: 0> => |abc>
  M |phi: 1> => |adelaidenow>
  M |phi: 2> => |slashdot>
  M |phi: 3> => |smh>
  M |phi: 4> => |wikipedia>
  M |phi: 5> => |youtube>
  matrix[result]
  matrix[M,result]
  save history
  merged-matrix[M,result]
  matrix[M,result]
  save history

2015-05-12
  load red--saved-average-categorize-pixels.sw
  image-save[fish] pixels |phi: 1>
  history
  image-save[fish] max-filter[255] 100 pixels |phi: 1>
  history
  image-save[fish] subtraction-invert[255] max-filter[255] 100 pixels |phi: 1>
  history
  save history
  history
  q

2015-05-12
  op |x> => |a>
  op |y> => |b>
  op |z> => |c>
  average-categorize[op,0.6,phi,ave]
  dump
  op |u> => 0.7|a>
  average-categorize[op,0.6,phi,ave]
  dump
  op |v> => 0.7 |a>
  average-categorize[op,0.6,phi,ave]
  dump
  history
  ket-simm(1.49|a>,0.7|a>)
  q

2015-05-12
  pixels |edge lenna> => image-load[invert-R0-R-diff-smooth-20-lenna-v4.png] |>
  history
  save full-220-edge-lenna.sw
  q

2015-05-12
  load saved-average-categorize.sw
  load create-cat-ave-pat-rec-matrix.sw
  matrix[result]
  save history
  history
  save category-average-pat-rec-result-matrix.sw
  matrix[result]
  save history
  result |abc 11>
  table[ket,coeff] normalize[100] result |abc 11>
  
  history
  matrix[result]
  M |phi: 0> => |abc>
  M |phi: 1> => |adelaidenow>
  M |phi: 2> => |slashdot>
  M |phi: 3> => |smh>
  M |phi: 4> => |wikipedia>
  M |phi: 5> => |youtube>
  matrix[result]
  matrix[M,result]
  save history
  merged-matrix[M,result]
  matrix[M,result]
  save history
  history
  q

2015-05-12
  currency |x>
  measure-currency |x>
  measure-currency (|a> + |b> + |c>)
  measure-currenct (0.2|a> + 4|b> + 11|c> + 0.3|d>)
  measure-currency (0.2|a> + 4|b> + 11|c> + 0.3|d>)
  measure-currency 2.71|y>
  q

2015-05-12
  load improved-fragment-webpages.sw
  load label-training-data-for-website-fragments.sw
  history
  average-categorize[training-hash-4B,0.7,phi,average-cat] 
  load create-cat-ave-pat-rec-matrix.sw
  matrix[result]
  history
  M |phi: 1> => |abc>
  M |phi: 2> => |adelaidenow>
  M |phi: 3> => |slashdot>
  M |phi: 4> => |smh>
  M |phi: 5> => |wikipedia>
  M |phi: 6> => |youtube>
  dump
  matrix[M,result]
  history
  merged-matrix[M,result]
  history
  q

2015-05-13
  one-gram |just some words here>
  two-gram |just some words here>
  two-gram |fuck\\nme fred>
  q

2015-05-13
  two-gram |text: just some words here>
   two-gram |fuck\\nme fred>
  q

2015-05-15
  two-gram |text: just some words here>
  two-gram |fuck\\nme fred>
  ket-simm(10|a> + |b>,|a> + |b>)
  q

2015-05-15
  load fred.sw
  load fred-sam-friends.sw
  dump
  q

2015-05-19
  load new-lenna.sw
  starts-with |>
  |thresh> => drop-below[128] "" |lenna>
  starts-with |>
  image-save[fish] "" |thresh>
  history
  q

2015-05-19
  image-save[tmp-junk.png] "" |fish>
  q

2015-05-19
  |list> => 3|a> + 13|b> + 7|c>
  max-coeff "" |list>
  pop-float max-coeff "" |list>
  q

2015-05-19
  load 50-50-edge-lenna.sw
  starts-with |>
  image-show "" |edge lenna>
  q

2015-05-19
  load 50-50-edge-lenna.sw
  supported-ops |edge lenna>
  image-show pixels |edge lenna>
  history
  image-save[random-fish-image.png] pixels |edge lenna>
  q

2015-05-19
  rank split |a b c d e f>
  |lenna> => image-load[220px-lenna.sw] |>
  q

2015-05-19
  load 50-50-image.sw
  supported-ops starts-with |>
  |zero> => 0 "" |lenna>
  show-image "" |zero>
  history
  show-image set-to[255] "" |lenna>
  history
  how-many "" |lenna>
  show-image "" |lenna>
  history
  image-show "" |zero>
  history
  image-show set-to[0] "" |lenna>
  history
  image-show set-to[255] "" |lenna>
  history
  filter-out-red |pixel: R: *> #=> |_self>
  filter-out-red |pixel: *> #=> |_self>
  filter-out-red |pixel: R: *> #=> set-to[255] |_self>
  filter-out-green |pixel: *> #=> |_self>
  filter-out-green |pixel: G: *> #=> set-to[255] |_self>
  history
  image-show filter-out-green filter-out-red "" |lenna>
  history
  save history

2015-05-19
  load 50-50-image.sw
  supported-ops starts-with |>
  |zero> => 0 "" |lenna>
  show-image "" |zero>
  history
  show-image set-to[255] "" |lenna>
  history
  how-many "" |lenna>
  show-image "" |lenna>
  history
  image-show "" |zero>
  history
  image-show set-to[0] "" |lenna>
  history
  image-show set-to[255] "" |lenna>
  history
  filter-out-red |pixel: R: *> #=> |_self>
  filter-out-red |pixel: *> #=> |_self>
  filter-out-red |pixel: R: *> #=> set-to[255] |_self>
  filter-out-green |pixel: *> #=> |_self>
  filter-out-green |pixel: G: *> #=> set-to[255] |_self>
  history
  image-show filter-out-green filter-out-red "" |lenna>
  history
  save history
  filter-in-red |pixel: *> #=> |_self>
  filter-in-red |pixel: R: *> #=> 0 |_self>
  filter-in-green |pixel: *> #=> |_self>
  history
  filter-in-green |pixel: G: *> #=> 0 |_self>
  history
  save history

2015-05-19
  load 50-50-image.sw
  supported-ops starts-with |>
  |zero> => 0 "" |lenna>
  show-image "" |zero>
  history
  show-image set-to[255] "" |lenna>
  history
  how-many "" |lenna>
  show-image "" |lenna>
  history
  image-show "" |zero>
  history
  image-show set-to[0] "" |lenna>
  history
  image-show set-to[255] "" |lenna>
  history
  filter-out-red |pixel: R: *> #=> |_self>
  filter-out-red |pixel: *> #=> |_self>
  filter-out-red |pixel: R: *> #=> set-to[255] |_self>
  filter-out-green |pixel: *> #=> |_self>
  filter-out-green |pixel: G: *> #=> set-to[255] |_self>
  history
  image-show filter-out-green filter-out-red "" |lenna>
  history
  save history
  filter-in-red |pixel: *> #=> |_self>
  filter-in-red |pixel: R: *> #=> 0 |_self>
  filter-in-green |pixel: *> #=> |_self>
  history
  filter-in-green |pixel: G: *> #=> 0 |_self>
  history
  save history
  image-show filter-in-green filter-in-red "" |lenna>
  save history

2015-05-19
  load 50-50-image.sw
  supported-ops starts-with |>
  |zero> => 0 "" |lenna>
  show-image "" |zero>
  history
  show-image set-to[255] "" |lenna>
  history
  how-many "" |lenna>
  show-image "" |lenna>
  history
  image-show "" |zero>
  history
  image-show set-to[0] "" |lenna>
  history
  image-show set-to[255] "" |lenna>
  history
  filter-out-red |pixel: R: *> #=> |_self>
  filter-out-red |pixel: *> #=> |_self>
  filter-out-red |pixel: R: *> #=> set-to[255] |_self>
  filter-out-green |pixel: *> #=> |_self>
  filter-out-green |pixel: G: *> #=> set-to[255] |_self>
  history
  image-show filter-out-green filter-out-red "" |lenna>
  history
  save history
  filter-in-red |pixel: *> #=> |_self>
  filter-in-red |pixel: R: *> #=> 0 |_self>
  filter-in-green |pixel: *> #=> |_self>
  history
  filter-in-green |pixel: G: *> #=> 0 |_self>
  history
  save history
  image-show filter-in-green filter-in-red "" |lenna>
  save history
  save blue-50-lenna.sw
  q

2015-05-19
    filter-in-red |pixel: *> #=> |_self>
    filter-in-red |pixel: R: *> #=> 0 |_self>
    filter-in-green |pixel: *> #=> |_self>
    filter-in-green |pixel: G: *> #=> 0 |_self>
    |blue lenna> => filter-in-green filter-in-red "" |lenna>
  
  history
  q

2015-05-19
  load 50-50-image.sw
    filter-in-red |pixel: *> #=> |_self>
    filter-in-red |pixel: R: *> #=> 0 |_self>
    filter-in-green |pixel: *> #=> |_self>
    filter-in-green |pixel: G: *> #=> 0 |_self>
  |blue lenna> => filter-in-green filter-in-red "" |lenna>
  history
  save blue-50-lenna.sw
  q

2015-05-20
  |lenna> => image-load[220px-lenna.png] |>
  history
  q

2015-05-20
  |lenna> => image-load[220px-lenna.png] |>
  q

2015-05-21
  drop-below[5] (3|a> + 0.3|b> + 7|c> + 23|d> + 4|e>)
  
  q

2015-05-24
  load new-lenna.sw
  |thresh> => drop-below[128] "" |lenna>
  image-show "" |thresh>
  history
  |bw thresh> => set-to[255] "" |thresh>
  history
  image-show "" |bw thresh>
  history
  image-show "" |thresh>
  history
  q

2015-05-24
  pixels |lenna> => image-load[220px-Lenna.png] |>
  history
  pixels |threshold lenna> => drop-below[128] pixels |lenna>
  history
  image-save[threshold-lenna.png] pixels |lenna>
  history
  image-save[threshold-lenna.png] pixels |threshold lenna>
  history
  filter-out-red |pixel: R: *> #=> 0|_self>
  filter-out-green |pixel: G: *> #=> 0|_self>
  history
  filter-out-red |pixel: *> #=> |_self>
  filter-out-green |pixel: *> #=> |_self>
  history
  pixels |r-g filter lenna> => filter-out-red filter-out-green pixels |lenna>
  history
  image-save[rg-filtered-lenna.png] pixels |r-g filter lenna>
  history
  save history

2015-05-24
  pixels |lenna> => image-load[220px-Lenna.png] |>
  history
  pixels |threshold lenna> => drop-below[128] pixels |lenna>
  history
  image-save[threshold-lenna.png] pixels |lenna>
  history
  image-save[threshold-lenna.png] pixels |threshold lenna>
  history
  filter-out-red |pixel: R: *> #=> 0|_self>
  filter-out-green |pixel: G: *> #=> 0|_self>
  history
  filter-out-red |pixel: *> #=> |_self>
  filter-out-green |pixel: *> #=> |_self>
  history
  pixels |r-g filter lenna> => filter-out-red filter-out-green pixels |lenna>
  history
  image-save[rg-filtered-lenna.png] pixels |r-g filter lenna>
  history
  save history
  q

2015-05-25
  fish |cat> => |
  a |x> => |y>
  dump
  q

2015-05-27
  load names.sw
  find-topic[names] |alice>
  q

2015-05-29
  load fast-write-wikipedia-links.sw
  links-to-2 |*> #=> links-to links-to |_self>
  table[wikipage,coeff] select[1,100] links-to-2 |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,100] coeff-sort links-to-2 |WP: Albert_Einstein>
  
  history
  table[wikipage,coeff] 100 self-similar[links-to-2] |WP: Albert_Einstein>
  history
  map[links-to-2,links-to-to] starts-with |WP: >
  history
  save fast-write-wikipedia-links--with-links-to-2.sw
  history
  how-many links-to |WP: Roger_Joseph_Boscovich>
  table[wikipage,coeff] select[1,400] coeff-sort links-to-to |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,400] 100 self-similar[links-to-to] |WP: Albert_Einstein>
  history
  save history

2015-05-29
  load fast-write-wikipedia-links.sw
  links-to-2 |*> #=> links-to links-to |_self>
  table[wikipage,coeff] select[1,100] links-to-2 |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,100] coeff-sort links-to-2 |WP: Albert_Einstein>
  
  history
  table[wikipage,coeff] 100 self-similar[links-to-2] |WP: Albert_Einstein>
  history
  map[links-to-2,links-to-to] starts-with |WP: >
  history
  save fast-write-wikipedia-links--with-links-to-2.sw
  history
  how-many links-to |WP: Roger_Joseph_Boscovich>
  table[wikipage,coeff] select[1,400] coeff-sort links-to-to |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,400] 100 self-similar[links-to-to] |WP: Albert_Einstein>
  history
  save history
  
  history
  q

2015-05-29
  load fast-write-wikipedia-links.sw
  table[wikipage,coeff] links-to |WP: Anarchism>
  history
  table[wikipage,coeff] links-to |WP: Alabama>
  
  history
  table[wikipage,coeff] links-to |WP: Albedo>
  history
  
  C |F: 100>
  
  history
  q

2015-05-30
  load fast-write-wikipedia-links.sw
  load non-linear-links-to-einstein.sw
  table[wikipage,coeff] nl-1 |WP: Albert_Einstein>
  history
  table[wikipage,coeff] nl-12 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-11 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-2 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-3 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-4 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-5 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-6 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-7 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-8 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-9 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-10 |WP: Albert_Einstein>
  table[wikipage,coeff] nl-12 |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,30] coeff-sort links-to select[1,30] coeff-sort links-to select[1,30] coeff-sort links-to select[1,30] coeff-sort links-to nl-12 |WP: Albert_Einstein>
  history
  q

2015-05-30
  load fast-write-wikipedia-links--with-inverse.sw
  context
  dump
  how-many inverse-links-to |WP: Erwin_Schrdinger>
  table[wikipage,coeff] select[1,400] 100 self-similar[inverse-links-to] |WP: Erwin_Schrdinger>
  
  starts-with |WP: Erwin
  history
  starts-with |WP: Erwin>
  starts-with |WP: Richard>
  starts-with |WP: Richard_F>
  history
  table[wikipage,coeff] select[1,400] 100 self-similar[inverse-links-to] |WP: Richard_Feynman>
  table[wikipage,coeff] inverse-links-to |WP: Kuroh5hin>
  inverse-links-to |WP: kuro5hin>
  starts-with |WP: Kur>
  starts-with |WP: Kuro>
  history
  how-many inverse-links-to |WP: Rusty_Foster>
  starts-with |WP: Rusty_>
  starts-with |WP: slashdot>
  starts-with |WP: Slashdot>
  inverse-links-to |WP: Slashdot>
  table[wikipage,coeff] inverse-links-to |WP: Slashdot>
  history
  table[wikipage] inverse-links-to |WP: Slashdot>
  history
  how-many inverse-links-to |WP: Slashdot>
  table[wikipage] inverse-links-to |WP: Slashdot>
  history
  table[wikipage] inverse-links-to |WP: Slashdot>
  history
  starts-with |WP: Goatse>
  starts-with |WP: goatse>
  history
  how-many inverse-links-to |WP: Brussels>
  how-many inverse-links-to |WP: Europa_(web_portal)>
  history
  history 1000
  q

2015-06-02
  |x> => 0.99988|a> + 0.9997|b>
  ""|x>
  subtraction-invert[1] "" |x>
  invert 3|x>
  invert subtraction-invert[1] "" |x>
  load adult-wage-pattern-recognition--saved-simm.sw
  norm |above-50K> => .000127534753220 |_self>
  norm |below-50K> => .000040453074433 |_self>
  
  dump rel-kets[norm]
  rel-kets[norm]
  dump rel-kets[norm] |>
  equal? |*> #=> equal(h|_self>,100 answer |_self>)
  is-equal? |*> #=> max-elt wif(equal? |_self>,|True>,|False>)
  dump |*>
  h |*> #=> normalize[100] coeff-sort norm M invert subtraction-invert[1] select[1,5] similarity-result |_self>
  dump |*>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  history
  h |*> #=> normalize[100] coeff-sort norm M invert subtraction-invert[1] select[1,3] similarity-result |_self>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  history
  h |*> #=> normalize[100] coeff-sort norm M invert subtraction-invert[1] select[1,10] similarity-result |_self>
  table[input,h,answer,is-equal?] pick[1000] rel-kets[input-pattern] |>
  h |*> #=> normalize[100] coeff-sort norm M invert subtraction-invert[1] select[1,5] similarity-result |_self>
  table[input,h,answer,is-equal?] rel-kets[input-pattern] |>
  history
  q

2015-06-02
  load fred-sam-friends.sw
  dump
  find-inverse[friends]
  dump
  q

2015-06-02
  load fast-write-wikipedia-links.sw
  find-inverse[links-to]
  history
  save fast-write-wikipedia-links--test-inverse.sw
  q

2015-06-02
  load 30k--wikipedia-links.sw
  find-inverse[links-to]
  q

2015-06-03
  load fast-write-wikipedia-links.sw
  starts-with |WP: Alb>
  how-many |WP: Albedo>
  how-many links-to |WP: Albedo>
  how-many links-to |WP: Albert_Einstein>
  table[wikipage,coeff] 100 self-similar[links-to] |WP: Albert_Einstein>
  
  history
  
  table[wikipage,coeff] select[1,20] links-to |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,30] links-to |WP: Albert_Einstein>
  history
  
  history
  create inverse
  save fast-write-wikipedia-links--with-inverse.sw
  history
  how-many inverse-links-to |WP: Albert_Einstein>
  table[wikipage,coeff] coeff-sort inverse-links-to |WP: Albert_Einstein>
  history
  table[wikipage,coeff] 100 self-similar[inverse-links-to] |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,400] 100 self-similar[inverse-links-to] |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,30] links-to |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,30] links-to^2 |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,30] coeff-sort links-to^2 |WP: Albert_Einstein>
  history
  table[wikipage,coeff] select[1,30] coeff-sort links-to^3 |WP: Albert_Einstein>
  history
  
  table[wikipage,coeff] select[1,400] coeff-sort links-to^4 |WP: Albert_Einstein>
  
  history
  
  q

2015-06-05
  load 30k--wikipedia-links.sw
  find-inverse[links-to]
  starts-with |WP: Apple>
  how-many links-to |WP: Apple>
  how-many inverse-links-to |WP: Apple>
  table[wikipage] inverse-links-to |WP: Apple>
  table[wikipage,coeff] select[1,400] 100 self-similar[inverse-links-to] |WP: Apple>
  history
  
  starts-with |WP: Erwin_Sch>
  starts-with |WP: Richard_Feyn>
  starts-with |WP: Cat>
  |list> => |WP: Erwin_Schrdinger> + |WP: Richard_Feynman> + |WP: Cat> + |WP: Dog> + |WP: Apple> + |WP: Adelaide> + |WP: University_of_Adelaide> + |WP: Particle_physics> + |WP: Lisp_(programming_language)> + |WP: APL_(programming_language)> + |WP: SQL> + |WP: SPARQL> + |WP: The_Doors> + |WP: Rugby> + |WP: Australian_Football_League>
  
  how-many-in-links |*> #=> how-many inverse-links-to |_self>
  table[wikipage,how-many-in-links] "" |list>
  history
  
  load find-inverse-simm.sw
  table[wikipage,coeff] inverse-simm |WP: Cat>
  
  history
  
  load find-inverse-simm.sw
  history
  save 30k--wikipedia-links--with-inverse-simm.sw
  table[wikipage,coeff] inverse-links-to |WP: Cat>
  history
  table[wikipage] inverse-links-to |WP: Cat>
  history
  table[wikipage] inverse-links-to |WP: Horse>
  history
  common[inverse-links-to] (|WP: Cat> + |WP: Horse>)
  ket-simm(inverse-links-to |WP: Cat>,inverse-links-to |WP: Horse>)
  100 ket-simm(inverse-links-to |WP: Cat>,inverse-links-to |WP: Horse>)
  common[inverse-links-to] (|WP: Cat> + |WP: Donkey>)
  history
  [B[B[B
  common[inverse-links-to] (|WP: Cat> + |WP: Pig>)
  table[wikipage,coeff] inverse-simm |WP: Dog>
  
  history
  table[wikipage,coeff] select[1,30] inverse-simm |WP: Dog>
  history
  table[wikipage,coeff] select[1,15] inverse-simm |WP: Dog>
  history
  table[wikipage,coeff] select[1,20] inverse-simm |WP: Dog>
  history
  T |*> #=> table[wikipage,coeff] select[1,20] inverse-simm |_self>
  T |WP: Erwin_Schrdinger>
  T |WP: Richard_Feynman>
  T |WP: Cat>
  T |WP: Apple>
  T |WP: Adelaide>
  T |WP: University_of_Adelaide>
  T |WP: Particle_physics>
  T |WP: Lisp_(programming_language)>
  T |WP: APL_(programming_language)>
  T |WP: SQL>
  T |WP: SPARQL>
  T |WP: The_Doors>
  T |WP: Rugby>
  T |WP: Australian_Football_League>
  save history

2015-06-05
  load 30k--wikipedia-links.sw
  find-inverse[links-to]
  history
  save 30k--wikipedia-links--with-inverse.sw
  history
  q

2015-06-06
  load 30k--wikipedia-links.sw
  history
  how-many-out-links |*> #=> how-many links-to |_self>
  table[wikipage,how-many-out-links] select[1,100] reverse sort-by[how-many-out-links] starts-with |WP: >
  history
  rank-table[wikipage,how-many-out-links] select[1,100] reverse sort-by[how-many-out-links] starts-with |WP: >
  find-inverse[links-to]
  history
  how-many-in-links |*> #=> how-many inverse-links-to |_self>
  rank-table[wikipage,how-many-in-links] select[1,100] reverse sort-by[how-many-in-links] starts-with |WP: >
  table[wikipage,coeff] select[1,50] coeff-sort links-to |WP: Banana>
  
  history
  
  table[wikipage,coeff] select[1,50] coeff-sort inverse-links-to |WP: Banana>
  table[wikipage,coeff] select[1,100] 100 self-similar[links-to] |WP: Banana>
  table[wikipage,coeff] select[1,100] 100 self-similar[inverse-links-to] |WP: Banana>
  table[wikipage,coeff] select[1,50] 100 self-similar[links-to] |WP: Banana>
  history
  table[wikipage,coeff] select[1,50] 100 self-similar[inverse-links-to] |WP: Banana>
  S |*> #=> table[wikipage,coeff] select[1,200] 100 self-similar[inverse-links-to] |_self>
  S |WP: Australia>
  history
  S |WP: St_Peters,_South_Australia>
  table[wikipage] inverse-links-to |WP: St_Peters,_South_Australia>
  history
  S |WP: Kangaroo>
  how-many inverse-links-to |WP: Kangaroo>
  history
  S |WP: 1_(number)>
  history
  save history

2015-06-08
  load fred-sam-friends.sw
  dump
  create inverse
  dump
  reset
  load fred-sam-friends.sw
  dump
  history
  find-inverse[friends]
  dump
  q

2015-06-09
  load 30k--wikipedia-links.sw
  history
  how-many-out-links |*> #=> how-many links-to |_self>
  table[wikipage,how-many-out-links] select[1,100] reverse sort-by[how-many-out-links] starts-with |WP: >
  history
  rank-table[wikipage,how-many-out-links] select[1,100] reverse sort-by[how-many-out-links] starts-with |WP: >
  find-inverse[links-to]
  history
  how-many-in-links |*> #=> how-many inverse-links-to |_self>
  rank-table[wikipage,how-many-in-links] select[1,100] reverse sort-by[how-many-in-links] starts-with |WP: >
  table[wikipage,coeff] select[1,50] coeff-sort links-to |WP: Banana>
  
  history
  
  table[wikipage,coeff] select[1,50] coeff-sort inverse-links-to |WP: Banana>
  table[wikipage,coeff] select[1,100] 100 self-similar[links-to] |WP: Banana>
  table[wikipage,coeff] select[1,100] 100 self-similar[inverse-links-to] |WP: Banana>
  table[wikipage,coeff] select[1,50] 100 self-similar[links-to] |WP: Banana>
  history
  table[wikipage,coeff] select[1,50] 100 self-similar[inverse-links-to] |WP: Banana>
  S |*> #=> table[wikipage,coeff] select[1,200] 100 self-similar[inverse-links-to] |_self>
  S |WP: Australia>
  history
  S |WP: St_Peters,_South_Australia>
  table[wikipage] inverse-links-to |WP: St_Peters,_South_Australia>
  history
  S |WP: Kangaroo>
  how-many inverse-links-to |WP: Kangaroo>
  history
  S |WP: 1_(number)>
  history
  save history
  S |WP: Coffee>
  history
  how-many inverse-links-to |WP: Coffee>
  S |WP: New_York_City>
  history
  S |WP: The_Good_Wife>
  S |WP: William_Shatner>
  S |WP: Group_theory>
  S |WP: Laser>
  S |WP: Pacific_Ocean>
  [B[B[B[B[B[B[B[B[BS |WP: Complex_number>
  history
  S |WP: Complex_number>
  history
  S |WP: William_Shakespeare>
  H |*> #=> how-many inverse-links-to |_self>
  H |WP: DNS>
  H |WP: bread>
  H |WP: Domain_Name_System>
  S |WP: Domain_Name_System>
  how-many inverse-links-to |WP: Angelina_Jolie>
  S |WP: Angelina_Jolie>
  S |WP: Manhattan>
  q

2015-06-10
  load 30k--wikipedia-frequency-list.sw
  table[word,coeff] select[1,50] words-1 |WP: Abraham_Lincoln>
  history
  table[word,coeff] select[1,100] words-1 |WP: Abraham_Lincoln>
  history
  
  rank-table[word,coeff] select[1,100] words-1 |WP: Abraham_Lincoln>[A
  history
  how-many words-1 |WP: Abraham_Lincoln>
  history
  rank-table[word,coeff] select[1,100] words-1 |WP: Albert_Einstein>
  F1 |*> #=> intn-find-topic[words-1] |_self>
  F1 |albert einstein>
  history
  T |*> #=> table[wikipage,coeff] select[1,300] 100 intn-find-topic[words-1] |_self>
  T |river torrens>
  history
  T |adelaide university>
  history
  T |apple juice>
  history
  T |albert einstein>
  history
  T |russia china japan australia new zealand egypt>
  history
  q

2015-06-10
  load 30k--wikipedia-links--with-inverse.sw
  S |*> #=> table[wikipage,coeff] select[1,200] 100 self-similar[inverse-links-to] |_self>
  S |WP: General_relativity>
  q

2015-06-10
  load simple-shopping-basket.sw
  dump
  100 similar[basket] |f>
  q

2015-06-10
  load 30k--wikipedia-links.sw
  find-inverse[links-to]
  starts-with |WP: Apple>
  how-many links-to |WP: Apple>
  how-many inverse-links-to |WP: Apple>
  table[wikipage] inverse-links-to |WP: Apple>
  table[wikipage,coeff] select[1,400] 100 self-similar[inverse-links-to] |WP: Apple>
  history
  
  starts-with |WP: Erwin_Sch>
  starts-with |WP: Richard_Feyn>
  starts-with |WP: Cat>
  |list> => |WP: Erwin_Schrdinger> + |WP: Richard_Feynman> + |WP: Cat> + |WP: Dog> + |WP: Apple> + |WP: Adelaide> + |WP: University_of_Adelaide> + |WP: Particle_physics> + |WP: Lisp_(programming_language)> + |WP: APL_(programming_language)> + |WP: SQL> + |WP: SPARQL> + |WP: The_Doors> + |WP: Rugby> + |WP: Australian_Football_League>
  
  how-many-in-links |*> #=> how-many inverse-links-to |_self>
  table[wikipage,how-many-in-links] "" |list>
  history
  
  load find-inverse-simm.sw
  table[wikipage,coeff] inverse-simm |WP: Cat>
  
  history
  
  load find-inverse-simm.sw
  history
  save 30k--wikipedia-links--with-inverse-simm.sw
  table[wikipage,coeff] inverse-links-to |WP: Cat>
  history
  table[wikipage] inverse-links-to |WP: Cat>
  history
  table[wikipage] inverse-links-to |WP: Horse>
  history
  common[inverse-links-to] (|WP: Cat> + |WP: Horse>)
  ket-simm(inverse-links-to |WP: Cat>,inverse-links-to |WP: Horse>)
  100 ket-simm(inverse-links-to |WP: Cat>,inverse-links-to |WP: Horse>)
  common[inverse-links-to] (|WP: Cat> + |WP: Donkey>)
  history
  [B[B[B
  common[inverse-links-to] (|WP: Cat> + |WP: Pig>)
  table[wikipage,coeff] inverse-simm |WP: Dog>
  
  history
  table[wikipage,coeff] select[1,30] inverse-simm |WP: Dog>
  history
  table[wikipage,coeff] select[1,15] inverse-simm |WP: Dog>
  history
  table[wikipage,coeff] select[1,20] inverse-simm |WP: Dog>
  history
  T |*> #=> table[wikipage,coeff] select[1,20] inverse-simm |_self>
  T |WP: Erwin_Schrdinger>
  T |WP: Richard_Feynman>
  T |WP: Cat>
  T |WP: Apple>
  T |WP: Adelaide>
  T |WP: University_of_Adelaide>
  T |WP: Particle_physics>
  T |WP: Lisp_(programming_language)>
  T |WP: APL_(programming_language)>
  T |WP: SQL>
  T |WP: SPARQL>
  T |WP: The_Doors>
  T |WP: Rugby>
  T |WP: Australian_Football_League>
  save history
  history
  T |WP: Rugby>
  history
  S |*> #=> table[wikipage,coeff] select[1,300] 100 self-similar[inverse-links-to] |_self>
  S |WP: Joan_Robinson>
  history
  S |WP: Charlton_Heston>
  S |WP: Pulp_Fiction>
  history
  what-do-you-think-of-when-you-hear |*> #=> select[1,1] clean similar[inverse-links-to] |_self>
  q

2015-06-10
  load 30k--wikipedia-links--with-inverse.sw
  S |*> #=> table[wikipage,coeff] select[1,200] 100 self-similar[inverse-links-to] |_self>
  S |WP: General_relativity>
  H |*> #=> how-many inverse-links-to |_self>
  H |WP: General_relativity>
  
  H |WP: Large_Hadron_Collider>
  S |WP: Large_Hadron_Collider>
  S |WP: Thermonuclear_weapon>
  S |WP: Quantum_mechanics>
  H |*> #=> how-many inverse-links-to |_self>
  H |WP: Australia>
  H |WP: Kangaroo>
  H |WP: 1_(number)>
  H |WP: Coffee>
  H |WP: New_York_City>
  H |WP: The_Good_Wife>
  H |WP: William_Shatner>
  H |WP: Group_theory>
  H |WP: Laser>
  H |WP: Pacific_Ocean>
  H |WP: Complex_number>
  H |WP: Dirac_equation>
  H |WP: Money>
  H |WP: Global_warming>
  H |WP: Harry_Potter>
  H |WP: CAPTCHA>
  H |WP: Bread>
  H |WP: Orangutan>
  H |WP: William_Shakespeare>
  H |WP: Domain_Name_System>
  H |WP: Angelina_Jolie>
  H |WP: DNA>
  H |WP: Charlton_Heston>
  H |WP: Pulp_Fiction>
  H |WP: Pulp_Fiction>
  H |WP: Pulp_Fiction>
  H |WP: Manhattan>
  H |WP: General_relativity>
  S |WP: Special_relativity>
  H |WP: Special_relativity>
  starts-with |WP: Philosoph>
  table[wikipage] starts-with |WP: Philosophi>
  H |WP: Philosophi_Naturalis_Principia_Mathematica>
  S |WP: Philosophi_Naturalis_Principia_Mathematica>
  H |WP: Large_Hadron_Collider>
  H |WP: Philosophiae_Naturalis_Principia_Mathematica>
  S |WP: Philosophiae_Naturalis_Principia_Mathematica>
  
  history
  H |WP: Philosophiae_Naturalis_Principia_Mathematica>
  H |WP: Philosophiae_Naturalis_Principia_Mathematica>
  
  H |WP: Thermonuclear_weapon>
  H |WP: Quantum_mechanics>
  H |WP: Beer>
  S |WP: Beer>
  
  H |WP: Beer>
  
  history
  what-do-you-think-of-when-you-hear |*> #=> select[1,1] clean similar[inverse-links-to] |_self>
  what-do-you-think-of-when-you-hear |WP: Pen>
  what-do-you-think-of-when-you-hear |WP: Fox>
  history
  save history

2015-06-10
  load 30k--wikipedia-links.sw
  find-inverse[links-to]
  how-many-out-links |*> #=> how-many links-to |_self>
  how-many-in-links |*> #=> how-many inverse-links-to |_self>
  table[wikipage,coeff] select[1,200] sort-by[how-many-out-links] starts-with |WP: >
  history
  table[wikipage,coeff] select[1,200] reverse sort-by[how-many-out-links] starts-with |WP: >
  history
  table[wikipage,how-many-out-links] select[1,200] reverse sort-by[how-many-out-links] starts-with |WP: >
  
  history
  table[wikipage,how-many-out-links] select[1,100] reverse sort-by[how-many-out-links] starts-with |WP: >
  history
  table[wikipage,how-many-in-links] select[1,100] reverse sort-by[how-many-in-links] starts-with |WP: >
  history
  starts-with |WP: Richard_Fe>
  table[wikipage,coeff] select[1,400] 100 self-similar[inverse-links-to] |WP: Richard_Feynman>
  history
  nl |*> #=> select[1,30] coeff-sort links-to |_self>
  table[wikipage,coeff] nl^10 |WP: Richard_Feynman>
  hsitory
  history
  ket-simm (inverse-links-to|WP: Car>,inverse-links-to|WP: Global_warming>)
  ket-simm (links-to|WP: Car>,links-to|WP: Global_warming>)
  S |*> #=> table[wikipage,coeff] select[1,400] 100 self-similar[inverse-links-to] |_self>
  S |WP: Dirac_equation>
  S |WP: Money>
  S |WP: George_W_Bush>
  S |WP: Global_warming>
  how-many inverse-links-to |WP: Money>
  how-many inverse-links-to |WP: Kangaroo>
  S |WP: Harry_Potter>
  S |WP: CAPTCHA>
  S |WP: Bread>
  S |WP: Orangutan>
  S |WP: DNA>
  history
  S |WP: Harvard_University>
  history
  H |*> #=> how-many inverse-links-to |_self>
  
  H |WP: Harvard_University>
  q

2015-06-12
  load 30k--wikipedia-links--with-inverse.sw
  S |*> #=> table[wikipage,coeff] select[1,200] 100 self-similar[inverse-links-to] |_self>
  S |WP: General_relativity>
  H |*> #=> how-many inverse-links-to |_self>
  H |WP: General_relativity>
  
  H |WP: Large_Hadron_Collider>
  S |WP: Large_Hadron_Collider>
  S |WP: Thermonuclear_weapon>
  S |WP: Quantum_mechanics>
  H |*> #=> how-many inverse-links-to |_self>
  H |WP: Australia>
  H |WP: Kangaroo>
  H |WP: 1_(number)>
  H |WP: Coffee>
  H |WP: New_York_City>
  H |WP: The_Good_Wife>
  H |WP: William_Shatner>
  H |WP: Group_theory>
  H |WP: Laser>
  H |WP: Pacific_Ocean>
  H |WP: Complex_number>
  H |WP: Dirac_equation>
  H |WP: Money>
  H |WP: Global_warming>
  H |WP: Harry_Potter>
  H |WP: CAPTCHA>
  H |WP: Bread>
  H |WP: Orangutan>
  H |WP: William_Shakespeare>
  H |WP: Domain_Name_System>
  H |WP: Angelina_Jolie>
  H |WP: DNA>
  H |WP: Charlton_Heston>
  H |WP: Pulp_Fiction>
  H |WP: Pulp_Fiction>
  H |WP: Pulp_Fiction>
  H |WP: Manhattan>
  H |WP: General_relativity>
  S |WP: Special_relativity>
  H |WP: Special_relativity>
  starts-with |WP: Philosoph>
  table[wikipage] starts-with |WP: Philosophi>
  H |WP: Philosophi_Naturalis_Principia_Mathematica>
  S |WP: Philosophi_Naturalis_Principia_Mathematica>
  H |WP: Large_Hadron_Collider>
  H |WP: Philosophiae_Naturalis_Principia_Mathematica>
  S |WP: Philosophiae_Naturalis_Principia_Mathematica>
  
  history
  H |WP: Philosophiae_Naturalis_Principia_Mathematica>
  H |WP: Philosophiae_Naturalis_Principia_Mathematica>
  
  H |WP: Thermonuclear_weapon>
  H |WP: Quantum_mechanics>
  H |WP: Beer>
  S |WP: Beer>
  
  H |WP: Beer>
  
  history
  what-do-you-think-of-when-you-hear |*> #=> select[1,1] clean similar[inverse-links-to] |_self>
  what-do-you-think-of-when-you-hear |WP: Pen>
  what-do-you-think-of-when-you-hear |WP: Fox>
  history
  save history
  what-do-you-think-of-when-you-hear |*> #=> select[1,1] clean shuffle select[1,5] similar[inverse-links-to] |_self>
  what-do-you-think-of-when-you-hear |*> #=> clean pick-elt select[1,5] similar[inverse-links-to] |_self>
  what-do-you-think-of-when-you-hear |WP: Fox>
  what-do-you-think-of-when-you-hear |WP: Diamond>
  history
  merge-lables(|WP: > + |fish>)
  merge-labels(|WP: > + |fish>)
  what-do-you-think-of-when-you-hear |*> #=> clean pick-elt select[1,5] similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  what-do-you-think-of-when-you-hear |Physics>
  what-do-you-think-of-when-you-hear |Physics>
  extract-value |WP: fish>
  history
  what-do-you-think-of-when-you-hear |*> #=> extract-value clean pick-elt select[1,5] similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  what-do-you-think-of-when-you-hear |Student>
  what-do-you-think-of-when-you-hear |Quentin_Tarantino>
  what-do-you-think-of-when-you-hear |Quentin_Tarantino>
  what-do-you-think-of-when-you-hear |House>
  what-do-you-think-of-when-you-hear |House>
  what-do-you-think-of-when-you-hear |House>
  what-do-you-think-of-when-you-hear |Elephant>
  what-do-you-think-of-when-you-hear |Elephant>
  what-do-you-think-of-when-you-hear |Rock_and_roll>
  what-do-you-think-of-when-you-hear |Rock_and_roll>
  what-do-you-think-of-when-you-hear |Paris>
  what-do-you-think-of-when-you-hear |Paris>
  what-do-you-think-of-when-you-hear |Sildenafil>
  what-do-you-think-of-when-you-hear |Cryptography>
  what-do-you-think-of-when-you-hear |Cryptography>
  what-do-you-think-of-when-you-hear |Cryptography>
  what-do-you-think-of-when-you-hear |Drake_equation>
  what-do-you-think-of-when-you-hear |Drake_equation>
  what-do-you-think-of-when-you-hear |Slashdot>
  what-do-you-think-of-when-you-hear |Slashdot>
  what-do-you-think-of-when-you-hear |Slashdot>
  what-do-you-think-of-when-you-hear |Scotland>
  what-do-you-think-of-when-you-hear |Scotland>
  what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Food>
  [6~what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Waste>
  what-do-you-think-of-when-you-hear |Waste>
  what-do-you-think-of-when-you-hear |Waste>
  what-do-you-think-of-when-you-hear |Waste>
  how-many inverse-links-to |WP: Waste>
  what-do-you-think-of-when-you-hear |The_Terminator>
  what-do-you-think-of-when-you-hear |The_Terminator>
  what-do-you-think-of-when-you-hear |The_Terminator>
  what-do-you-think-of-when-you-hear |The_Terminator>
  what-do-you-think-of-when-you-hear |Inflammatory_bowel_disease>
  what-do-you-think-of-when-you-hear |Inflammatory_bowel_disease>
  what-do-you-think-of-when-you-hear |Inflammatory_bowel_disease>
  what-do-you-think-of-when-you-hear |Fibromyalgia>
  what-do-you-think-of-when-you-hear |Fibromyalgia>
  what-do-you-think-of-when-you-hear |Fibromyalgia>
  what-do-you-think-of-when-you-hear |Fibromyalgia>
  .
  what-do-you-think-of-when-you-hear |Algebra>
  what-do-you-think-of-when-you-hear |Algebra>
  .
  .
  what-do-you-think-of-when-you-hear |Functional_analysis>
  what-do-you-think-of-when-you-hear |Functional_analysis>
  what-do-you-think-of-when-you-hear^5 |The_Terminator>
  history
  save history

2015-06-14
  load 30k--wikipedia-links--with-inverse.sw
  S |*> #=> table[wikipage,coeff] select[1,200] 100 self-similar[inverse-links-to] |_self>
  S |WP: General_relativity>
  H |*> #=> how-many inverse-links-to |_self>
  H |WP: General_relativity>
  
  H |WP: Large_Hadron_Collider>
  S |WP: Large_Hadron_Collider>
  S |WP: Thermonuclear_weapon>
  S |WP: Quantum_mechanics>
  H |*> #=> how-many inverse-links-to |_self>
  H |WP: Australia>
  H |WP: Kangaroo>
  H |WP: 1_(number)>
  H |WP: Coffee>
  H |WP: New_York_City>
  H |WP: The_Good_Wife>
  H |WP: William_Shatner>
  H |WP: Group_theory>
  H |WP: Laser>
  H |WP: Pacific_Ocean>
  H |WP: Complex_number>
  H |WP: Dirac_equation>
  H |WP: Money>
  H |WP: Global_warming>
  H |WP: Harry_Potter>
  H |WP: CAPTCHA>
  H |WP: Bread>
  H |WP: Orangutan>
  H |WP: William_Shakespeare>
  H |WP: Domain_Name_System>
  H |WP: Angelina_Jolie>
  H |WP: DNA>
  H |WP: Charlton_Heston>
  H |WP: Pulp_Fiction>
  H |WP: Pulp_Fiction>
  H |WP: Pulp_Fiction>
  H |WP: Manhattan>
  H |WP: General_relativity>
  S |WP: Special_relativity>
  H |WP: Special_relativity>
  starts-with |WP: Philosoph>
  table[wikipage] starts-with |WP: Philosophi>
  H |WP: Philosophi_Naturalis_Principia_Mathematica>
  S |WP: Philosophi_Naturalis_Principia_Mathematica>
  H |WP: Large_Hadron_Collider>
  H |WP: Philosophiae_Naturalis_Principia_Mathematica>
  S |WP: Philosophiae_Naturalis_Principia_Mathematica>
  
  history
  H |WP: Philosophiae_Naturalis_Principia_Mathematica>
  H |WP: Philosophiae_Naturalis_Principia_Mathematica>
  
  H |WP: Thermonuclear_weapon>
  H |WP: Quantum_mechanics>
  H |WP: Beer>
  S |WP: Beer>
  
  H |WP: Beer>
  
  history
  what-do-you-think-of-when-you-hear |*> #=> select[1,1] clean similar[inverse-links-to] |_self>
  what-do-you-think-of-when-you-hear |WP: Pen>
  what-do-you-think-of-when-you-hear |WP: Fox>
  history
  save history
  what-do-you-think-of-when-you-hear |*> #=> select[1,1] clean shuffle select[1,5] similar[inverse-links-to] |_self>
  what-do-you-think-of-when-you-hear |*> #=> clean pick-elt select[1,5] similar[inverse-links-to] |_self>
  what-do-you-think-of-when-you-hear |WP: Fox>
  what-do-you-think-of-when-you-hear |WP: Diamond>
  history
  merge-lables(|WP: > + |fish>)
  merge-labels(|WP: > + |fish>)
  what-do-you-think-of-when-you-hear |*> #=> clean pick-elt select[1,5] similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  what-do-you-think-of-when-you-hear |Physics>
  what-do-you-think-of-when-you-hear |Physics>
  extract-value |WP: fish>
  history
  what-do-you-think-of-when-you-hear |*> #=> extract-value clean pick-elt select[1,5] similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  what-do-you-think-of-when-you-hear |Student>
  what-do-you-think-of-when-you-hear |Quentin_Tarantino>
  what-do-you-think-of-when-you-hear |Quentin_Tarantino>
  what-do-you-think-of-when-you-hear |House>
  what-do-you-think-of-when-you-hear |House>
  what-do-you-think-of-when-you-hear |House>
  what-do-you-think-of-when-you-hear |Elephant>
  what-do-you-think-of-when-you-hear |Elephant>
  what-do-you-think-of-when-you-hear |Rock_and_roll>
  what-do-you-think-of-when-you-hear |Rock_and_roll>
  what-do-you-think-of-when-you-hear |Paris>
  what-do-you-think-of-when-you-hear |Paris>
  what-do-you-think-of-when-you-hear |Sildenafil>
  what-do-you-think-of-when-you-hear |Cryptography>
  what-do-you-think-of-when-you-hear |Cryptography>
  what-do-you-think-of-when-you-hear |Cryptography>
  what-do-you-think-of-when-you-hear |Drake_equation>
  what-do-you-think-of-when-you-hear |Drake_equation>
  what-do-you-think-of-when-you-hear |Slashdot>
  what-do-you-think-of-when-you-hear |Slashdot>
  what-do-you-think-of-when-you-hear |Slashdot>
  what-do-you-think-of-when-you-hear |Scotland>
  what-do-you-think-of-when-you-hear |Scotland>
  what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Food>
  [6~what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Food>
  what-do-you-think-of-when-you-hear |Waste>
  what-do-you-think-of-when-you-hear |Waste>
  what-do-you-think-of-when-you-hear |Waste>
  what-do-you-think-of-when-you-hear |Waste>
  how-many inverse-links-to |WP: Waste>
  what-do-you-think-of-when-you-hear |The_Terminator>
  what-do-you-think-of-when-you-hear |The_Terminator>
  what-do-you-think-of-when-you-hear |The_Terminator>
  what-do-you-think-of-when-you-hear |The_Terminator>
  what-do-you-think-of-when-you-hear |Inflammatory_bowel_disease>
  what-do-you-think-of-when-you-hear |Inflammatory_bowel_disease>
  what-do-you-think-of-when-you-hear |Inflammatory_bowel_disease>
  what-do-you-think-of-when-you-hear |Fibromyalgia>
  what-do-you-think-of-when-you-hear |Fibromyalgia>
  what-do-you-think-of-when-you-hear |Fibromyalgia>
  what-do-you-think-of-when-you-hear |Fibromyalgia>
  .
  what-do-you-think-of-when-you-hear |Algebra>
  what-do-you-think-of-when-you-hear |Algebra>
  .
  .
  what-do-you-think-of-when-you-hear |Functional_analysis>
  what-do-you-think-of-when-you-hear |Functional_analysis>
  what-do-you-think-of-when-you-hear^5 |The_Terminator>
  history
  save history
  table[wikipage] exp[what-do-you-think-of-when-you-hear,10] |The_Terminator>
  history
  table[wikipage] exp[what-do-you-think-of-when-you-hear,10] |Sodomy>
  history
  what-do-you-think-of-when-you-hear |Sodomy>
  what-do-you-think-of-when-you-hear |Sodomy>
  dump |*>
  table[wikipage,coeff] select[1,5] similar[inverse-links-to] |WP: Sodomy>
  
  how-many inverse-links-to |WP: Sodomy>
  T |*> #=> table[wikipage,coeff] select[1,5] similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  T |Sodomy>
  dump |*>
  T2 |*> #=> table[wikipage,coeff] pick-elt select[1,5] similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  history
  T2 |Sodomy>
  history
  T3 |*> #=> table[wikipage,coeff] extract-value select[1,5] similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  T3 |Sodomy>
  history 1000
  q

2015-06-15
  load 30k--wikipedia-links--with-inverse.sw
  T |*> #=> table[wikipage,coeff] select[1,5] similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  T |The_Terminator>
  history
  T2 |*> table[wikipage,coeff] select[1,200] similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  T2 |The_Terminator>
  
  history
  T2 |*> #=> table[wikipage,coeff] select[1,200] similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  T2 |The_Terminator>
  
  H |*> #=> how-many inverse-links-to |_self>
  H |The_Terminator>
  history
  how-many inverse-links-to |WP: The_Terminator>
  H |*> #=> how-many inverse-links-to merge-labels(|WP: > + |_self>)
  H |The_Terminator>
  history
  T2 |*> #=> table[wikipage,coeff] select[1,200] 100 similar[inverse-links-to] merge-labels(|WP: > + |_self>)
  
  history
  pick-elt inverse-links-to |WP: Sodomy>
  pick-elt similar[inverse-links-to] |WP: Sodomy>
  history
  H |Question>
  how-many inverse-links-to |WP: Question>
  H |Iteration>
  q

2015-06-15
  M |x1> => 0.0|y1> + 4.0|y2> + 2.0|y3>
  M |x2> => |y1> + 0.0|y2> + |y3>
  M |x3> => |y1> + 2.0|y2> + 4.0|y3>
  M |x4> => 0.0|y1> + 3.0|y2> + 4.0|y3>
  dump
  M (|x1> + |x2> + |x3> + |x4>)
  M (9|x1> + 3|x2> + 0|x3> + 4|x4>)
  O |a1> => |a2>
  O |a2> => |a3>
  O |a3> => |a4>
  O |a4> => |a5>
  O |a5> => |a6>
  O |a6> => |a7>
  O |a7> => |a8>
  O |a8> => |a9>
  O |a9> => |a10>
  O |a10> => |a1> + |b1>
  
  O |b1> => |b2>
  O |b2> => |b3>
  O |b3> => |b4>
  O |b4> => |b5>
  O |b5> => |b6>
  O |b6> => |b7>
  O |b7> => |b1>
  matrix[O]
  O |a4> => |a5> + 300 |b5>
  O |b2> => |b3> + 0.5 |a2>
  matrix[O]
  merged-matrix[O,O,O,O,O,O,O,O,O,O]
  fact |0> => |1>
  n-1 |*> #=> arithmetic(|_self>,|->,|1>)
  fact |*> #=> arithmetic( |_self>, |*>, fact n-1 |_self>)
  fib |0> => |0>
  fib |1> => |1>
  n-1 |*> #=> arithmetic(|_self>,|->,|1>)
  n-2 |*> #=> arithmetic(|_self>,|->,|2>)
  fib |*> #=> arithmetic( fib n-1 |_self>, |+>, fib n-2 |_self>)
  fib-ratio |*> #=> arithmetic( fib |_self> , |/>, fib n-1 |_self> )table[number,fact,fib] range(|1>,|11>)
  
  table[number,fact,fib] range(|1>,|11>)
  history
  |context> => |context: non-linear resonance>
  
  resonance |*> #=> 1000 drop-below[0.99] simm(""|_self>, ""|g>) |g>
   |g> => |a> + |b> + |c> + |d>
   |f1> => |a>
   |f2> => |a> + |b>
   |f3> => |a> + |b> + |c>
   |f4> => |a> + |b> + |c> + 0.900|d>
   |f5> => 0.950|a> + |b> + |c> + |d>
   |f6> => |a> + |b> + |c> + |d>
   |f7> => |a> + |b> + |c> + |d> + |e>dum
  dump
  |list> => split |f1 f2 f3 f4 f5 f6 f7>
  dump
  table[pattern,resonance] "" |list>
  dump
  resonance |*> #=> 1000 drop-below[0.99] simm(""|_self>, ""|g>) |_self>
  table[pattern,resonance] "" |list>
  dump
  resonance |*> #=> 1000 drop-below[0.99] simm(""|_self>, ""|g>) |g>
  table[pattern,resonance] "" |list>
  
  dump
  non-linear-resonance |*> #=> 1000 drop-below[0.99] simm(""|_self>, ""|g>) |g>
  weak-resonance |*> #=> 200 drop-below[0.6] simm(""|_self>, ""|g>) |g>
  
  dump
  history
  table[pattern,weak-resonance,non-linear-resonance] "" |list>
  dump
  history
  table[pattern,weak-resonance,non-linear-resonance] "" |list>
  history
  q

2015-06-16
  load fred-sam-friends.sw
  dump
  find-inverse[friends]
  dump
  
  q

2015-06-19
  rank split |a b c d e>
  table[char,coeff] rank split |a b c d e>
  q

2015-06-25
  rank split |a b c d>
  coeff-sort rank split |a b c d>
  dump
  M |yes> => |yes> + -|no>
  M |yes>
  M |no> => |no> + -|yes>
  M |no>
  M split |yes no>
  M (0.8|yes> + 0.2|no>)
  matrix[M]
  dump
  context yes no matrix
  M |yes> => |yes> + -1|no>
  
  M |no> => |no> + -1|yes>
  dump
  save yes-no-matrix.sw
  context she is out of my league
  features |my perfect woman> => |beautiful> + |smart> + |skinny> + |educated> + |loving> + |sexy>
  features |Mary> => |loving> + |skinny>
  features |Liz> => |smart> + |educated> + |loving>
  features |Jane> => |skinny> + |sexy>
  features |Mia> => |smart> + |skinny> + |educated> + |loving>
  features |Emma> => |athletic> + |skinny> + |sexy> + |beautiful> + |religious>
  features |Donna> => |beautiful> + |smart> + |skinny> + |educated> + |sexy>
  features |the goddess> => |beautiful> + |smart> + |skinny> + |educated> + |loving> + |sexy>
  dump
  table[woman] rel-kets[features]
  she-is-out-of-my-league |*> #=> in-range[80,100] ket-simm(features |_self>,features |my perfect woman>)
  history
  table[woman,she-is-out-of-my-league] rel-kets[features]
  history
  ket-simm(features |Mary>,features |my perfect woman>)
  history
  she-is-out-of-my-league |*> #=> drop-below[80] ket-simm(features |_self>,features |my perfect woman>)
  table[woman,she-is-out-of-my-league] rel-kets[features]
  history
  she-is-out-of-my-league |Mary>
  history
  she-is-out-of-my-league |*> #=> ket-simm(features |_self>,features |my perfect woman>)
  
  table[woman,she-is-out-of-my-league] rel-kets[features]
  history
  she-is-out-of-my-league |*> #=> coeff-in-range[80,100] 100 ket-simm(features |_self>,features |my perfect woman>)
  table[woman,she-is-out-of-my-league] rel-kets[features]
  history
  she-is-in-my-league |*> #=> coeff-in-range[50,80] 100 ket-simm(features |_self>,features |my perfect woman>)
  not-all-that-interested-in-her |*> #=> coeff-in-range[0,49] 100 ket-simm(features |_self>,features |my perfect woman>)
  history
  table[woman,she-is-out-of-my-league,she-is-in-my-league,not-all-that-interested-in-her] rel-kets[features]
  history
  table[woman,not-all-that-interested-in-her,she-is-in-my-league,she-is-out-of-my-league] rel-kets[features]
  history
  rename-simm |simm> => | >
  she-is-in-my-league |*> #=> coeff-in-range[50,80] 100 rename-simm ket-simm(features |_self>,features |my perfect woman>)
  table[woman,not-all-that-interested-in-her,she-is-in-my-league,she-is-out-of-my-league] rel-kets[features]
  dump
  she-is-out-of-my-league |*> #=> coeff-in-range[80,100] 100 rename-simm ket-simm(features |_self>,features |my perfect woman>)
  not-all-that-interested-in-her |*> #=> coeff-in-range[0,49] 100 rename-simm ket-simm(features |_self>,features |my perfect woman>)
  table[woman,not-all-that-interested-in-her,she-is-in-my-league,she-is-out-of-my-league] rel-kets[features]
  dump
  history
  table[woman,not-all-that-interested-in-her,she-is-in-my-league,she-is-out-of-my-league] rel-kets[features]
  q

2015-06-28
  load 30k--wikipedia-links--with-inverse.sw
  history
  load 30k--wikipedia-links.sw
  find-inverse[links-to]
  load pick-top-5.sw
  table[wikipage,coeff] "" |list>
  "" |list>
  history
  rel-kets[top-5]
  how-many inverse-links-to |Knowledge>
  how-many inverse-links-to |WP: Knowledge>
  load pick-top-5.sw
  "" |list>
  rel-kets[top-5]
  dump |*>
  load pick-top-5.sw
  load pick-top-5.sw
  table[page,coeff] "" |list>
  rel-kets[top-5]
  table[page,coeff] top-5 |WP: Angst>
  T |*> #=> table[wikipage,coeff] top-5 |_self>
  T |WP: Knowledge>
  history
  T |*> #=> table[wikipage,coeff] top-5 merge-labels(|WP: > + |_self>)
  T |Knowledge>
  T |Outline_of_education>
  T |Knowledge>
  T |Community_college>
  how-many-in-links |*> #=> how-many inverse-links-to |_self>
  history
  S |*> #=> table[wikipage,how-many-in-links] top-5 merge-labels(|WP: > + |_self>)
  S |Knowledge>
  S |Bliss_bibliographic_classification>
  history
  rel-kets[top-5]
  S |Angst>
  rel-kets[top-5]
  S |Knowledge>
  history
  reweight |*> #=> |_self>
  reweight |WP: Angst> => 0|_self>
  history
  S2 |*> #=. table[wikipage,how-many-in-links] reweight top-5 merge-labels(|WP: > + |_self>)
  S2 |Knowledge>
  history
  S2 |*> #=> table[wikipage,how-many-in-links] reweight top-5 merge-labels(|WP: > + |_self>)
  S |Knowledge>
  S2 |Knowledge>
  history
  top-5 |WP: Knowledge>
  reweight top-5 |WP: Knowledge>
  drop reweight top-5 |WP: Knowledge>
  history
  S2 |*> #=> table[wikipage,how-many-in-links] drop reweight top-5 merge-labels(|WP: > + |_self>)
  S2 |Knowledge>
  q

2015-06-30
  M |yes> => |yes> + -|no>
  M |no> => -|yes> + |no>
  matrix[M]
  dump
  matrix[M]
  M |yes>
  drop M |yes>
  drop M |no>
  drop M (|yes> + |no>)
  drop M (0.8|yes> + 0.2|no>)
  drop M (0.2|yes> + 0.8|no>)
  smooth |f0> => 0.75|f0> + 0.25|f1>
  smooth |f1> => 0.25|f0> + 0.5|f1> + 0.25|f2>
  smooth |f2> => 0.25|f1> + 0.5|f2> + 0.25|f3>
  smooth |f3> => 0.25|f2> + 0.5|f3> + 0.25|f4>
  smooth |f4> => 0.25|f3> + 0.5|f4> + 0.25|f5>
  smooth |f5> => 0.25|f4> + 0.5|f5> + 0.25|f6>
  smooth |f6> => 0.25|f5> + 0.5|f6> + 0.25|f7>
  smooth |f7> => 0.25|f6> + 0.5|f7> + 0.25|f8>
  smooth |f8> => 0.25|f7> + 0.5|f8> + 0.25|f9>
  smooth |f9> => 0.25|f8> + 0.5|f9> + 0.25|f10>
  smooth |f10> => 0.25|f9> + 0.75|f10>
  matrix[smooth]
  
  smooth |f0> => 0.75|f0> + 0.25|f1>
  smooth |f1> => 0.25|f0> + 0.5|f1> + 0.25|f2>
  smooth |f2> => 0.25|f1> + 0.5|f2> + 0.25|f3>
  smooth |f3> => 0.25|f2> + 0.5|f3> + 0.25|f4>
  smooth |f4> => 0.25|f3> + 0.5|f4> + 0.25|f5>
  smooth |f5> => 0.25|f4> + 0.5|f5> + 0.25|f6>
  smooth |f6> => 0.25|f5> + 0.5|f6> + 0.25|f7>
  smooth |f7> => 0.25|f6> + 0.5|f7> + 0.25|f8>
  smooth |f8> => 0.25|f7> + 0.5|f8> + 0.25|f9>
  smooth |f9> => 0.25|f8> + 0.5|f9> + 0.25|f10>
  smooth |f10> => 0.25|f9> + 0.75|f10>
  matrix[smooth]
  |context> => |context: prolog example>
  
  mother |sally> => |trude>
  child |trude> = > |sally>
  
  father |sally> => |tom>
  child |tom> => |sally>
  
  father |erica> => |tom>
  child |tom> +=> |erica>
  
  father |tom> => |mike>
  child |mike> => |tom>
  
  parent |*> #=> mother |_self> + father |_self>
  sibling |*> #=> child parent |_self>          -- this being the BKO equivalent of: sibling(X, Y) :- parent_child(Z, X), parent_child(Z, Y) 
  clean-sibling |*> #=> drop (child parent |_self> + -|_self>)
  dump
  sibling |sally>
  sibling |erica>
  clean-sibling |sally>
  clean-sibling |erica>
  mbr(|erica>,clean-sibling|sally>)
  history
  mbr(|rob>,clean-sibling|sally>)
  history
  is-sally-sibling |*> #=> do-you-know mbr(|_self>, clean-sibling|sally>)
  is-sally-sibling |erica>
  is-sally-sibling |rob>
  dump
  is-sally-sibling |erica>
  is-sally-sibling |george>
  context
  h
  icontext
  reset
  |context> => |context: prolog example>
  
  mother |sally> => |trude>
  child |trude> = > |sally>
  
  father |sally> => |tom>
  child |tom> => |sally>
  
  father |erica> => |tom>
  child |tom> +=> |erica>
  
  father |tom> => |mike>
  child |mike> => |tom>
  
  parent |*> #=> mother |_self> + father |_self>
  sibling |*> #=> child parent |_self>          -- this being the BKO equivalent of: sibling(X, Y) :- parent_child(Z, X), parent_child(Z, Y) 
  sibling-of |*> #=> clean drop (child parent |_self> + -|_self>)
  dump
  child |trude> +=> |harry>
  dump
  sibling-of |sally>
  sibly-of |harry>
  sibling-of |harry>
  dump
  sibling-of |harry>
  dump
  sibling-of |erica>
  dump
  load bots.sw
  matrix[age]
  matrix[religion]
  matrix[mother]
  matrix[bed-time]
  load in-my-league.sw
  matrix[features]
  load ebook-letter-counts.sw
  dump
  matrix[letter-count]
  history
  norm |*> #=> normalize[100] letter-count |_self>
  map[norm,normalized-letter-count] rel-kets[letter-count]
  dump
  matrix[normalized-letter-count]
  dump
  save normalized-ebook-letter-counts.sw
  simm |*> #=> 100 self-similar[letter-count] |_self>
  map[simm,simm-matrix] rel-kets[letter-count]
  matrix[simm-matrix]
  history
  q

2015-07-04
  list-of |week days> => |Monday> + |Tuesday> + |Wednesday> + |Thursday> + |Friday>
  list-of |weekend days> => |Saturday> + |Sunday>
  closing-time list-of |week days> => |time: 6pm>
  closing-time list-of |weekend days> => |time: 4:30pm>
  history
  table[day,closing-time] list-of (|week days> + |weekend days>)
  history
  q

2015-07-04
  |context> => |context: non-linear resonance>
  
  non-linear-resonance |*> #=> 1000 drop-below[0.99] simm(""|_self>, ""|g>) |g>
  weak-resonance |*> #=> 200 drop-below[0.6] simm(""|_self>, ""|g>) |g>
  
   |g> => |a> + |b> + |c> + |d>
  
   |f1> => |a>
   |f2> => |a> + |b>
   |f3> => |a> + |b> + |c>
   |f4> => |a> + |b> + |c> + 0.9|d>
   |f5> => 0.95|a> + |b> + |c> + |d>
   |f6> => |a> + |b> + |c> + |d>
   |f7> => |a> + |b> + |c> + |d> + |e>
   |list> => |f1> + |f2> + |f3> + |f4> + |f5> + |f6> + |f7>square-resonance |*> #=> 200 clean drop-below[0.6] simm(""|_self>, ""|g>) |g>
  table[pattern,weak-resonance,square-resonance,non-linear-resonance] "" |list>
  dump
  square-resonance |*> #=> 200 clean drop-below[0.6] simm(""|_self>, ""|g>) |g>
  dump
  table[pattern,weak-resonance,square-resonance,non-linear-resonance] "" |list>
  history
  table[woman,is-not-all-that-interesting,is-in-my-league,is-out-of-my-league] rel-kets[features]
  is-not-all-that-interesting |*> #=> is-coeff-in-range[0,49] 100 rename-simm ket-simm(features |_self>,features |my perfect woman>) 
  is-in-my-league |*> #=> is-coeff-in-range[50,80] 100 rename-simm ket-simm(features |_self>,features |my perfect woman>)
  is-out-of-my-league |*> #=> is-coeff-in-range[80,100] 100 rename-simm ket-simm(features |_self>,features |my perfect woman>) 
  
  table[woman,is-not-all-that-interesting,is-in-my-league,is-out-of-my-league] rel-kets[features]
  dump
  context
  context sw console
  features |my perfect woman> => |beautiful> + |smart> + |skinny> + |educated> + |loving> + |sexy>
  features |Mary> => |loving> + |skinny>
  features |Liz> => |smart> + |educated> + |loving>
  features |Jane> => |skinny> + |sexy>
  features |Mia> => |smart> + |skinny> + |educated> + |loving>
  features |Emma> => |athletic> + |skinny> + |sexy> + |beautiful> + |religious>
  features |Donna> => |beautiful> + |smart> + |skinny> + |educated> + |sexy>
  features |the goddess> => |beautiful> + |smart> + |skinny> + |educated> + |loving> + |sexy>
  
  -- define an operator to tidy our results:
  rename-simm |simm> => | >
  dump
  is-not-all-that-interesting |*> #=> is-coeff-in-range[0,49] 100 rename-simm ket-simm(features |_self>,features |my perfect woman>) 
  is-in-my-league |*> #=> is-coeff-in-range[50,80] 100 rename-simm ket-simm(features |_self>,features |my perfect woman>)
  is-out-of-my-league |*> #=> is-coeff-in-range[80,100] 100 rename-simm ket-simm(features |_self>,features |my perfect woman>) 
  
  table[woman,is-not-all-that-interesting,is-in-my-league,is-out-of-my-league] rel-kets[features]
  q

2015-07-04
    list-of |week days> => |Monday> + |Tuesday> + |Wednesday> + |Thursday> + |Friday>
    list-of |weekend days> => |Saturday> + |Sunday>
    closing-time list-of |week days> => |time: 6pm>
    closing-time list-of |weekend days> => |time: 4:30pm>
    history
    table[day,closing-time] list-of (|week days> + |weekend days>)
  
  dump
  q

2015-07-05
  load-image[3wolfmoon_output.png] |wolf>
  load apply-smooth-20.sw
  history
  save saved-smooth-20-wolf.sw
  history
  save-image[smooth-20-wolf.png] |wolf>
  history
  load improved-apply-invert-R-R0-diff-v4.sw
  save-image[invert-R0-R-diff-smooth-20-wolf.png] |wolf>
  save history

2015-07-07
  husband-of |me> => |Rob>
  due-date-of |baby: smallFry> => |date: 2012-06-04>
  sex-of |baby: smallFry> => |gender: male>
  name-of |baby: smallFry> => |>
  craving |me> => |food: cereal>
  mood-of |me> => |feelings: excited>
  mood-of husband-of |me> => mood-of |me>
  dump
  reset
  name-of |you> => |Fred>
  age-of name-of |you> => |age: 29>
  name-of |you> => |Sam>
  age-of name-of |you> => |age: 34>
  dump
  history
  q

2015-07-08
  load-image[3wolfmoon_output.png] |wolf>
  load apply-smooth-20.sw
  history
  save saved-smooth-20-wolf.sw
  history
  save-image[smooth-20-wolf.png] |wolf>
  history
  load improved-apply-invert-R-R0-diff-v4.sw
  save-image[invert-R0-R-diff-smooth-20-wolf.png] |wolf>
  save history
  q

2015-07-10
  |x> => |b>
  binary-filter "" |x>
  count-sum binary-filter "" |x>
  pop-float count-sum binary-filter "" |x>
  binary-filter pop-float count-sum binary-filter "" |x>
  A |a> => binary-filter |x1>
  A |b> => binary-filter |x1>
  A |c> => binary-filter |x1>
  dump
  A split |a c>
  B |x1> => binary-filter |x1>
  dump
  A |a> #=> binary-filter |x1>
  A |b> #=> binary-filter |x1>
  A |c> #=> binary-filter |x1>
  A split |a b>
  dump
  B |x1> #=> binary-filter |d>
  A |a> => |x1>
  A |b> => |x1>
  A |c> => |x1>
  dump
  |d> => binary-filter A binary-filter split |a c>
  dump
  pop-float |x1>
  to-number |x1>
  history
  AND-3 |a> => invert 3 |x1>
  AND-3 |b> => invert 3 |x1>
  AND-3 |c> => invert 3 |x1>
  dump
  history
  |d> => binary-filter AND-3 binary-filter split |a c>
  dump
  history
  |d> => binary-filter AND-3 binary-filter split |a b c>
  dump
  split |>
  |table-1> => |>
  |table-2> => |a>
  |table-3> => |b>
  |table-4> => |a b>
  starts-with |table->
  dump
  split |table-1>
  split |*> #=> split |_self>
  table[table,split] starts-with |table->
  split |*> #=> split "" |_self>
  table[table,split] starts-with |table->
  history
  OR-2 |a> => |x1>
  OR-2 |b> => |x1>
  dump
  OR |*> #=> binary-filter OR-2 binary-filter split "" |_self>
  history
  table[table,split,OR] starts-with |table->
  history
  AND-2 |a> => 0.5 |x1>
  AND-3 |b> => 0.5 |x1>
  AND |*> #=> binary-filter AND-2 binary-filter split "" |_self>
  history
  table[table,split,OR,AND] starts-with |table->
  history
  AND-2 |b> => 0.5 |x1>
  table[table,split,OR,AND] starts-with |table->
  history
  XOR |*> #=> xor-filter OR-2 binary-filter split "" |_self>
  table[row,split,OR,AND,XOR] starts-with |table->
  history
  to-number |number: 1>
  to-number 0|number: 1>
  table[ket] | >
  XOR |*> #=> push-float xor-filter OR-2 binary-filter split "" |_self>
  table[row,split,OR,AND,XOR] starts-with |table->
  history
  AND |*> #=> push-float binary-filter AND-2 binary-filter split "" |_self>
  OR |*> #=> push-float binary-filter OR-2 binary-filter split "" |_self>
  table[row,split,OR,AND,XOR] starts-with |table->
  history
  dump
  table[row,split,OR,AND,XOR] starts-with |table->
  history
  pattern |table-2> => |a>
  pattern |table-3> => |b>
  pattern |table-4> => |a> + |b>
  dump
  pattern |row-2> => |a>
  dump
  pattern |row-3> => |b>
  dump
  pattern |row-1> => 0|a> + 0|b>
  pattern |row-2> => |a> + 0|b>
  pattern |row-3> => 0|a> + |b>
  pattern |row-4> => |a> + |b>
  dump
  OR |*> #=> push-float binary-filter OR-2 binary-filter pattern |_self>
  AND |*> #=> push-float binary-filter AND-2 binary-filter pattern |_self>
  XOR |*> #=> push-float xor-filter OR-2 binary-filter pattern |_self>
  table[row,pattern,OR,AND,XOR] starts-with |row->
  history
   table[row,pattern,OR,AND,XOR] ket-sort starts-with |row->
  history
  context 3 element truth table
  pattern |row-1> => 0|a> + 0|b> + 0|c>
  pattern |row-2> => 0|a> + 0|b> + |c>
  pattern |row-3> => 0|a> + |b> + 0|c>
  pattern |row-4> => 0|a> + |b> + |c>
  pattern |row-5> => |a> + 0|b> + 0|c>
  pattern |row-6> => |a> + 0|b> + |c>
  pattern |row-7> => |a> + |b> + 0|c>
  pattern |row-8> => |a> + |b> + |c>
  
  OR-3 |a> => |x1>
  OR-3 |b> => |x1>
  OR-3 |c> => |x1>
  
  AND-3 |a> => 0.333|x1>
  AND-3 |b> => 0.333|x1>
  AND-3 |c> => 0.333|x1>
  
  OR |*> #=> push-float binary-filter OR-3 binary-filter pattern |_self>
  AND |*> #=> push-float binary-filter AND-3 binary-filter pattern |_self>
  XOR |*> #=> push-float xor-filter OR-3 binary-filter pattern |_self>
  dump
  table[row,pattern,OR,AND,XOR] ket-sort starts-with |row->
  table |*> #=> table[row,pattern,OR,AND,XOR] ket-sort starts-with |row->
  table
  dump
  save 3-element-truth-table.sw
  context 2 element truth table
  pattern |row-1> => 0|a> + 0|b>
  pattern |row-2> => |a> + 0|b>
  pattern |row-3> => 0|a> + |b>
  pattern |row-4> => |a> + |b>
  
  OR-2 |a> => |x1>
  OR-2 |b> => |x1>
  
  AND-2 |a> => 0.5|x1>
  AND-2 |b> => 0.5|x1>
  
  OR |*> #=> push-float binary-filter OR-2 binary-filter pattern |_self>
  AND |*> #=> push-float binary-filter AND-2 binary-filter pattern |_self>
  XOR |*> #=> push-float xor-filter OR-2 binary-filter pattern |_self>
  dump
  table |*> #=> table[row,pattern,OR,AND,XOR] ket-sort starts-with |row->
  table 
  history
  save 2-element-truth-table.sw
  context
  matrix[AND-2]
  icontext
  matrix[AND-3]
  matrix[OR-3]
  matrix[AND-3]
  icontext
  matrix[OR-2]
  matrix[AND-2]
  q

2015-07-12
  load bots.sw
  dump
  table[bot,*] starts-with |bot: >
  .
  Bella |*> #=> apply(|_self>,|bot: Bella>)
  table[op,Bella] supported-ops |bot: Bella>
  dump
  Emma |*> #=> apply(|_self>,|bot: Emma>)
  Madison |*> #=> apply(|_self>,|bot: Madison>)
  table[op,Bella,Emma,Madison] supported-ops starts-with |bot: >
  friends-of |Fred> => |Sam> + |Rob> + |Emma> + |Bella> + |George>
  list-to-words friends-of |Fred>
  apply(|op: fish>,|bot: Emma>)
  table[op,Bella,Emma,Madison] supported-ops starts-with |bot: >
  history
  table[bot,*] starts-with |bot: >
  history
  table[op,Bella,Emma,Madison] supported-ops starts-with |bot: >
  list-of |interesting ops> => |op: mother> + |op: father> + |op: hair-colour> + |op: eye-colour> + |op: where-live> + |op: age> + |op: make-of-car>
  table[op,Bella,Emma,Madison] list-of |interesting ops>
  supported-ops starts-with |bot: >
  display starts-with |bot: >
  AND-3-2 |x1> => 0.333|x1>
  AND-3-2 |x2> => 0.333|x2>
  AND-3-2 |x3> => 0.333|x3>
  AND-3-2 |x4> => 0.5|x4>
  AND-3-2 |x5> => 0.5|x5>matrix[AND-3-2]
  dump
  matrix[AND-3-2]
  AND-3-2 |x1> => 0.333|x1>
  AND-3-2 |x2> => 0.333|x1>
  AND-3-2 |x3> => 0.333|x1>
  AND-3-2 |x4> => 0.5|x2>
  AND-3-2 |x5> => 0.5|x2>
  
  matrix[AND-3-2]
  OR-2 |x1> => |x1>
  OR-2 |x2> => |x1>
  
  matrix[OR-2]
  matrix[AND-3-2]
  load breakfast-menu.sw
  dump
  contains-bacon |*> #=> do-you-know mbr(|food: bacon>,read description |_self>)
  such-that[contains-bacon] "" |menu: breakfast>
  history
  contains-bacon |*> #=> do-you-know mbr(|word: bacon>,read description |_self>)
  such-that[contains-bacon] "" |menu: breakfast>
  history
  q

2015-07-12
  load blog-george.sw
  George |*> #=> apply(|_self>,|person: George>)
  table[op,George] supported-ops |person: George>
  history
  name |Fred> => |Fred Roberts>
  height |Fred> => |cm: 176>
  dob |Fred> => |date: 17/5/1986>
  friends |Fred> => |Mary> + |Liz> + |Tom> + |Frank>
  mother |Fred> => |Sarah Roberts>
  father |Fred> => |James Roberts>
  Fred |*> #=> apply(|_self>,|Fred>)
  table[op,Fred] ops |Fred>
  history
  q

2015-07-13
  foo |Fred> => |Sam> + |Max> + |Rob>
  Fred |op: foo> => apply(|_self>,|Fred>)
  dump
  load methanol.sw
  dump
  create inverse
  dump
  bonds-to inverse-atom-type |atom: C>
  bonds-to inverse-atom-type |atom: O>
  bonds-to inverse-atom-type |atom: H>
  load improved-random-greet.sw
  dump
  q

2015-07-13
  load natural-language-random-greet.sw
  dump
  random-greet the-friends-of |Sam>
  random-greet the-friends-of |Emma>
  dump
  random-greet |Sam>
  random-greet |Emma>
  random-greet the-friends of |Sam>
  random-greet the-friends-of |Sam>
  random-greet the-friends-of |Emma>
  history
  q

2015-07-13
  q

2015-07-14
  C |F: -40>
  C |F: 0>
  C |F: 32>
  C |F: -40>
  load names.sw
  find-topic[names] |cameron>
  f |*> #=> find-topic[names] |_self>
  f |cameron>
  f |lee>
  f |mackenzie>
  f |scoot>
  f |mcnairy>
  q

2015-07-14
  load mdc-problem.sw
  dump
  table[node,left,right,description] rel-kets[description]
  dump
  q

2015-07-14
  load mdc-problem.sw
  history
  dump
  table[node,left,right,description] rel-kets[description]
  history
  q

2015-07-15
  load mdc-problem.sw
  dump
  exp-max[left] |1001>
  child |*> #=> left |_self> + right |_self>
  exp-max[child] |1001>
  history
  table[node,description] exp-max[child] |1001>
  history
  table[node,child,description] exp-max[child] |1001>
  history
  load binary-tree-with-child.sw
  history
  table[node,child,text] exp-max[child] |x>
  history
  how-many-children-nodes |*> #=> how-many child |_self>
  table[node,child,how-many-children-nodes,text] exp-max[child] |x>
  load mdc-problem.sw
  dump
  table[node,child,description] shuffle rel-kets[description]
  history
  split description |14>
  how-many split |a b c>
  is-three-words |*> #=> is-equal[3] how-many split description |_self>
  table[node,description] such-that[is-three-words] rel-kets[description]
  history
  dump
  table[node,child,description] reverse exp-max[child] |1001>
  history
  strict-table[node,child,description] exp-max[child] |1001>
  history
  have-no-children |*> #=> is-equal[0] how-many child |_self>
  table[node,child,description] such-that[have-no-children] exp-max[child] |1001>
  history
  table[node,child,description] sort-by[description] rel-kets[description]
  history
  how-many-words |*> #=> how-many split description |_self>
  table[node,child,description] sort-by[how-many-words] rel-kets[description]
  history
  ket-length |1001>
  table[node,child,description] sort-by[ket-length] rel-kets[description]
  history
  rel-kets[description]
  ket-length |*> #=> ket-length |_self>
  table[node,child,description] sort-by[ket-length] rel-kets[description]
  history
  table[node,child,description] reverse sort-by[ket-length] rel-kets[description]
  history
  list-of |Crawford words> => |CalTech> + |Warp> + |Life> + |Ogg> + |Frog> + |Navy>
  list-of |Crawford words> => |CalTech> + |Warp> + |Life> + |Ogg> + |Frog> + |Navy> + |Feynman>
  contains-crawford-word |*> #=> do-you-know intn(list-of |Crawford words>,extract-value read description |_self>)
  read description |104>
  description |104>
  read description |104>
  contains-crawford-word |*> #=> do-you-know intn(list-of |Crawford words>,split description |_self>)
  history
  table[node,child,description] such-that[contains-crawford-word] rel-kets[description]
  history
  left |1001>
  left^2 
  left^2 |1001>
  right^2 |1001>
  left right^2 |1001>
  child |1001>
  child^2 |1001>
  child^3 |1001>
  child^4 |1001>
  history
  child^5 |1001>
  history
  child^6 |1001>
  history
  child^7 |1001>
  right child^4 |1001>
  history
  left right child^4 |1001>
  dump
  map[child] rel-kets[description]
  matrix[child]
  history
  history 1000
  
  q

2015-07-17
  rank split |a b c d e>
  reverse rank reverse split |a b c d e>
  q

2015-07-17
  rank split |a b c d e>
  reverse-rank split |a b c d e>
  q

2015-07-17
  reverse-rank split |a b c d e>
  q

2015-07-17
  reverse-rank split |a b c>
  pick[2] split |a b c d e f g>
  .
  .
  .
  plus-or-minus |x: 3>
  pick-elt split |a b c d>
  q

2015-07-17
  reverse-rank split |a b c d e>
  -- it works!
  q

2015-07-19
  F |C: -12>
  C |F: -40>
  C |K: -215>
  C |K: 0>
  K |C: -273>
  C |F: -10>
  C |F: -20>
  F |C: -40>
  load africa.sw
  table[name,capital-city,population] reverse sort-by[population] "" |Africa: country: list>
  history
  popn |*> #=> to-comma-number population |_self>
  table[name,capital-city,popn] reverse sort-by[population] "" |Africa: country: list>
  history
  q

2015-07-19
  extract-3-tail-chars |abcdefgh>
  extract-3-tail-chars |ab>
  extract-3-tail-chars |a>
  extract-3-tail-chars |>
  extract-3-tails-chars |abcxyzf>
  extract-3-tail-chars |abcxyzf>
  q

2015-07-19
  load ngram-letter-pairs--webboard.sw
  dump
  letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2 extract-3-tail-chars |_self>)
  letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2-letters extract-3-tail-chars |_self>)
  next-2-letter |the>
  next-2-letters |the>
  letter-ramble^200 |the>
  .
  .
  history
  letter-ramble^1000 |from>
  .
  .
  .
  q

2015-07-19
  load ngram-letter-pairs--tom-sawyer.sw
  dump
  letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2-letters extract-3-tail-chars |_self>)
  letter-ramble^1000 |the>
  .
  .
  .
  q

2015-07-19
  load ngram-letter-pairs--webboard.sw
  q

2015-07-19
  q

2015-07-19
  load ngram-letter-pairs--tom-sawyer.sw
  q

2015-07-19
  load ngram-letter-pairs--tom-sawyer.sw
  letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2-letters extract-3-tail-chars |_self>)
  dump
  next-2-letters |the>
  letter-ramble^1000 |the>
  save history

2015-07-19
  load ngram-letter-pairs--tom-sawyer.sw
  letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2-letters extract-3-tail-chars |_self>)
  dump
  next-2-letters |the>
  letter-ramble^1000 |the>
  save history
  q\
  q

2015-07-21
  load ngram-letter-pairs--tom-sawyer.sw
  letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2-letters extract-3-tail-chars |_self>)
  letter-ramble^1000 |Pna>
  letter-ramble^1000 |The>
  history
  letter-ramble^1000 |The>
  letter-ramble^1000 |Here>
  .
  .
  history
  how-many-choices |*> #=> how-many next-2-letters |_self>
  table[str,how-many-choices] reverse sort-by[how-many-choices] starts-with |>
  
  history
  table[str,how-many-choices] select[1,200] reverse sort-by[how-many-choices] starts-with |>
  
  q

2015-07-22
  dump
  q

2015-07-25
  the-third |US President> => |Thomas Jefferson>
  the-party-of the-third |US President> => |party: Democratic-Republican>
  dump
  the-dissolution-date-of the-party-of the-third |US President> => |year: 1825>
  dump
  history
  q

2015-07-29
  bah |Fred Smith> => |23>
  op |Fred Jones> => |something>
  dump
  starts-with |Fred>
  foo |*> #=> starts-with |_self>
  foo |Fred>
  q

2015-07-30
  table[city] (|Adelaide> + |Brisbane> + |Perth> + |Melbourne> + |Sydney>)
  table[Australian-capital-cities] (|Adelaide> + |Brisbane> + |Perth> + |Melbourne> + |Sydney>)
  q

2015-07-30
  context simple logic example
  pattern |a> => 0|x1> + 0|x2>
  pattern |b> => 0|x1> + |x2>
  pattern |c> => |x1> + 0|x2>
  pattern |d> => |x1> + |x2>
  dump
  OR-label |a> => |0>
  OR-label |b> => |1>
  OR-label |c> => |1>
  OR-label |d> => |1>
  
  XOR-label |a> => |0>
  XOR-label |b> => |1>
  XOR-label |c> => |1>
  XOR-label |d> => |0>
  
  AND-label |a> => |0>
  AND-label |b> => |0>
  AND-label |c> => |0>
  AND-label |d> => |1>
  dump
  input-pattern |u> => 0|x1> + 0|x2>
  input-pattern |v> => 0|x1> + |x2>
  input-pattern |x> => |x1> + 0|x2>
  input-pattern |y> => |x1> + |x2>
  dump
  OR |*> #=> OR-label drop-below[0.7] similar[input-pattern,pattern] |_self>
  XOR |*> #=> XOR-label drop-below[0.7] similar[input-pattern,pattern] |_self>
  AND |*> #=> AND-label drop-below[0.7] similar[input-pattern,pattern] |_self>
  dump
  table[input,OR,XOR,AND] split |u v x y>
  dump
  or |*> #=> OR-label similar[input-pattern,pattern] |_self>
  table[input,or] split |u v x y>
  dump
  save simple-logic-example.sw
  dump
  q

2015-07-30
  load simple-logic-example-v2.sw
  dump
  table[input,OR,XOR,AND] splilt |u v x y>
  dump
  history
  table[input,OR,XOR,AND] split |u v x y>
  dump
  table |*> #=> table[input,OR,XOR,AND] split |u v x y>
  table
  history
  save simple-logic-example-v2.sw
  dump
  q

2015-07-30
  load simple-logic-example-v2.sw
  table
  dump
  table[input,OR,XOR,AND] split |u v x y>
  q

2015-08-01
  load simple-logic-example-v2.sw
  dump
  TF |0> => |False>
  TF |1> => |True>
  TF-OR |*> #=> TF OR |_self>
  TF-AND |*> #=> TF AND |_self>
  TF-XOR |*> #=> TF XOR |_self>
  dump
  table[input,TF-OR,TF-XOR,TF-AND] split |u v x y>
  save history

2015-08-02
  load simple-logic-example-v2.sw
  dump
  TF |0> => |False>
  TF |1> => |True>
  TF-OR |*> #=> TF OR |_self>
  TF-AND |*> #=> TF AND |_self>
  TF-XOR |*> #=> TF XOR |_self>
  dump
  table[input,TF-OR,TF-XOR,TF-AND] split |u v x y>
  save history
  dump
  history
  table[input,TF-OR,TF-XOR,TF-AND] split |u v x y>
  matrix[TF]
  q

2015-08-02
  load ngram-letter-pairs--shakespeare.sw
  letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2-letters extract-3-tail-chars |_self>)
  letter-ramble |The>
  [A
  letter-ramble^1000 |The>
  q

2015-08-02
  load ngram-letter-pairs--gone-with-the-wind.sw
  letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2-letters extract-3-tail-chars |_self>)
  letter-ramble^1000 |The>
  .
  q

2015-08-02
  load ngram-letter-pairs--sherlock-holmes.sw
  letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2-letters extract-3-tail-chars |_self>)
  letter-ramble^1000 |The>
  .
  history
  letter-ramble^1000 |Here>
  
  letter-ramble^1000 |Here>
  .
  q

2015-08-02
  load simple-logic-example-v2.sw
  dump
  TF |0> => |False>
  TF |1> => |True>
  
  TF-OR |*> #=> TF OR |_self>
  TF-XOR |*> #=> TF XOR |_self>
  TF-AND |*> #=> TF AND |_self>
  dump
  table-2 |*> #=> table[input,TF-OR,TF-XOR,TF-AND] split |u v x y>
  table-2
  history
  save simple-logic-example-v2.sw
  dump
  history
  q

2015-08-02
  age |> => |37>
  dump
  age | > => |37>
  dmp
  dump
  q

2015-08-03
  load names.sw
  find-topic[names] |susan>
  find-topic[names] |garry>
  find-topic[names] |laird>
  find-topic[names] |morrison>
  history
  reset
  load ngram-letter-pairs--sherlock-holmes.sw
  letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2-letters extract-3-tail-chars |_self>)
  letter-ramble^10 |The>
  history
  letter-ramble^10 split |The Here>
  history
  letter-ramble^1000 split |The Here fish>
  history
  context
  find-inverse[next-2-letters]
  inverse-next-2-letters |. >
  inverse-next-2-letters |, >
  history
  common[inverse-next-2-letters] (|, > + |. >)
  save history

2015-08-05
  split-chars |abcdef>
  split-chars |aabacde>
  q

2015-08-05
  split-chars |aabacde>
  select-chars[3,4,7] |abcdefgh>
  select-chars[1] |abcde>
  select-chars[5] |abcde>
  select-chars[7] |abcde>
  select-chars[-1] |abc>
  select-chars[0] |abc>
  load ngram-letter-pairs--sherlock-holmes.sw
  find-inverse[next-2-letters]
  table[3gram] ket-sort common[inverse-next-2-letters] (|, > + |. >)
  SC |*> #=> select-chars[1] |_self>
  history
  table[start-char] ket-sort SC common[inverse-next-2-letters] (|, > + |. >)
  history
  table[start-char,coeff] ket-sort SC common[inverse-next-2-letters] (|, > + |. >)
  history
  select-char[0] |abcde>
  select-chars[0] |abcde>
  EC |*> #=> select-chars[0] |_self>
  table[end-char,coeff] ket-sort EC common[inverse-next-2-letters] (|, > + |. >)
  history
  save history

2015-08-05
  web-load http://fish.swww
  q

2015-08-05
  cd web-test
  files
  web-load http://semantic-db.org/sw-examples/methanol.sw
  files
  load methanol.sw
  web-load http://semantic-db.org/sw-examples/methanol.sw
  files
  load meth-2.sw
  dump
  q

2015-08-05
  ls
  cd web-test
  ls
  files
  web-load http://semantic-db.org/sw-examples/methanol.sw
  files
  load methanol.sw
  dump
  files
  history
  web-load http://semantic-db.org/sw-examples/methanol.sw
  dump
  web-load http://semantic-db.org/sw-examples/Freds-family.sw
  dump
  files
  load Freds-family.sw
  dump
  q

2015-08-05
  dir
  cd web-test
  files
  web-load http://semantic-db.org/sw-examples/Freds-family.sw
  dump
  
  q

2015-08-05
  ls
  cd web-test
  files
  web-load http://semantic-db.org/sw-examples/Freds-family.sw
  .
  web-load http://semantic-db.org/sw-examples/Freds-family.sw
  dump
  load Freds-family.sw
  dump
  q

2015-08-05
  ls
  cd web-test
  files
  web-load http://semantic-db.org/sw-examples/Freds-family.sw
  files
  load Freds-family.sw
  dump
  q

2015-08-05
  cd web-test
  ls
  files
  web-load http://semantic-db.org/sw-examples/methanol.sw
  web-load http://semantic-db.org/sw-examples/methanol.sw
  web-load http://semantic-db.org/sw-examples/methanol.sw
  q

2015-08-05
  web-load http://semantic-db.org/sw-examples/methanol.sw
  web-load http://semantic-db.org/random.sw
  q

2015-08-05
  pick-elt (3|a> + 2|b>)
  q

2015-08-05
  weighted-pick-elt |a>
  weighted-pick-elt (100|a> + |b>)
  .
  .
  weighted-pick-elt (3|a> + |b>)
  .
  .
  .
  .
  .
  .
  .
  .
  q

2015-08-05
  weighted-pick-elt (0.5|yes> + 0.5|no>)
  .
  .
  .
  .
  .
  .
  q

2015-08-05
  weighted-pick-elt |>
  weighted-pick-elt |a>
  weighted-pick-elt split-chars |abcde>
  .
  .
  .
  .
  .
  .
  .
  .
  .
  weighted-pick-elt (2|a> + |b>)
  .
  .
  .
  .
  q

2015-08-05
  load names.sw
  rel-kets[names]
  weighted-pick-elt names |male name>
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  weighted-pick-elt names |last name>
  .
  .
  .
  .
  .
  q

2015-08-06
  split-chars |aabacde>
  select-chars[3,4,7] |abcdefgh>
  select-chars[1] |abcde>
  select-chars[5] |abcde>
  select-chars[7] |abcde>
  select-chars[-1] |abc>
  select-chars[0] |abc>
  load ngram-letter-pairs--sherlock-holmes.sw
  find-inverse[next-2-letters]
  table[3gram] ket-sort common[inverse-next-2-letters] (|, > + |. >)
  SC |*> #=> select-chars[1] |_self>
  history
  table[start-char] ket-sort SC common[inverse-next-2-letters] (|, > + |. >)
  history
  table[start-char,coeff] ket-sort SC common[inverse-next-2-letters] (|, > + |. >)
  history
  select-char[0] |abcde>
  select-chars[0] |abcde>
  EC |*> #=> select-chars[0] |_self>
  table[end-char,coeff] ket-sort EC common[inverse-next-2-letters] (|, > + |. >)
  history
  save history
  reset
  table[start-char,coeff] ket-sort SC common[inverse-next-2-letters] (|, > + |. >)
  table[end-char,coeff] ket-sort EC common[inverse-next-2-letters] (|, > + |. >)
  history
  table[end-char] ket-sort EC inverse-next-2-letters |. >
  history
  table[end-char,coeff] ket-sort EC inverse-next-2-letters |. >
  history
  table[2gram,coeff] 100 self-similar[inverse-next-2-letters] |. >
  
  history
  save history

2015-08-09
  select[1,5).apply_fn(shout] |x>
  select[1,5).apply_fn(shout] |success!>
  q

2015-08-09
  is-mod-3 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|3>)
  table[number,is-mod-3] range(|1>,|30>)
  history
  is-mod-4 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|4>)
  is-mod-5 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|5>)
  is-mod-5 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|6>)
  history
  table[number,is-mod-3,is-mod-4,is-mod-5] range(|1>,|20>)
  history
  is-mod-5 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|5>)
  is-mod-6 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|6>)
  table[number,is-mod-3,is-mod-4,is-mod-5] range(|1>,|20>)
  history
  mod-3 |*> #=> arithmetic(|_self>,|%>,|3>)
  mod-4 |*> #=> arithmetic(|_self>,|%>,|4>)
  mod-5 |*> #=> arithmetic(|_self>,|%>,|5>)
  table[number,mod-3,mod-4,mod-5] range(|1>,|100>)
  history
  is-mod-3 |*> #=> is-equal[0] mod-3 |_self>
  is-mod-4 |*> #=> is-equal[0] mod-4 |_self>
  is-mod-5 |*> #=> is-equal[0] mod-5 |_self>
  table[number,is-mod-3,is-mod-4,is-mod-5] range(|1>,|50>)
  save history

2015-08-09
  is-mod-3 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|3>)
  table[number,is-mod-3] range(|1>,|30>)
  history
  is-mod-4 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|4>)
  is-mod-5 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|5>)
  is-mod-5 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|6>)
  history
  table[number,is-mod-3,is-mod-4,is-mod-5] range(|1>,|20>)
  history
  is-mod-5 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|5>)
  is-mod-6 |*> #=> is-equal[0] arithmetic(|_self>,|%>,|6>)
  table[number,is-mod-3,is-mod-4,is-mod-5] range(|1>,|20>)
  history
  mod-3 |*> #=> arithmetic(|_self>,|%>,|3>)
  mod-4 |*> #=> arithmetic(|_self>,|%>,|4>)
  mod-5 |*> #=> arithmetic(|_self>,|%>,|5>)
  table[number,mod-3,mod-4,mod-5] range(|1>,|100>)
  history
  is-mod-3 |*> #=> is-equal[0] mod-3 |_self>
  is-mod-4 |*> #=> is-equal[0] mod-4 |_self>
  is-mod-5 |*> #=> is-equal[0] mod-5 |_self>
  table[number,is-mod-3,is-mod-4,is-mod-5] range(|1>,|50>)
  save history
  history
  
  q

2015-08-09
  foo |*> #=> |hey!>
  foo |>
  q

2015-08-11
  pick[3] split |a b c d e f g h i j k l>
  .
  .
  load the-doors--people-are-strange.sw
  dump
  table[lyrics] lyrics-for |the doors: People are strange>
  history
  load the-doors--people-are-strange.sw
  table[lyrics] lyrics-for |the doors: People are strange>
  dump
  history
  
  history
  table[lyrics] pick[5] lyrics-for |the doors: People are strange>
  table[lyrics] select[1,7] lyrics-for |the doors: People are strange>
  q

2015-08-11
  load the-doors--people-are-strange.sw
  dump
  contains-strange |*> #=> do-you-know mbr(|strange>,split lower |_self>)
  contains-strange starts-with |line 12>
  starts-with |line 12:>
  table[lyrics] such-that[contains-strange] lyrics-for |the doors: People are strange>
  history
  lyrics-for |the doors: People are strange>
  split lower |line 3: People are strange when you're a stranger>
  to-lower |FiSh>
  lowercase |FisH>
  history
  contains-strange |*> #=> do-you-know mbr(|strange>,split lower-case |_self>)
  table[lyrics] such-that[contains-strange] lyrics-for |the doors: People are strange>
  history
  lyrics-for |the doors: People are strange>
  save history

2015-08-11
  load the-doors--people-are-strange.sw
  dump
  contains-strange |*> #=> do-you-know mbr(|strange>,split lower |_self>)
  contains-strange starts-with |line 12>
  starts-with |line 12:>
  table[lyrics] such-that[contains-strange] lyrics-for |the doors: People are strange>
  history
  lyrics-for |the doors: People are strange>
  split lower |line 3: People are strange when you're a stranger>
  to-lower |FiSh>
  lowercase |FisH>
  history
  contains-strange |*> #=> do-you-know mbr(|strange>,split lower-case |_self>)
  table[lyrics] such-that[contains-strange] lyrics-for |the doors: People are strange>
  history
  lyrics-for |the doors: People are strange>
  save history
  split |People are Strange">
  read |People are Strange">
  read |text: People are Strange">
  list-of-songs |The Doors> => 10|the doors: People are Strange> + 10|the doors: Light My Fire> + 7|the doors: The End> + 6|the doors: Love Me Two Times> + 0.2|the doors: Moonlight Drive>
  weighted-pick-elt list-of-songs |The Doors>
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  drop |x>
  history
  q

2015-08-11
  exclude(|a> + |c>,|a> + |b> + |c> + |d>)
  list-of-songs |The Doors> => 10|the doors: People are Strange> + 10|the doors: Light My Fire> + 7|the doors: The End> + 6|the doors: Love Me Two Times> + 0.2|the doors: Moonlight Drive>
  list-of-songs |heard recently> => |the doors: Light My Fire> + |the doors: The End>
  list-of-interesting |songs> => exclude(list-of-songs |heard recently>,list-of-songs |The Doors>)
  list-of-interesting |songs>
  history
  list-of-stories |heard recently> => |frog> + |cat> + |dog> + |horse>
  you-already-told-me-that-one |*> #=> do-you-know mbr(|_self>,list-of-stories|heard recently>)
  you-already-told-me-that-one |horse>
  you-already-told-me-that-one |rabbit>
  history
  save history

2015-08-16
  mbr(|a>,|a> + |b> + |c>)
  mbr(0.3|b>,|a> + |b> + |c>)
  mbr(|b>,7|a> + 0.4|b> + |c>)
  intn(|a> + 0.2|b> + 7|c>,0.6|a> + |b> + 13|c> + |d>)
  union(|a> + 0.2|b> + 7|c>,0.6|a> + |b> + 13|c> + |d>)
  q

2015-08-17
  extract-value |a: b: c>
  debug on
  extract-value |a: b>
  q

2015-08-17
  debug on
  extract-value |a: b>
  debug off
  extract-value |a: b>
  q

2015-08-17
  to-value |19>
  to-value |age: 23.5>
  foo |x> => |y>
  foo |x>
  q

2015-08-17
  foo |x> => |y>
  foo |x>
  q

2015-08-17
  select[1,3] split |a b c d e>
  q

2015-08-17
  select[1,3] split |a b c d e>
  q

2015-08-17
  foo^3 |x>
  
  q

2015-08-17
  foo^3 |x>
  debug off
  foo^3 |x>
  q

2015-08-17
  foo^3 |x>
  debug off
  foo^3 |x>
  q

2015-08-17
  foo bah fish |x>
  q

2015-08-18
  foo |x>
  foo split |x y z>
  q

2015-08-18
  foo |x>
  foo (|x> + |y> + |z>)
  debug off
  foo split |x y z>
  info off
  foo split |x y z>
  q

2015-08-18
  exclude(|a> + |c>,|a> + |b> + |c> + |d>)
  list-of-songs |The Doors> => 10|the doors: People are Strange> + 10|the doors: Light My Fire> + 7|the doors: The End> + 6|the doors: Love Me Two Times> + 0.2|the doors: Moonlight Drive>
  list-of-songs |heard recently> => |the doors: Light My Fire> + |the doors: The End>
  list-of-interesting |songs> => exclude(list-of-songs |heard recently>,list-of-songs |The Doors>)
  list-of-interesting |songs>
  history
  list-of-stories |heard recently> => |frog> + |cat> + |dog> + |horse>
  you-already-told-me-that-one |*> #=> do-you-know mbr(|_self>,list-of-stories|heard recently>)
  you-already-told-me-that-one |horse>
  you-already-told-me-that-one |rabbit>
  history
  save history
  q

2015-08-18
  foo foo |x>
  q

2015-08-18
  foo^3 bah |x>
  q

2015-08-18
  foo^3 bah |x>
  q

2015-08-18
  foo^3 bah |x>
  3.14^2 |x>
  q

2015-08-18
  foo^3 bah |x>
  select[1,5).apply_fn(shout] |success!>
  foo |x>
  q

2015-08-18
  foo |x>
  q

2015-08-18
  foo |x>
  foo bah |x>
  foo |*> #=> |fish>
  foo bah |x>
  drop foo bah |x>
  debug off
  drop foo bah |x>
  fish^5 bah split |a b c>
  debug on
  fish^5 bah split |a b c>
  dump
  fish bah split |a b c>
  fish |>
  fish bah |x>
  fish^3 bah |x>
  fish bah |x>
  fish bah (|x> + |y>)
  debug off
  fish bah |x>
  fish bah (|x> + |y>)
  q

2015-08-18
  select[1,5).apply_fn(shout] |success!>
  q

2015-08-18
  foo bah |x>
  select[3,5] split |a b c d e f g h>
  q

2015-08-18
  |a> => |b>
  |b> => |c>
  |c> => |d>
  "" |a>
  ""^3 |a>
  info off
  ""^3 |a>
  info on
  ""^7 |a>
  foo^3 |a>
  q

2015-08-19
  - 37 bah |x>
  -37 bah |x>
  load fred-sam-friends.sw
  dump
  intn(friends |Fred>,friends |Sam>)
  common[friends] split |Fred Sam>
  similar[friends] |Fred>
  star |*> #=> apply(supported-ops|_self>,|_self>)
  star split |Fred Sam>
  coeff-sort star split |Fred Sam>
  save history

2015-08-19
  - 37 bah |x>
  -37 bah |x>
  load fred-sam-friends.sw
  dump
  intn(friends |Fred>,friends |Sam>)
  common[friends] split |Fred Sam>
  similar[friends] |Fred>
  star |*> #=> apply(supported-ops|_self>,|_self>)
  star split |Fred Sam>
  coeff-sort star split |Fred Sam>
  save history
  do-you-know |>
  q

2015-08-19
  do-you-know |>
  do-you-know (|> + |>)
  q

2015-08-19
  do-you-know |>
  do-you-know (|> + |>)
  q

2015-08-19
  load fred-sam-friends.sw
  star |*> #=> apply(supported-op|_self>,|_self>)
  star |Fred>
  star |*> #=> apply(supported-ops|_self>,|_self>)
  star |Fred>
  the-list-of |people> => |Fred> + |Sam>
  coeff-sort star the-list-of |people>
  history
  everything |*> #=> apply(supported-ops|_self>,|_self>)
  coeff-sort everything the-list-of |people>
  history
  everything-we-know-about |*> #=> apply(supported-ops|_self>,|_self>)
  everything-we-know-about the-list-of |people>
  history
  era") shoot_me() print(" |x>
  load george.sw
  dump
  history
  everything-we-know-about |*> #=> apply(supported-ops|_self>,|_self>)
  everything-we-know-about |person: George>
  history
  extract-value everything-we-know-about |person: George>
  icontext
  everything-we-know-about |Fred>
  q

2015-08-20
  table[ket,coeff] rank split |a b c d e f g>
  debug on
  table[ket,coeff] rank split |a b c d e f g>
  q

2015-08-20
  debug on
  table[ket,coeff] rank split |a b c d e f g>
  debug off
  table[ket,coeff] rank split |a b c d e f g>
  debug on
  table[ket,37] rank split |a b c d e f g h>
  foo |a> => |x>
  foo |b> => |y>
  table[ket,foo] split |a b c d>
  debug off
  table[ket,foo] split |a b c d>
  info off
  table[ket,foo] split |a b c d>
  debug on
  table[ket,foo] split |a b c d>
  bah[37.2,fish] foo |x>
  q

2015-08-24
  select-chars[3,5] |abcdefgh>
  select-chars[3,5] (|abcdefgh> + |uvwxyz>)
  q

2015-08-24
  select-chars[3,5] (|abcdefgh> + |uvwxyz>)
  q

2015-08-24
  select-chars[3,5] (|abcdefgh> + |uvwxyz>)
  ket-hash[3] |fish>
  q

2015-08-24
  ket-hash[3] |fish>
  q

2015-08-24
  ket-hash[3] |fish>
  ket-hash[4] |fish>
  ket-hash[8] |fish>
  ket-hash[8] split |a b c d e f g>
  ket-hash[20] split |a b c>
  q

2015-08-24
  hash-data[1] |x>
  q

2015-08-24
  hash-data[4] |x>
  q

2015-08-24
  hash-data[4] split |a b c d e f g>
  q

2015-08-24
  debug on
  ket-hash[4] 3|x>
  q

2015-08-24
  hash-data[4] split |u v w x y z>
  q

2015-08-24
  load improved-imdb.sw
  actors |movie: Star Trek: The Motion Picture (1979)>
  hash-data[4] |movie: Star Trek: The Motion Picture (1979)>
  |result> => self-similar[actors] |movie: Star Trek: The Motion Picture (1979)>
  how-many "" |result>
  history
  hash-data[4] "" |result>
  |result 2> => select[1,6] "" |result>
  how-many "" |result 2>
  hash-data[4] "" |result 2>
  hash-data[4] common[actors] "" |result 2>
  save history

2015-08-24
  load improved-imdb.sw
  actors |movie: Star Trek: The Motion Picture (1979)>
  hash-data[4] |movie: Star Trek: The Motion Picture (1979)>
  |result> => self-similar[actors] |movie: Star Trek: The Motion Picture (1979)>
  how-many "" |result>
  history
  hash-data[4] "" |result>
  |result 2> => select[1,6] "" |result>
  how-many "" |result 2>
  hash-data[4] "" |result 2>
  hash-data[4] common[actors] "" |result 2>
  save history
  history
  table[movie,coeff] select[1,100] "" |result>
  history
  table[movie,coeff] 100 select[1,100] "" |result>
  history
  hash-data[4] "" |result>
  how-many "" |result>
  "" |result>
  q

2015-08-24
  |result> => |movie: Star Trek: The Motion Picture (1979)> + 0.156|movie: Star Trek IV: The Voyage Home (1986)> + 0.156|movie: Star Trek III: The Search for Spock (1984)> + 0.156|movie: Star Trek VI: The Undiscovered Country (1991)> + 0.109|movie: Star Trek V: The Final Frontier (1989)> + 0.109|movie: Star Trek: The Wrath of Khan (1982)> + 0.109|movie: Road Trek 2011 (2012)> + 0.109|movie: Star Trek Adventure (1991)> + 0.078|movie: To Be Takei (2014)> + 0.058|movie: Star Trek: Generations (1994)> + 0.057|movie: Trekkies (1997)> + 0.047|movie: Trek Nation (2010)> + 0.047|movie: Superbman: The Other Movie (1981)> + 0.047|movie: The Captains (2011)> + 0.045|movie: Backyard Blockbusters (2012)> + 0.031|movie: Loaded Weapon 1 (1993)> + 0.031|movie: Battle for the Planet of the Apes (1973)> + 0.031|movie: The 6th People's Choice Awards (1980)> + 0.031|movie: Coneheads (1993)> + 0.031|movie: Alien Nation (1988)> + 0.031|movie: FedCon XXI (2012)> + 0.031|movie: Hang 'Em High (1968)> + 0.031|movie: Battlestar Galactica (1978)> + 0.031|movie: Unbelievable!!!!! (2014)> + 0.031|movie: Separate Lives (1995)> + 0.031|movie: Kingdom of the Spiders (1977)> + 0.031|movie: Impulse (1974)> + 0.031|movie: Bug Buster (1998)> + 0.03|movie: Raw Deal (1986)> + 0.03|movie: First Family (1980)> + 0.029|movie: Airplane II: The Sequel (1982)> + 0.023|movie: Star Trek (2009)> + 0.016|movie: The LXD: The Secrets of the Ra (2011)> + 0.016|movie: Duffy of San Quentin (1954)> + 0.016|movie: Transcendent Man (2009)> + 0.016|movie: Frankenstein vs. the Creature from Blood Cove (2005)> + 0.016|movie: Terminator 2: Judgment Day (1991)> + 0.016|movie: Kamasutra - Vollendung der Liebe (1969)> + 0.016|movie: The Curse of the Dragon (1993)> + 0.016|movie: Blood Diamond (2006)> + 0.016|movie: Blue Dream (2013)> + 0.016|movie: Tru Loved (2008)> + 0.016|movie: The Story of Computer Graphics (1999)> + 0.016|movie: Raintree County (1957)> + 0.016|movie: Are We There Yet? (2005)> + 0.016|movie: Sworn to Justice (1996)> + 0.016|movie: Bambai Raat Ki Bahon Mein (1968)> + 0.016|movie: Escape from Planet Earth (2013)> + 0.016|movie: Regarding Henry (1991)> + 0.016|movie: Walk Don't Run (1966)> + 0.016|movie: Moontrap (1989)> + 0.016|movie: The Wilby Conspiracy (1975)> + 0.016|movie: Ringers: Lord of the Fans (2005)> + 0.016|movie: Surge of Power (2004)> + 0.016|movie: Bill & Ted's Bogus Journey (1991)> + 0.016|movie: Tarzan's Deadly Silence (1970)> + 0.016|movie: These Amazing Shadows (2011)> + 0.016|movie: Across the Line (2000)> + 0.016|movie: Live by the Fist (1993)> + 0.016|movie: Comanche blanco (1968)> + 0.016|movie: The Red Shadow (1932/II)> + 0.016|movie: Black Samson (1974)> + 0.016|movie: C.H.O.M.P.S. (1979)> + 0.016|movie: Thank God It's Friday (1978)> + 0.016|movie: Battle of the Coral Sea (1959)> + 0.016|movie: Undercover Blues (1993)> + 0.016|movie: The November Men (1993)> + 0.016|movie: Noose for a Gunman (1960)> + 0.016|movie: Mister Buddwing (1966)> + 0.016|movie: When It Clicks (1998)> + 0.016|movie: 10 to Midnight (1983)> + 0.016|movie: What's Going on Up There? (2007)> + 0.016|movie: Man with the Gun (1955)> + 0.016|movie: The Brothers Karamazov (1958)> + 0.016|movie: Where Love Has Gone (1964)> + 0.016|movie: Teresa's Tattoo (1994)> + 0.016|movie: Warlock (1959)> + 0.016|movie: Will Success Spoil Rock Hunter? (1957)> + 0.016|movie: Fedora (1978)> + 0.016|movie: Unite for Japan (2011)> + 0.016|movie: Visiting Hours (1982)> + 0.016|movie: Star in the Dust (1956)> + 0.016|movie: Waco (1966)> + 0.016|movie: Never So Few (1959)> + 0.016|movie: Portrait of a Hitman (1979)> + 0.016|movie: Downtown (1990)> + 0.016|movie: Stella (1990)> + 0.016|movie: Porgy and Bess (1959)> + 0.016|movie: FedCon XVIII: The Golden Future (2009)> + 0.016|movie: Total Recall (1990)> + 0.016|movie: Francis Goes to West Point (1952)> + 0.016|movie: Free Birds (2013)> + 0.016|movie: Catlow (1971)> + 0.016|movie: The Big Picture (1989)> + 0.016|movie: The Devil's Rain (1975)> + 0.016|movie: The Domino Principle (1977)> + 0.016|movie: Remo Williams: The Adventure Begins (1985)> + 0.016|movie: Lady Magdalene's (2008)> + 0.016|movie: Top Banana (1954)> + 0.016|movie: Ballistic: Ecks vs. Sever (2002)> + 0.016|movie: Snow Dogs (2002)> + 0.016|movie: Red Line 7000 (1965)> + 0.016|movie: The Transformers: The Movie (1986)> + 0.016|movie: Seeking a Friend for the End of the World (2012)> + 0.016|movie: Operation Bikini (1963)> + 0.016|movie: Quantum Quest: A Cassini Space Odyssey (2010)> + 0.016|movie: Night Stage to Galveston (1952)> + 0.016|movie: Maniac Cop 2 (1990)> + 0.016|movie: Shenandoah (1965)> + 0.016|movie: Through Dead Eyes (1999)> + 0.016|movie: Ice Station Zebra (1968)> + 0.016|movie: Malaya (1949)> + 0.016|movie: Blade Runner (1982)> + 0.016|movie: City Slickers II: The Legend of Curly's Gold (1994)> + 0.016|movie: The Gambler Wore a Gun (1961)> + 0.016|movie: A Whale of a Tale (1977)> + 0.016|movie: The Onion Field (1979)> + 0.016|movie: Old Overland Trail (1953)> + 0.016|movie: Sylvia (1965)> + 0.016|movie: 48 Hrs. (1982)> + 0.016|movie: Silverado (1985)> + 0.016|movie: Disco Fever (1978/I)> + 0.016|movie: The Quick and the Dead (1963)> + 0.016|movie: The Big Mouth (1967)> + 0.016|movie: Women's Prison (1955)> + 0.016|movie: Classic Hollywood Cinemas (2014)> + 0.016|movie: Satan's Satellites (1958)> + 0.016|movie: Zombies of the Stratosphere (1952)> + 0.016|movie: Over the Hedge (2006)> + 0.016|movie: Warrior of the Lost World (1983)> + 0.016|movie: Man in the Wilderness (1971)> + 0.016|movie: Be Counted (2010)> + 0.016|movie: George & Brad in Bed (2009)> + 0.016|movie: My New Gun (1992)> + 0.016|movie: Festival in Cannes (2001)> + 0.016|movie: The Green Berets (1968)> + 0.016|movie: The Man in the Gray Flannel Suit (1956)> + 0.016|movie: 10 (1979)> + 0.016|movie: Irma la Douce (1963)> + 0.016|movie: A Public Affair (1962)> + 0.016|movie: The Dark (1979)> + 0.016|movie: The Naked and the Dead (1958)> + 0.016|movie: Mad Cowgirl (2006)> + 0.016|movie: Canon City (1948)> + 0.016|movie: Mulan (1998)> + 0.016|movie: 36 Hours (1965)> + 0.016|movie: Logan's Run (1976)> + 0.016|movie: Mommy (1995)> + 0.016|movie: Country Boy (1966)> + 0.016|movie: Truck Turner (1974)> + 0.016|movie: As Young as We Are (1958)> + 0.016|movie: The Satan Bug (1965)> + 0.016|movie: The Kidnapping of the President (1980)> + 0.016|movie: Eve of Destruction (1991)> + 0.016|movie: Actors in War (2005)> + 0.016|movie: 8: The Mormon Proposition (2010)> + 0.016|movie: Maybe Someday (2014)> + 0.016|movie: Texas Across the River (1966)> + 0.016|movie: The Men (1950)> + 0.016|movie: Gypsy Holiday (1948)> + 0.016|movie: The Great Santini (1979)> + 0.016|movie: The View from Pompey's Head (1955)> + 0.016|movie: Town Tamer (1965)> + 0.016|movie: Love in a Goldfish Bowl (1961)> + 0.016|movie: The Man from Galveston (1963)> + 0.016|movie: Three the Hard Way (1974)> + 0.016|movie: Cobra (1986)> + 0.016|movie: Charles Beaumont: The Short Life of Twilight Zone's Magic Man (2010)> + 0.016|movie: Drango (1957)> + 0.016|movie: Nomads (1986)> + 0.016|movie: Shout (1991)> + 0.016|movie: The Princess and the Frog (2009)> + 0.016|movie: The Wild (2006)> + 0.016|movie: Frankie and Johnny Are Married (2003)> + 0.016|movie: Conduct Unbecoming (1975)> + 0.016|movie: Eat with Me (2013)> + 0.016|movie: Ulterior Motives (1993)> + 0.016|movie: The White Orchid (2014)> + 0.016|movie: House of Bamboo (1955)> + 0.016|movie: Toyo's Camera (2009)> + 0.016|movie: Three Amigos! (1986)> + 0.016|movie: Apache Rifles (1964)> + 0.016|movie: Dreamrider (1993)> + 0.016|movie: Invasion of the Body Snatchers (1978)> + 0.016|movie: Rave Review (1994)> + 0.016|movie: Drawing Down the Moon (1997)> + 0.016|movie: Amore! (1993)> + 0.016|movie: Storybook (1996)> + 0.016|movie: Blood Oath (1990)> + 0.016|movie: Blind Date (1987)> + 0.016|movie: Hometown Heroes (????)> + 0.016|movie: Apache Uprising (1965)> + 0.016|movie: Black Spurs (1965)> + 0.016|movie: Dodgeball: A True Underdog Story (2004)> + 0.016|movie: Taps (1981)> + 0.016|movie: Being Canadian (2014)> + 0.016|movie: Gunfight at the O.K. Corral (1957)> + 0.016|movie: Supervisors (1982)> + 0.016|movie: Double Trouble (1992/I)> + 0.016|movie: Inmaculada (1950)> + 0.016|movie: Ninja Cheerleaders (2008)> + 0.016|movie: Shoot or Be Shot (2002)> + 0.016|movie: Oh, God! (1977)> + 0.016|movie: Incubus (1966)> + 0.016|movie: Flareup (1969)> + 0.016|movie: First Strike (1985)> + 0.016|movie: Mars and Beyond (2000)> + 0.016|movie: Moon Over Parador (1988)> + 0.016|movie: The Con (2011)> + 0.016|movie: Galaxis (1995)> + 0.016|movie: Rashi: A Light After the Dark Ages (1999)> + 0.016|movie: The Wheeler Dealers (1963)> + 0.016|movie: Safe Passage (1994)> + 0.016|movie: I Was a Teenage Werewolf (1957)> + 0.016|movie: The Supernaturals (1986)> + 0.016|movie: Southern Comfort (1981)> + 0.016|movie: Last of the Pony Riders (1953)> + 0.016|movie: China Moon (1994)> + 0.016|movie: Night of the Lepus (1972)> + 0.016|movie: Kid Monk Baroni (1952)> + 0.016|movie: Rocky (1976)> + 0.016|movie: Danguard Ace (2010)> + 0.016|movie: Danguard Ace 2 (2010)> + 0.016|movie: Danguard Ace 3 (2010)> + 0.016|movie: Fist of the North Star: The Ray Saga (2011)> + 0.016|movie: Fist of the North Star: The Shin Saga (2009)> + 0.016|movie: Fist of the North Star: The Souther Saga (2011)> + 0.016|movie: Fist of the North Star: The Toki Saga (2011)> + 0.016|movie: Gaiking I (2011)> + 0.016|movie: Gaiking II (2011)> + 0.016|movie: Gaiking III (2011)> + 0.016|movie: Kinjite: Forbidden Subjects (1989)> + 0.016|movie: Space Pirate Captain Harlock (2010)> + 0.016|movie: Space Pirate Captain Harlock 2 (2010)> + 0.016|movie: The Adventures of Nadja (2011)> + 0.016|movie: The Adventures of Nadja II (2011)> + 0.016|movie: Working Girl (1988)> + 0.016|movie: Land of No Return (1978)> + 0.016|movie: Fast Forward (1985)> + 0.016|movie: Ice Palace (1960)> + 0.016|movie: Charlie Chan and the Curse of the Dragon Queen (1981)> + 0.016|movie: New York Skyride (1994)> + 0.016|movie: Riding Shotgun (1954)> + 0.016|movie: Choke Canyon (1986)> + 0.016|movie: Bus Riley's Back in Town (1965)> + 0.016|movie: Marriage on the Rocks (1965)> + 0.016|movie: Escape from Red Rock (1957)> + 0.016|movie: Invasion Earth: The Aliens Are Here (1988)> + 0.016|movie: Some Like It Hot (1959)> + 0.016|movie: Queen for a Day (1951)> + 0.016|movie: The Black Orchid (1958)> + 0.016|movie: Star Trek: Nemesis (2002)> + 0.016|movie: The Eavesdropper (2004)> + 0.016|movie: Who Gets the House? (1999)> + 0.016|movie: Judgment at Nuremberg (1961)> + 0.016|movie: The Ballad of Josie (1967)> + 0.016|movie: The Malibu Bikini Shop (1986)> + 0.016|movie: Tiger Orange (2014)> + 0.016|movie: Josie's Castle (1972)> + 0.016|movie: The Promise (1979)> + 0.016|movie: The Brain Eaters (1958)> + 0.016|movie: Suburban Commando (1991)> + 0.016|movie: I Crave Rock & Roll (1996)> + 0.016|movie: George's 40th Birthday (2010)> + 0.016|movie: Made in Paris (1966)> + 0.016|movie: Land of the Free (1998)> + 0.016|movie: Wedding Bell Blues (1996)> + 0.016|movie: Gunpoint (1966)> + 0.016|movie: Fist of the North Star: The Raul Saga (2011)> + 0.016|movie: Kitaro's Graveyard Gang (2009)> + 0.016|movie: Kitaro's Graveyard Gang 2 (2011)> + 0.016|movie: Lun Lun the Flower Girl (2011)> + 0.016|movie: Lun Lun the Flower Girl 2 (2011)> + 0.016|movie: Starzinger (2011)> + 0.016|movie: Starzinger II (2011)> + 0.016|movie: Starzinger III (2011)> + 0.016|movie: Meet the Applegates (1990)> + 0.016|movie: Truth or Consequences, N.M. (1997)> + 0.016|movie: The Mack (1973)> + 0.016|movie: The Intruder (1962)> + 0.016|movie: You Light Up My Life (1977)> + 0.016|movie: Lone Texan (1959)> + 0.016|movie: Ride a Crooked Trail (1958)> + 0.016|movie: High Plains Drifter (1973)> + 0.016|movie: The Texan Meets Calamity Jane (1950)> + 0.016|movie: Star Trek: First Contact (1996)> + 0.016|movie: Atlantis: The Lost Empire (2001)> + 0.016|movie: Mag Wheels (1978)> + 0.016|movie: Eating Raoul (1982)> + 0.016|movie: Action Jackson (1988)> + 0.016|movie: Between the Lines (1977)> + 0.016|movie: Big Bad Mama (1974)> + 0.016|movie: The Hearse (1980)> + 0.016|movie: Superchick (1973)> + 0.016|movie: Westworld (1973)> + 0.016|movie: Morituri (1965)> + 0.016|movie: Grand Jury (1976)> + 0.016|movie: Gunfight at Comanche Creek (1963)> + 0.016|movie: Fanboys (2009)> + 0.016|movie: Megaforce (1982)> + 0.016|movie: Cattle Town (1952)> + 0.016|movie: Peter Arthur Stories (2009)> + 0.016|movie: Dogmike (2012)> + 0.016|movie: Jaws 2 (1978)> + 0.016|movie: Movie Movie (1978)> + 0.016|movie: Duke of Chicago (1949)> + 0.016|movie: Near Dark (1987)> + 0.016|movie: Nightmare Honeymoon (1974)> + 0.016|movie: King of the Khyber Rifles (1953)> + 0.016|movie: Wagons West (1952)> + 0.016|movie: Death Wish II (1982)> + 0.016|movie: The Pagemaster (1994)> + 0.016|movie: Loving Couples (1980)> + 0.016|movie: Hava Nagila: The Movie (2012)> + 0.016|movie: Tall Tale (1995)> + 0.016|movie: Montana Incident (1952)> + 0.016|movie: Hannah Lee: An American Primitive (1953)> + 0.016|movie: Because I Said So (2007)> + 0.016|movie: Destiny Turns on the Radio (1995)> + 0.016|movie: Jumpin' Jack Flash (1986)> + 0.016|movie: The Cage (1956)> + 0.016|movie: Slaughter's Big Rip-Off (1973)> + 0.016|movie: Holy Ghost People (2013)> + 0.016|movie: Cannibal Women in the Avocado Jungle of Death (1989)> + 0.016|movie: A Wake in Providence (1999)> + 0.016|movie: Where the Boys Are (1960)> + 0.016|movie: Back Street (1961)> + 0.016|movie: Stardate Revisited: The Origin of Star Trek - The Next Generation (2012)> + 0.016|movie: One of Our Spies Is Missing (1966)> + 0.016|movie: The Apple Dumpling Gang (1975)> + 0.016|movie: Underground Entertainment: The Movie (2011)> + 0.016|movie: Master of the World (1961)> + 0.016|movie: Which Way to the Front? (1970)> + 0.016|movie: Cast a Long Shadow (1959)> + 0.016|movie: Flashback (2013/I)> + 0.016|movie: Falcon Down (2001)> + 0.016|movie: Apache Woman (1955)> + 0.016|movie: Ladies in Waiting (1994)> + 0.016|movie: Doctor, You've Got to Be Kidding! (1967)> + 0.016|movie: Hell to Eternity (1960)> + 0.016|movie: Return from the River Kwai (1989)> + 0.016|movie: House of Wax (1953)> + 0.016|movie: PT 109 (1963)> + 0.016|movie: The Radicals (1990)> + 0.016|movie: Road Agent (1952)> + 0.016|movie: Battle Beyond the Stars (1980)> + 0.016|movie: 3:10 to Yuma (1957)> + 0.016|movie: Cat Ballou (1965)> + 0.016|movie: Gunfight in Abilene (1967)> + 0.016|movie: Support Your Local Gunfighter (1971)> + 0.016|movie: War of Heaven (2010)> + 0.016|movie: Trackdown (1976)> + 0.016|movie: The Outrage (1964)> + 0.016|movie: Space Milkshake (2012)> + 0.016|movie: The Hard Part Begins (1973)> + 0.016|movie: Mausoleum (1983)> + 0.016|movie: My Beautiful Laundrette (1985)> + 0.016|movie: Blood Magic (2010)> + 0.016|movie: Neutron Zombies (2015)> + 0.016|movie: A Divided Community (2012)> + 0.016|movie: Go Tell the Spartans (1978)> + 0.016|movie: Lies (1985)> + 0.016|movie: A Glance Away (1999)> + 0.016|movie: The Explosive Generation (1961)> + 0.016|movie: Drive Me Crazy (1999)> + 0.016|movie: Decaf (1996)> + 0.016|movie: The Balcony (1963)> + 0.016|movie: The Curious Female (1970)> + 0.016|movie: Quest for Life (2000)> + 0.016|movie: The Running Man (1987)> + 0.016|movie: Pretty Maids All in a Row (1971)> + 0.016|movie: Don't Cry, It's Only Thunder (1982)> + 0.016|movie: The Crazies (1973)> + 0.016|movie: The Zone (1995)> + 0.016|movie: Oedipus Rex (1957)> + 0.016|movie: Strange Frame: Love & Sax (2012)> + 0.016|movie: Arnold (1973)> + 0.016|movie: The Evolution of Stem Cell Research (2014)> + 0.016|movie: Zambezia (2012)> + 0.016|movie: Noon Blue Apples (2002)> + 0.016|movie: The Moviemakers (1968/II)> + 0.016|movie: Signpost to Murder (1964)> + 0.016|movie: The Prime Ministers: The Pioneers (2013)> + 0.016|movie: Noon Sunday (1970)> + 0.016|movie: An American Dream (1966)> + 0.016|movie: Sinbad: Beyond the Veil of Mists (2000)> + 0.016|movie: Taxi (1953)> + 0.016|movie: El Norte (1983)> + 0.016|movie: Oblivion 2: Backlash (1996)> + 0.016|movie: A Nightmare on Elm Street 3: Dream Warriors (1987)> + 0.016|movie: Deadly Weapon (1989)> + 0.016|movie: Botschaft der Gtter (1976)> + 0.016|movie: Gojira no gyakush (1955)> + 0.016|movie: Sora no daikaij Radon (1956)> + 0.016|movie: Hole in the Paper Sky (2008)> + 0.016|movie: 7 Colt per 7 carogne (1967)> + 0.016|movie: The Law and Jake Wade (1958)> + 0.016|movie: Fear in the Night (1947)> + 0.016|movie: Penance (2014)> + 0.016|movie: Groom Lake (2002)> + 0.016|movie: The Day Time Ended (1979)> + 0.016|movie: Life of St. Paul Series (1949)> + 0.016|movie: The Duke (1999)> + 0.016|movie: Phoenix the Warrior (1988)> + 0.016|movie: Ravager (1997)> + 0.016|movie: Track of Thunder (1967)> + 0.016|movie: This Bitter Earth (2012)> + 0.016|movie: Jigsaw (1968)> + 0.016|movie: Married and Counting (2013)> + 0.016|movie: A Majority of One (1961)> + 0.016|movie: Oblivion (1994)> + 0.016|movie: Showdown of the Godz (2008)> + 0.016|movie: Back to the Future... The Ride (1991)> + 0.016|movie: Annul Victory (2009)> + 0.016|movie: Destiny in Space (1994)> + 0.016|movie: The Third Walker (1978)> + 0.016|movie: Strike in Town (1955)> + 0.016|movie: Strike in Town: Revised (1956)> + 0.016|movie: South Seas (1974)> + 0.016|movie: River of Stone (1994)> + 0.016|movie: Test Pilot (1957)> + 0.016|movie: The Business of Farming (1961)> + 0.016|movie: Patsy Mink: Ahead of the Majority (2008)> + 0.016|movie: You Don't Know Jack: The Jack Soo Story (2009)> + 0.016|movie: Beyond Our Own (1947)> + 0.016|movie: Jefftowne (1998)> + 0.016|movie: Mystery Range (1947)> + 0.016|movie: Deathwatch (1966)> + 0.016|movie: Tarzan's Jungle Rebellion (1967)> + 0.016|movie: Mirror Universe: Part 1 (2008)> + 0.016|movie: Gays Beware with Jesse Tyler Ferguson and George Takei (2013)> + 0.016|movie: William Shatner's Gonzo Ballet (2009)> + 0.016|movie: Conscience and the Constitution (2000)> + 0.016|movie: Cowboys & Engines (2014)> + 0.016|movie: The Butler's Night Off (1951)> + 0.016|movie: Escape from Heaven (2014)> + 0.016|movie: The Potential Wives of Norman Mao (2011)> + 0.016|movie: Carpati: 50 Miles, 50 Years (1996)> + 0.016|movie: A Life Apart: Hasidism in America (1997)> + 0.016|movie: Far from the Tree (2010)> + 0.016|movie: Green (2008/III)> + 0.016|movie: An American Synagogue (2009)> + 0.016|movie: Time to Kill (1945)> + 0.016|movie: Omaha Street (????)> + 0.016|movie: Handball (2012)> + 0.016|movie: Jeungbal (1994)> + 0.016|movie: The Norman Vincent Peale Story (1962)> + 0.016|movie: William Shatner Sings O Canada (2011)> + 0.016|movie: William Shatner Sings O Canada (USA)> + 0.016|movie: The Jogger (1988/I)> + 0.016|movie: Armageddon: Target Earth (1998)> + 0.016|movie: Greenhouse Gamble (1992)> + 0.016|movie: Jellies & Other Ocean Drifters (1996)> + 0.016|movie: Minyan in Kaifeng (2001)> + 0.016|movie: Titanica (1995)> + 0.016|movie: The Magic Pearl (1997)> + 0.016|movie: Space Shuttle (2011)> + 0.016|movie: A Conversation with George Takei (1995)> + 0.016|movie: Space Travelers (2009)> + 0.016|movie: City Out of Time (1959)> + 0.016|movie: Khan (2008)> + 0.016|movie: Live Life (2007/I)> + 0.016|movie: Seasons (1987)> + 0.016|movie: The Soldier (1962)> + 0.016|movie: Universe (1976)> + 0.016|movie: Frank Lloyd Wright and Japanese Art (1997)> + 0.016|movie: Moving Memories (1993)> + 0.016|movie: The Missing Scarf (2013)> + 0.016|movie: With Honors Denied (2003)> + 0.016|movie: Drones, Clones and Pheromones (????)> + 0.016|movie: The Torturer (2008)> + 0.016|movie: Up from the Ape (1975)> + 0.015|movie: Brewster's Millions (1985)> + 0.015|movie: Them! (1954)> + 0.015|movie: Larry Crowne (2011)> + 0.015|movie: Pocketful of Miracles (1961)> + 0.015|movie: Star Trek Into Darkness (2013)> + 0.015|movie: Meteor (1979)> + 0.015|movie: Nighthawks (1981)> + 0.015|movie: Illegal (1955)> + 0.015|movie: Land of the Lost (2009)> + 0.015|movie: The First Wives Club (1996)> + 0.015|movie: Strange Lady in Town (1955)> + 0.015|movie: Troop Beverly Hills (1989)> + 0.015|movie: Hamlet A.D.D. (2014)> + 0.015|movie: Salvador (1986)> + 0.015|movie: RoboCop 2 (1990)> + 0.014|movie: Universal Soldier (1992)> + 0.014|movie: Teenage Mutant Ninja Turtles II: The Secret of the Ooze (1991)> + 0.014|movie: Tom Horn (1980)> + 0.014|movie: Billy Jack Goes to Washington (1977)> + 0.014|movie: Showtime (2002)> + 0.014|movie: Blind Dating (2006)> + 0.014|movie: Trouble in Mind (1985)> + 0.013|movie: The Commission (2003)> + 0.013|movie: Stalking Santa (2006)> + 0.013|movie: Heat (1995)> + 0.013|movie: Cimarron (1960)> + 0.013|movie: Annie Hall (1977)> + 0.013|movie: Free Enterprise (1998)> + 0.012|movie: A Guide for the Married Man (1967)> + 0.012|movie: Tension at Table Rock (1956)> + 0.012|movie: The Pool Boys (2011)> + 0.012|movie: The Greatest Story Ever Told (1965)> + 0.012|movie: Critic's Choice (1963)> + 0.011|movie: Zombrex: Dead Rising Sun (2010)> + 0.011|movie: Corman's World: Exploits of a Hollywood Rebel (2011)> + 0.011|movie: The Great Buck Howard (2008)> + 0.011|movie: All the President's Men (1976)> + 0.011|movie: InAlienable (2008)> + 0.011|movie: The Shakiest Gun in the West (1968)> + 0.011|movie: Rhubarb (1951)> + 0.01|movie: The Three Stooges (2012)> + 0.01|movie: Miss Congeniality (2000)> + 0.01|movie: Art of Submission (2009)> + 0.01|movie: Scarface (1983)> + 0.01|movie: Closed Circuit (2013)> + 0.009|movie: Horrorween (2011)> + 0.009|movie: Blazing Saddles (1974)> + 0.009|movie: Variety Girl (1947)> + 0.009|movie: The Bonfire of the Vanities (1990)> + 0.008|movie: Miss Congeniality 2: Armed and Fabulous (2005)> + 0.008|movie: Trekkies 2 (2004)> + 0.007|movie: Osmosis Jones (2001)> + 0.007|movie: Finishing the Game: The Search for a New Bruce Lee (2007)> + 0.007|movie: Coming Home (1978)> + 0.006|movie: Airport (1970)> + 0.006|movie: The Wizard of Speed and Time (1988)> + 0.006|movie: Transformers: Dark of the Moon (2011)> + 0.005|movie: You Don't Mess with the Zohan (2008)> + 0.005|movie: The Buccaneer (1958)>
  how-many "" |result>
  hash-data[4] "" |result>
  hash-data[4] select[1,6] "" |result>
  load improved-imdb.sw
  context
  help
  icontext
  icontext
  |result> => |movie: Star Trek: The Motion Picture (1979)> + 0.156|movie: Star Trek IV: The Voyage Home (1986)> + 0.156|movie: Star Trek III: The Search for Spock (1984)> + 0.156|movie: Star Trek VI: The Undiscovered Country (1991)> + 0.109|movie: Star Trek V: The Final Frontier (1989)> + 0.109|movie: Star Trek: The Wrath of Khan (1982)> + 0.109|movie: Road Trek 2011 (2012)> + 0.109|movie: Star Trek Adventure (1991)> + 0.078|movie: To Be Takei (2014)> + 0.058|movie: Star Trek: Generations (1994)> + 0.057|movie: Trekkies (1997)> + 0.047|movie: Trek Nation (2010)> + 0.047|movie: Superbman: The Other Movie (1981)> + 0.047|movie: The Captains (2011)> + 0.045|movie: Backyard Blockbusters (2012)> + 0.031|movie: Loaded Weapon 1 (1993)> + 0.031|movie: Battle for the Planet of the Apes (1973)> + 0.031|movie: The 6th People's Choice Awards (1980)> + 0.031|movie: Coneheads (1993)> + 0.031|movie: Alien Nation (1988)> + 0.031|movie: FedCon XXI (2012)> + 0.031|movie: Hang 'Em High (1968)> + 0.031|movie: Battlestar Galactica (1978)> + 0.031|movie: Unbelievable!!!!! (2014)> + 0.031|movie: Separate Lives (1995)> + 0.031|movie: Kingdom of the Spiders (1977)> + 0.031|movie: Impulse (1974)> + 0.031|movie: Bug Buster (1998)> + 0.03|movie: Raw Deal (1986)> + 0.03|movie: First Family (1980)> + 0.029|movie: Airplane II: The Sequel (1982)> + 0.023|movie: Star Trek (2009)> + 0.016|movie: The LXD: The Secrets of the Ra (2011)> + 0.016|movie: Duffy of San Quentin (1954)> + 0.016|movie: Transcendent Man (2009)> + 0.016|movie: Frankenstein vs. the Creature from Blood Cove (2005)> + 0.016|movie: Terminator 2: Judgment Day (1991)> + 0.016|movie: Kamasutra - Vollendung der Liebe (1969)> + 0.016|movie: The Curse of the Dragon (1993)> + 0.016|movie: Blood Diamond (2006)> + 0.016|movie: Blue Dream (2013)> + 0.016|movie: Tru Loved (2008)> + 0.016|movie: The Story of Computer Graphics (1999)> + 0.016|movie: Raintree County (1957)> + 0.016|movie: Are We There Yet? (2005)> + 0.016|movie: Sworn to Justice (1996)> + 0.016|movie: Bambai Raat Ki Bahon Mein (1968)> + 0.016|movie: Escape from Planet Earth (2013)> + 0.016|movie: Regarding Henry (1991)> + 0.016|movie: Walk Don't Run (1966)> + 0.016|movie: Moontrap (1989)> + 0.016|movie: The Wilby Conspiracy (1975)> + 0.016|movie: Ringers: Lord of the Fans (2005)> + 0.016|movie: Surge of Power (2004)> + 0.016|movie: Bill & Ted's Bogus Journey (1991)> + 0.016|movie: Tarzan's Deadly Silence (1970)> + 0.016|movie: These Amazing Shadows (2011)> + 0.016|movie: Across the Line (2000)> + 0.016|movie: Live by the Fist (1993)> + 0.016|movie: Comanche blanco (1968)> + 0.016|movie: The Red Shadow (1932/II)> + 0.016|movie: Black Samson (1974)> + 0.016|movie: C.H.O.M.P.S. (1979)> + 0.016|movie: Thank God It's Friday (1978)> + 0.016|movie: Battle of the Coral Sea (1959)> + 0.016|movie: Undercover Blues (1993)> + 0.016|movie: The November Men (1993)> + 0.016|movie: Noose for a Gunman (1960)> + 0.016|movie: Mister Buddwing (1966)> + 0.016|movie: When It Clicks (1998)> + 0.016|movie: 10 to Midnight (1983)> + 0.016|movie: What's Going on Up There? (2007)> + 0.016|movie: Man with the Gun (1955)> + 0.016|movie: The Brothers Karamazov (1958)> + 0.016|movie: Where Love Has Gone (1964)> + 0.016|movie: Teresa's Tattoo (1994)> + 0.016|movie: Warlock (1959)> + 0.016|movie: Will Success Spoil Rock Hunter? (1957)> + 0.016|movie: Fedora (1978)> + 0.016|movie: Unite for Japan (2011)> + 0.016|movie: Visiting Hours (1982)> + 0.016|movie: Star in the Dust (1956)> + 0.016|movie: Waco (1966)> + 0.016|movie: Never So Few (1959)> + 0.016|movie: Portrait of a Hitman (1979)> + 0.016|movie: Downtown (1990)> + 0.016|movie: Stella (1990)> + 0.016|movie: Porgy and Bess (1959)> + 0.016|movie: FedCon XVIII: The Golden Future (2009)> + 0.016|movie: Total Recall (1990)> + 0.016|movie: Francis Goes to West Point (1952)> + 0.016|movie: Free Birds (2013)> + 0.016|movie: Catlow (1971)> + 0.016|movie: The Big Picture (1989)> + 0.016|movie: The Devil's Rain (1975)> + 0.016|movie: The Domino Principle (1977)> + 0.016|movie: Remo Williams: The Adventure Begins (1985)> + 0.016|movie: Lady Magdalene's (2008)> + 0.016|movie: Top Banana (1954)> + 0.016|movie: Ballistic: Ecks vs. Sever (2002)> + 0.016|movie: Snow Dogs (2002)> + 0.016|movie: Red Line 7000 (1965)> + 0.016|movie: The Transformers: The Movie (1986)> + 0.016|movie: Seeking a Friend for the End of the World (2012)> + 0.016|movie: Operation Bikini (1963)> + 0.016|movie: Quantum Quest: A Cassini Space Odyssey (2010)> + 0.016|movie: Night Stage to Galveston (1952)> + 0.016|movie: Maniac Cop 2 (1990)> + 0.016|movie: Shenandoah (1965)> + 0.016|movie: Through Dead Eyes (1999)> + 0.016|movie: Ice Station Zebra (1968)> + 0.016|movie: Malaya (1949)> + 0.016|movie: Blade Runner (1982)> + 0.016|movie: City Slickers II: The Legend of Curly's Gold (1994)> + 0.016|movie: The Gambler Wore a Gun (1961)> + 0.016|movie: A Whale of a Tale (1977)> + 0.016|movie: The Onion Field (1979)> + 0.016|movie: Old Overland Trail (1953)> + 0.016|movie: Sylvia (1965)> + 0.016|movie: 48 Hrs. (1982)> + 0.016|movie: Silverado (1985)> + 0.016|movie: Disco Fever (1978/I)> + 0.016|movie: The Quick and the Dead (1963)> + 0.016|movie: The Big Mouth (1967)> + 0.016|movie: Women's Prison (1955)> + 0.016|movie: Classic Hollywood Cinemas (2014)> + 0.016|movie: Satan's Satellites (1958)> + 0.016|movie: Zombies of the Stratosphere (1952)> + 0.016|movie: Over the Hedge (2006)> + 0.016|movie: Warrior of the Lost World (1983)> + 0.016|movie: Man in the Wilderness (1971)> + 0.016|movie: Be Counted (2010)> + 0.016|movie: George & Brad in Bed (2009)> + 0.016|movie: My New Gun (1992)> + 0.016|movie: Festival in Cannes (2001)> + 0.016|movie: The Green Berets (1968)> + 0.016|movie: The Man in the Gray Flannel Suit (1956)> + 0.016|movie: 10 (1979)> + 0.016|movie: Irma la Douce (1963)> + 0.016|movie: A Public Affair (1962)> + 0.016|movie: The Dark (1979)> + 0.016|movie: The Naked and the Dead (1958)> + 0.016|movie: Mad Cowgirl (2006)> + 0.016|movie: Canon City (1948)> + 0.016|movie: Mulan (1998)> + 0.016|movie: 36 Hours (1965)> + 0.016|movie: Logan's Run (1976)> + 0.016|movie: Mommy (1995)> + 0.016|movie: Country Boy (1966)> + 0.016|movie: Truck Turner (1974)> + 0.016|movie: As Young as We Are (1958)> + 0.016|movie: The Satan Bug (1965)> + 0.016|movie: The Kidnapping of the President (1980)> + 0.016|movie: Eve of Destruction (1991)> + 0.016|movie: Actors in War (2005)> + 0.016|movie: 8: The Mormon Proposition (2010)> + 0.016|movie: Maybe Someday (2014)> + 0.016|movie: Texas Across the River (1966)> + 0.016|movie: The Men (1950)> + 0.016|movie: Gypsy Holiday (1948)> + 0.016|movie: The Great Santini (1979)> + 0.016|movie: The View from Pompey's Head (1955)> + 0.016|movie: Town Tamer (1965)> + 0.016|movie: Love in a Goldfish Bowl (1961)> + 0.016|movie: The Man from Galveston (1963)> + 0.016|movie: Three the Hard Way (1974)> + 0.016|movie: Cobra (1986)> + 0.016|movie: Charles Beaumont: The Short Life of Twilight Zone's Magic Man (2010)> + 0.016|movie: Drango (1957)> + 0.016|movie: Nomads (1986)> + 0.016|movie: Shout (1991)> + 0.016|movie: The Princess and the Frog (2009)> + 0.016|movie: The Wild (2006)> + 0.016|movie: Frankie and Johnny Are Married (2003)> + 0.016|movie: Conduct Unbecoming (1975)> + 0.016|movie: Eat with Me (2013)> + 0.016|movie: Ulterior Motives (1993)> + 0.016|movie: The White Orchid (2014)> + 0.016|movie: House of Bamboo (1955)> + 0.016|movie: Toyo's Camera (2009)> + 0.016|movie: Three Amigos! (1986)> + 0.016|movie: Apache Rifles (1964)> + 0.016|movie: Dreamrider (1993)> + 0.016|movie: Invasion of the Body Snatchers (1978)> + 0.016|movie: Rave Review (1994)> + 0.016|movie: Drawing Down the Moon (1997)> + 0.016|movie: Amore! (1993)> + 0.016|movie: Storybook (1996)> + 0.016|movie: Blood Oath (1990)> + 0.016|movie: Blind Date (1987)> + 0.016|movie: Hometown Heroes (????)> + 0.016|movie: Apache Uprising (1965)> + 0.016|movie: Black Spurs (1965)> + 0.016|movie: Dodgeball: A True Underdog Story (2004)> + 0.016|movie: Taps (1981)> + 0.016|movie: Being Canadian (2014)> + 0.016|movie: Gunfight at the O.K. Corral (1957)> + 0.016|movie: Supervisors (1982)> + 0.016|movie: Double Trouble (1992/I)> + 0.016|movie: Inmaculada (1950)> + 0.016|movie: Ninja Cheerleaders (2008)> + 0.016|movie: Shoot or Be Shot (2002)> + 0.016|movie: Oh, God! (1977)> + 0.016|movie: Incubus (1966)> + 0.016|movie: Flareup (1969)> + 0.016|movie: First Strike (1985)> + 0.016|movie: Mars and Beyond (2000)> + 0.016|movie: Moon Over Parador (1988)> + 0.016|movie: The Con (2011)> + 0.016|movie: Galaxis (1995)> + 0.016|movie: Rashi: A Light After the Dark Ages (1999)> + 0.016|movie: The Wheeler Dealers (1963)> + 0.016|movie: Safe Passage (1994)> + 0.016|movie: I Was a Teenage Werewolf (1957)> + 0.016|movie: The Supernaturals (1986)> + 0.016|movie: Southern Comfort (1981)> + 0.016|movie: Last of the Pony Riders (1953)> + 0.016|movie: China Moon (1994)> + 0.016|movie: Night of the Lepus (1972)> + 0.016|movie: Kid Monk Baroni (1952)> + 0.016|movie: Rocky (1976)> + 0.016|movie: Danguard Ace (2010)> + 0.016|movie: Danguard Ace 2 (2010)> + 0.016|movie: Danguard Ace 3 (2010)> + 0.016|movie: Fist of the North Star: The Ray Saga (2011)> + 0.016|movie: Fist of the North Star: The Shin Saga (2009)> + 0.016|movie: Fist of the North Star: The Souther Saga (2011)> + 0.016|movie: Fist of the North Star: The Toki Saga (2011)> + 0.016|movie: Gaiking I (2011)> + 0.016|movie: Gaiking II (2011)> + 0.016|movie: Gaiking III (2011)> + 0.016|movie: Kinjite: Forbidden Subjects (1989)> + 0.016|movie: Space Pirate Captain Harlock (2010)> + 0.016|movie: Space Pirate Captain Harlock 2 (2010)> + 0.016|movie: The Adventures of Nadja (2011)> + 0.016|movie: The Adventures of Nadja II (2011)> + 0.016|movie: Working Girl (1988)> + 0.016|movie: Land of No Return (1978)> + 0.016|movie: Fast Forward (1985)> + 0.016|movie: Ice Palace (1960)> + 0.016|movie: Charlie Chan and the Curse of the Dragon Queen (1981)> + 0.016|movie: New York Skyride (1994)> + 0.016|movie: Riding Shotgun (1954)> + 0.016|movie: Choke Canyon (1986)> + 0.016|movie: Bus Riley's Back in Town (1965)> + 0.016|movie: Marriage on the Rocks (1965)> + 0.016|movie: Escape from Red Rock (1957)> + 0.016|movie: Invasion Earth: The Aliens Are Here (1988)> + 0.016|movie: Some Like It Hot (1959)> + 0.016|movie: Queen for a Day (1951)> + 0.016|movie: The Black Orchid (1958)> + 0.016|movie: Star Trek: Nemesis (2002)> + 0.016|movie: The Eavesdropper (2004)> + 0.016|movie: Who Gets the House? (1999)> + 0.016|movie: Judgment at Nuremberg (1961)> + 0.016|movie: The Ballad of Josie (1967)> + 0.016|movie: The Malibu Bikini Shop (1986)> + 0.016|movie: Tiger Orange (2014)> + 0.016|movie: Josie's Castle (1972)> + 0.016|movie: The Promise (1979)> + 0.016|movie: The Brain Eaters (1958)> + 0.016|movie: Suburban Commando (1991)> + 0.016|movie: I Crave Rock & Roll (1996)> + 0.016|movie: George's 40th Birthday (2010)> + 0.016|movie: Made in Paris (1966)> + 0.016|movie: Land of the Free (1998)> + 0.016|movie: Wedding Bell Blues (1996)> + 0.016|movie: Gunpoint (1966)> + 0.016|movie: Fist of the North Star: The Raul Saga (2011)> + 0.016|movie: Kitaro's Graveyard Gang (2009)> + 0.016|movie: Kitaro's Graveyard Gang 2 (2011)> + 0.016|movie: Lun Lun the Flower Girl (2011)> + 0.016|movie: Lun Lun the Flower Girl 2 (2011)> + 0.016|movie: Starzinger (2011)> + 0.016|movie: Starzinger II (2011)> + 0.016|movie: Starzinger III (2011)> + 0.016|movie: Meet the Applegates (1990)> + 0.016|movie: Truth or Consequences, N.M. (1997)> + 0.016|movie: The Mack (1973)> + 0.016|movie: The Intruder (1962)> + 0.016|movie: You Light Up My Life (1977)> + 0.016|movie: Lone Texan (1959)> + 0.016|movie: Ride a Crooked Trail (1958)> + 0.016|movie: High Plains Drifter (1973)> + 0.016|movie: The Texan Meets Calamity Jane (1950)> + 0.016|movie: Star Trek: First Contact (1996)> + 0.016|movie: Atlantis: The Lost Empire (2001)> + 0.016|movie: Mag Wheels (1978)> + 0.016|movie: Eating Raoul (1982)> + 0.016|movie: Action Jackson (1988)> + 0.016|movie: Between the Lines (1977)> + 0.016|movie: Big Bad Mama (1974)> + 0.016|movie: The Hearse (1980)> + 0.016|movie: Superchick (1973)> + 0.016|movie: Westworld (1973)> + 0.016|movie: Morituri (1965)> + 0.016|movie: Grand Jury (1976)> + 0.016|movie: Gunfight at Comanche Creek (1963)> + 0.016|movie: Fanboys (2009)> + 0.016|movie: Megaforce (1982)> + 0.016|movie: Cattle Town (1952)> + 0.016|movie: Peter Arthur Stories (2009)> + 0.016|movie: Dogmike (2012)> + 0.016|movie: Jaws 2 (1978)> + 0.016|movie: Movie Movie (1978)> + 0.016|movie: Duke of Chicago (1949)> + 0.016|movie: Near Dark (1987)> + 0.016|movie: Nightmare Honeymoon (1974)> + 0.016|movie: King of the Khyber Rifles (1953)> + 0.016|movie: Wagons West (1952)> + 0.016|movie: Death Wish II (1982)> + 0.016|movie: The Pagemaster (1994)> + 0.016|movie: Loving Couples (1980)> + 0.016|movie: Hava Nagila: The Movie (2012)> + 0.016|movie: Tall Tale (1995)> + 0.016|movie: Montana Incident (1952)> + 0.016|movie: Hannah Lee: An American Primitive (1953)> + 0.016|movie: Because I Said So (2007)> + 0.016|movie: Destiny Turns on the Radio (1995)> + 0.016|movie: Jumpin' Jack Flash (1986)> + 0.016|movie: The Cage (1956)> + 0.016|movie: Slaughter's Big Rip-Off (1973)> + 0.016|movie: Holy Ghost People (2013)> + 0.016|movie: Cannibal Women in the Avocado Jungle of Death (1989)> + 0.016|movie: A Wake in Providence (1999)> + 0.016|movie: Where the Boys Are (1960)> + 0.016|movie: Back Street (1961)> + 0.016|movie: Stardate Revisited: The Origin of Star Trek - The Next Generation (2012)> + 0.016|movie: One of Our Spies Is Missing (1966)> + 0.016|movie: The Apple Dumpling Gang (1975)> + 0.016|movie: Underground Entertainment: The Movie (2011)> + 0.016|movie: Master of the World (1961)> + 0.016|movie: Which Way to the Front? (1970)> + 0.016|movie: Cast a Long Shadow (1959)> + 0.016|movie: Flashback (2013/I)> + 0.016|movie: Falcon Down (2001)> + 0.016|movie: Apache Woman (1955)> + 0.016|movie: Ladies in Waiting (1994)> + 0.016|movie: Doctor, You've Got to Be Kidding! (1967)> + 0.016|movie: Hell to Eternity (1960)> + 0.016|movie: Return from the River Kwai (1989)> + 0.016|movie: House of Wax (1953)> + 0.016|movie: PT 109 (1963)> + 0.016|movie: The Radicals (1990)> + 0.016|movie: Road Agent (1952)> + 0.016|movie: Battle Beyond the Stars (1980)> + 0.016|movie: 3:10 to Yuma (1957)> + 0.016|movie: Cat Ballou (1965)> + 0.016|movie: Gunfight in Abilene (1967)> + 0.016|movie: Support Your Local Gunfighter (1971)> + 0.016|movie: War of Heaven (2010)> + 0.016|movie: Trackdown (1976)> + 0.016|movie: The Outrage (1964)> + 0.016|movie: Space Milkshake (2012)> + 0.016|movie: The Hard Part Begins (1973)> + 0.016|movie: Mausoleum (1983)> + 0.016|movie: My Beautiful Laundrette (1985)> + 0.016|movie: Blood Magic (2010)> + 0.016|movie: Neutron Zombies (2015)> + 0.016|movie: A Divided Community (2012)> + 0.016|movie: Go Tell the Spartans (1978)> + 0.016|movie: Lies (1985)> + 0.016|movie: A Glance Away (1999)> + 0.016|movie: The Explosive Generation (1961)> + 0.016|movie: Drive Me Crazy (1999)> + 0.016|movie: Decaf (1996)> + 0.016|movie: The Balcony (1963)> + 0.016|movie: The Curious Female (1970)> + 0.016|movie: Quest for Life (2000)> + 0.016|movie: The Running Man (1987)> + 0.016|movie: Pretty Maids All in a Row (1971)> + 0.016|movie: Don't Cry, It's Only Thunder (1982)> + 0.016|movie: The Crazies (1973)> + 0.016|movie: The Zone (1995)> + 0.016|movie: Oedipus Rex (1957)> + 0.016|movie: Strange Frame: Love & Sax (2012)> + 0.016|movie: Arnold (1973)> + 0.016|movie: The Evolution of Stem Cell Research (2014)> + 0.016|movie: Zambezia (2012)> + 0.016|movie: Noon Blue Apples (2002)> + 0.016|movie: The Moviemakers (1968/II)> + 0.016|movie: Signpost to Murder (1964)> + 0.016|movie: The Prime Ministers: The Pioneers (2013)> + 0.016|movie: Noon Sunday (1970)> + 0.016|movie: An American Dream (1966)> + 0.016|movie: Sinbad: Beyond the Veil of Mists (2000)> + 0.016|movie: Taxi (1953)> + 0.016|movie: El Norte (1983)> + 0.016|movie: Oblivion 2: Backlash (1996)> + 0.016|movie: A Nightmare on Elm Street 3: Dream Warriors (1987)> + 0.016|movie: Deadly Weapon (1989)> + 0.016|movie: Botschaft der Gtter (1976)> + 0.016|movie: Gojira no gyakush (1955)> + 0.016|movie: Sora no daikaij Radon (1956)> + 0.016|movie: Hole in the Paper Sky (2008)> + 0.016|movie: 7 Colt per 7 carogne (1967)> + 0.016|movie: The Law and Jake Wade (1958)> + 0.016|movie: Fear in the Night (1947)> + 0.016|movie: Penance (2014)> + 0.016|movie: Groom Lake (2002)> + 0.016|movie: The Day Time Ended (1979)> + 0.016|movie: Life of St. Paul Series (1949)> + 0.016|movie: The Duke (1999)> + 0.016|movie: Phoenix the Warrior (1988)> + 0.016|movie: Ravager (1997)> + 0.016|movie: Track of Thunder (1967)> + 0.016|movie: This Bitter Earth (2012)> + 0.016|movie: Jigsaw (1968)> + 0.016|movie: Married and Counting (2013)> + 0.016|movie: A Majority of One (1961)> + 0.016|movie: Oblivion (1994)> + 0.016|movie: Showdown of the Godz (2008)> + 0.016|movie: Back to the Future... The Ride (1991)> + 0.016|movie: Annul Victory (2009)> + 0.016|movie: Destiny in Space (1994)> + 0.016|movie: The Third Walker (1978)> + 0.016|movie: Strike in Town (1955)> + 0.016|movie: Strike in Town: Revised (1956)> + 0.016|movie: South Seas (1974)> + 0.016|movie: River of Stone (1994)> + 0.016|movie: Test Pilot (1957)> + 0.016|movie: The Business of Farming (1961)> + 0.016|movie: Patsy Mink: Ahead of the Majority (2008)> + 0.016|movie: You Don't Know Jack: The Jack Soo Story (2009)> + 0.016|movie: Beyond Our Own (1947)> + 0.016|movie: Jefftowne (1998)> + 0.016|movie: Mystery Range (1947)> + 0.016|movie: Deathwatch (1966)> + 0.016|movie: Tarzan's Jungle Rebellion (1967)> + 0.016|movie: Mirror Universe: Part 1 (2008)> + 0.016|movie: Gays Beware with Jesse Tyler Ferguson and George Takei (2013)> + 0.016|movie: William Shatner's Gonzo Ballet (2009)> + 0.016|movie: Conscience and the Constitution (2000)> + 0.016|movie: Cowboys & Engines (2014)> + 0.016|movie: The Butler's Night Off (1951)> + 0.016|movie: Escape from Heaven (2014)> + 0.016|movie: The Potential Wives of Norman Mao (2011)> + 0.016|movie: Carpati: 50 Miles, 50 Years (1996)> + 0.016|movie: A Life Apart: Hasidism in America (1997)> + 0.016|movie: Far from the Tree (2010)> + 0.016|movie: Green (2008/III)> + 0.016|movie: An American Synagogue (2009)> + 0.016|movie: Time to Kill (1945)> + 0.016|movie: Omaha Street (????)> + 0.016|movie: Handball (2012)> + 0.016|movie: Jeungbal (1994)> + 0.016|movie: The Norman Vincent Peale Story (1962)> + 0.016|movie: William Shatner Sings O Canada (2011)> + 0.016|movie: William Shatner Sings O Canada (USA)> + 0.016|movie: The Jogger (1988/I)> + 0.016|movie: Armageddon: Target Earth (1998)> + 0.016|movie: Greenhouse Gamble (1992)> + 0.016|movie: Jellies & Other Ocean Drifters (1996)> + 0.016|movie: Minyan in Kaifeng (2001)> + 0.016|movie: Titanica (1995)> + 0.016|movie: The Magic Pearl (1997)> + 0.016|movie: Space Shuttle (2011)> + 0.016|movie: A Conversation with George Takei (1995)> + 0.016|movie: Space Travelers (2009)> + 0.016|movie: City Out of Time (1959)> + 0.016|movie: Khan (2008)> + 0.016|movie: Live Life (2007/I)> + 0.016|movie: Seasons (1987)> + 0.016|movie: The Soldier (1962)> + 0.016|movie: Universe (1976)> + 0.016|movie: Frank Lloyd Wright and Japanese Art (1997)> + 0.016|movie: Moving Memories (1993)> + 0.016|movie: The Missing Scarf (2013)> + 0.016|movie: With Honors Denied (2003)> + 0.016|movie: Drones, Clones and Pheromones (????)> + 0.016|movie: The Torturer (2008)> + 0.016|movie: Up from the Ape (1975)> + 0.015|movie: Brewster's Millions (1985)> + 0.015|movie: Them! (1954)> + 0.015|movie: Larry Crowne (2011)> + 0.015|movie: Pocketful of Miracles (1961)> + 0.015|movie: Star Trek Into Darkness (2013)> + 0.015|movie: Meteor (1979)> + 0.015|movie: Nighthawks (1981)> + 0.015|movie: Illegal (1955)> + 0.015|movie: Land of the Lost (2009)> + 0.015|movie: The First Wives Club (1996)> + 0.015|movie: Strange Lady in Town (1955)> + 0.015|movie: Troop Beverly Hills (1989)> + 0.015|movie: Hamlet A.D.D. (2014)> + 0.015|movie: Salvador (1986)> + 0.015|movie: RoboCop 2 (1990)> + 0.014|movie: Universal Soldier (1992)> + 0.014|movie: Teenage Mutant Ninja Turtles II: The Secret of the Ooze (1991)> + 0.014|movie: Tom Horn (1980)> + 0.014|movie: Billy Jack Goes to Washington (1977)> + 0.014|movie: Showtime (2002)> + 0.014|movie: Blind Dating (2006)> + 0.014|movie: Trouble in Mind (1985)> + 0.013|movie: The Commission (2003)> + 0.013|movie: Stalking Santa (2006)> + 0.013|movie: Heat (1995)> + 0.013|movie: Cimarron (1960)> + 0.013|movie: Annie Hall (1977)> + 0.013|movie: Free Enterprise (1998)> + 0.012|movie: A Guide for the Married Man (1967)> + 0.012|movie: Tension at Table Rock (1956)> + 0.012|movie: The Pool Boys (2011)> + 0.012|movie: The Greatest Story Ever Told (1965)> + 0.012|movie: Critic's Choice (1963)> + 0.011|movie: Zombrex: Dead Rising Sun (2010)> + 0.011|movie: Corman's World: Exploits of a Hollywood Rebel (2011)> + 0.011|movie: The Great Buck Howard (2008)> + 0.011|movie: All the President's Men (1976)> + 0.011|movie: InAlienable (2008)> + 0.011|movie: The Shakiest Gun in the West (1968)> + 0.011|movie: Rhubarb (1951)> + 0.01|movie: The Three Stooges (2012)> + 0.01|movie: Miss Congeniality (2000)> + 0.01|movie: Art of Submission (2009)> + 0.01|movie: Scarface (1983)> + 0.01|movie: Closed Circuit (2013)> + 0.009|movie: Horrorween (2011)> + 0.009|movie: Blazing Saddles (1974)> + 0.009|movie: Variety Girl (1947)> + 0.009|movie: The Bonfire of the Vanities (1990)> + 0.008|movie: Miss Congeniality 2: Armed and Fabulous (2005)> + 0.008|movie: Trekkies 2 (2004)> + 0.007|movie: Osmosis Jones (2001)> + 0.007|movie: Finishing the Game: The Search for a New Bruce Lee (2007)> + 0.007|movie: Coming Home (1978)> + 0.006|movie: Airport (1970)> + 0.006|movie: The Wizard of Speed and Time (1988)> + 0.006|movie: Transformers: Dark of the Moon (2011)> + 0.005|movie: You Don't Mess with the Zohan (2008)> + 0.005|movie: The Buccaneer (1958)>
  how-many "" |result>
  hash-data[4] common[actors] select[1,6] "" |result>
  table[actor,coeff] common[actors] select[1,6] "" |result>
  q

2015-08-26
  hash[2] |a>
  hash[6] |a>
  hash[6] split |a b c d e f>
  hash[10] split |u v w x y z>
  load fred-sam-friends.sw
  dump
  hash-friends |Fred> => hash[4] friends |_self>
  hash-friends |Sam> => hash[4] friends |_self>
  dump
  common[friends] split |Fred Sam>
  common[hash-friends] split |Fred Sam>
  h
  web-load http://semantic-db.org/sw-examples/active-network-propagation.sw
  dump
  q

2015-08-27
  load improved-imdb.sw
  |result> => self-similar[actors] |movie: Star Trek: The Motion Picture (1979)>
  hash-data[4] "" |result>
  context
  history
  hash-data[4] movies common[actors] select[1,6] "" |result>
  how-many movies common[actors] select[1,6] "" |result>
  table[movie,coeff] select[1,30] movies common[actors] select[1,6] "" |result>
  table[movie,coeff] 100 select[1,30] movies common[actors] select[1,6] "" |result>
  table[movie,coeff] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  hash-data[4] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  table[movie,coeff] select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  table[actor,coeff] select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  table[actor,coeff] actors select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  history
  table[actor,coeff] coeff-sort actors select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  hash-data[4] actors select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  history
  table[actor,coeff] select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  hash-data[4] select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  history
  hash-data[4] actors select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  table[actor,coeff] drop-below[150] coeff-sort actors select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  hash-data[4] drop-below[150] coeff-sort actors select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  debug on
  table[actor,coeff] drop-below[150] coeff-sort actors select[1,9] 100 select[1,30] coeff-sort movies common[actors] select[1,6] "" |result>
  
  q

2015-08-28
  utility-function-for |procrasti> => 13|trane dies> + 5|get drunk> + 9|get laid> + 20|make Kr5ddit a success> + 2|sleep> + 6|get a job> + 0.1|a glass of milk>
  
  utility-function-for |mumble> => 2|sleep> + 10|get drunk> + 5|get laid> + 0.2|trane dies>
  dump
  what-want-most |*> #=> select[1,1] coeff-sort utility-function-for |_self>
  what-want-most |procrasti>
  what-want-most |mumble>
  what-want-least |*> #=> select[1,1] reverse coeff-sort utility-function-for |_self>
  what-want-least |procrasti>
  what-want-least |mumble>
  
  load top-level-domains.sw
  table[country,top-level-domain] ket-sort rel-kets[top-level-domain] |>
  
  history
  table[country,top-level-domain] sort-by[top-level-domain] rel-kets[top-level-domain] |>
  top-level-domain |Australia>
  top-level-domain |United States>
  history
  
  q

2015-08-28
  extract-value |a: b: c: d>
  extract-category |a: b: c: d>
  q

2015-08-28
  remove-leading-category |a: b: c: d>
  remove-leading-category |a>
  q

2015-08-28
  load foaf-example-in-sw.sw
  dump
  table[person,*] "" |list>
  
  table[person,*] "" |list>
  table[person,website] "" |list>
  dump
  history
  table[person,*] "" |list>
  q

2015-08-28
  load foaf-example-in-sw.sw
  table[person,*] "" |list>
  dump
  
  q

2015-08-28
  find-leading-category |a: b: c>
  find-leading-category |a>
  q

2015-08-29
  debug on
  split |a a b a b a a c a>
  split 3|a b c>
  q

2015-08-29
  clean-split |add up.>
  clean-split 3|add up.>
  clean-split |something cool? Yeah! fish-soup-bah>
  clean-split |literally, probably>
  clean-split | (literally, probably) of small >
  lower |FiSh>
  to-lower |FiSh>
  lowercase |FiSh>
  lower-case |FiSh>
  q

2015-08-29
  16^4 |x>
  q

2015-08-29
  debug on
  clean-split |word, word2. word3!>
  q

2015-08-29
  load moby-thesaurus.sw
  remove-leading-category |word: fish>
  list-of-English |words> => remove-leading-category rel-kets[synonym] |>
  save english-dictionary.sw
  history
  q

2015-09-03
  load fred-sam-friends.sw
  dump
  dump exact
  similar[supported-ops] |Fred>
  q

2015-09-11
  M |yes> => |yes> + -1|no>
  M |no> => -1|yes> + |no>
  
  clean-M |*> #=> normalize drop M |_self>
  clean-M |yes>
  clean-M |no>
  clean-M (|yes> + |no>)
  M (|yes> + |no>)
  drop M (|yes> + |no>)
  clean-M split |yes no>
  -- doh! linear literal ops breaks this idea
  3^12 |x>
  4^4 |x>
  5^5 |x>
  6^6 |x>
  7^7 |x>
  8^8 |x>
  history
  drop M (|yes> + |no>)
  drop M (0.8|yes> + 0.2|no>)
  history
  matrix[M]
  drop M (|yes> + |no>)
  drop M (0.8|yes> + 0.2|no>)
  clean-M |*> #=> drop M |_self>
  clean-M (|yes> + |no>)
  history
  clean-M (0.8|yes> + 0.2|no>)
  q

2015-09-11
  debug on
  process-reaction(|a> + |b> + |c>,|b>,|fish>)
  process-reaction(|a> + |b> + 3|H2> + 5|O2> + |z>,2|H2> + |O2>,2|H2O>)
  process-reaction(|a> + |b> + |c>,|x>,|fish>)
  q

2015-09-12
  process-reaction(|a> + |b> + |c> + 0.8|x>,|x>,|fish>)
  process-reaction(|a> + |b> + |c> + 1.9|x>,|x>,|fish>)
  process-reaction(2|n> + 3|U: 235>,|n> + |U: 235>,|Ba: 141> + |Kr: 92> + 3|n>)
  process-reaction(4|n> + 2|U: 235> + |Ba: 141> + |Kr: 92>,|n> + |U: 235>,|Ba: 141> + |Kr: 92> + 3|n>)
  history
  context
  context uranium fission products
  fission-channel-1 |U: 235> => |Ba: 141> + |Kr: 92> + 3|n>
  fission-channel-2 |U: 235> => |Xe: 140> + |Sr: 94> + 2|n>
  fission-channel-3 |U: 235> => |La: 143> + |Br: 90> + 3|n>
  fission-channel-4 |U: 235> => |Cs: 137> + |Rb: 96> + 3|n>
  fission-channel-5 |U: 235> => |I: 131> + |Y: 89> + 16|n>
  dump
  list-of-fission-channels |U: 235> => |op: fission-channel-1> + |op: fission-channel-2> + |op: fission-channel-3> + |op: fission-channel-4> + |op: fission-channel-5>
  fission |*> #=> apply(pick-elt list-of-fission-channels |_self>,|_self>)
  
  dump
  fission |U: 235>
  .
  .
  .
  .
  .
  dump
  process-reaction(3|n> + 4|U: 235>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(4|n> + 3|U: 235> + |Xe: 140> + |Sr: 94>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(4|n> + 3|U: 235> + |Xe: 140> + |Sr: 94>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(6|n> + 2|U: 235> + |Xe: 140> + |Sr: 94> + |La: 143> + |Br: 90>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(8|n> + |U: 235> + |Xe: 140> + |Sr: 94> + 2|La: 143> + 2|Br: 90>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(23|n> + |Xe: 140> + |Sr: 94> + 2|La: 143> + 2|Br: 90> + |I: 131> + |Y: 89>,|n> + |U: 235>,fission |U: 235>)
  dump
  save uranium-fission.sw
  save history

2015-09-12
  process-reaction(|a> + |b> + |c> + 0.8|x>,|x>,|fish>)
  process-reaction(|a> + |b> + |c> + 1.9|x>,|x>,|fish>)
  process-reaction(2|n> + 3|U: 235>,|n> + |U: 235>,|Ba: 141> + |Kr: 92> + 3|n>)
  process-reaction(4|n> + 2|U: 235> + |Ba: 141> + |Kr: 92>,|n> + |U: 235>,|Ba: 141> + |Kr: 92> + 3|n>)
  history
  context
  context uranium fission products
  fission-channel-1 |U: 235> => |Ba: 141> + |Kr: 92> + 3|n>
  fission-channel-2 |U: 235> => |Xe: 140> + |Sr: 94> + 2|n>
  fission-channel-3 |U: 235> => |La: 143> + |Br: 90> + 3|n>
  fission-channel-4 |U: 235> => |Cs: 137> + |Rb: 96> + 3|n>
  fission-channel-5 |U: 235> => |I: 131> + |Y: 89> + 16|n>
  dump
  list-of-fission-channels |U: 235> => |op: fission-channel-1> + |op: fission-channel-2> + |op: fission-channel-3> + |op: fission-channel-4> + |op: fission-channel-5>
  fission |*> #=> apply(pick-elt list-of-fission-channels |_self>,|_self>)
  
  dump
  fission |U: 235>
  .
  .
  .
  .
  .
  dump
  process-reaction(3|n> + 4|U: 235>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(4|n> + 3|U: 235> + |Xe: 140> + |Sr: 94>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(4|n> + 3|U: 235> + |Xe: 140> + |Sr: 94>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(6|n> + 2|U: 235> + |Xe: 140> + |Sr: 94> + |La: 143> + |Br: 90>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(8|n> + |U: 235> + |Xe: 140> + |Sr: 94> + 2|La: 143> + 2|Br: 90>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(23|n> + |Xe: 140> + |Sr: 94> + 2|La: 143> + 2|Br: 90> + |I: 131> + |Y: 89>,|n> + |U: 235>,fission |U: 235>)
  dump
  save uranium-fission.sw
  save history
  process-reaction(5|H2> + 7|O2>,2|H2> + |O2>,2|H2O>)
  q

2015-09-14
  load uranium-fission.sw
  dump
  fission |*> #=> apply(weighted-pick-elt list-of-fission-channels |_self>,|_self>)
  weighted-pick-elt (|a> + 5|b>)
  .
  .
  .
  .
  .
  .
  history
  save uranium-fission.sw
  dump
  q

2015-09-16
  filter-down-to(|b> + 3|c>,|a> + 5|b> + 0.7|c> + 9|d> + 3.2|e>)
  filter-down-to(|a> + 5|b> + 0.7|c> + 9|d> + 3.2|e>,|b> + 3|c>)
  q

2015-09-20
  load bots.sw
  dump
  dump (|bot: Madison> + |bot: Emma>)
  q

2015-09-20
  debug on
  load bots.sw
  dump
  dump (|bot: Emma> + |bot: Madison>)
  q

2015-09-20
  load bots.sw
  dump (|bot: Emma> + |bot: Madison>)
  q

2015-09-21
  load fred-sam-friends.sw
  dump
  apply(|op: friends>,|Fred>)
  apply(3|op: friends>,|Fred>)
  q

2015-09-21
  q

2015-09-21
  q

2015-09-21
  load fred-sam-friends.sw
  dump
  q

2015-09-21
  load fred-sam-friends.sw
  dump
  q

2015-09-21
  load fred-sam-friends.sw
  dump
  dump exact
  q

2015-09-24
  load fred-sam-friends.sw
  dump
  q

2015-09-24
  load fred-sam-friends.sw
  dump
  drop-below[0.7] 0.7|x> + 0.3|y> + 9|z>
  drop-below[0.7] (0.7|x> + 0.3|y> + 9|z>)
  q

2015-09-24
  load fred-sam-friends.sw
  dump
  common[friends] split |Fred Sam>
  common[friends] (|Fred> + |Sam>)
  dump
  q

2015-09-24
  load fred-sam-friends.sw
  debug on
  common[friends] split |Fred Sam>
  q

2015-09-24
  load fred-sam-friends.sw
  common[friends] split |Fred Sam>
  debug on
  common[friends] split |Fred Sam>
  q

2015-09-24
  load fred-sam-friends.sw
  debug on
  common[friends] split |Fred Sam>
  q

2015-09-24
  load fred-sam-friends.sw
  debug on
  common[friends] split |Fred Sam>
  q

2015-09-24
  load fred-sam-friends.sw
  common[friends] split |Fred Sam>
  union[friends] split |Fred Sam>
  select[1,3] friends |Fred>
  drop-below[3] 2|x>
  q

2015-09-24
  top[2] split |a b c d>
  top[2] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[3] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[0] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[1] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  coeff-sort (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  q

2015-09-24
  top[1] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[0] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[2] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[3] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[4] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[5] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[6] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[20] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[0] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  select[2,2] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  select[1,1] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  select[0,0] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  q

2015-09-24
  top[0] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[1] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[3] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[1] split |a b c d e>
  load fred-sam-friends.sw
  dump
  union[friends] split |Fred Sam>
  history
  top[0] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[1] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[3] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[10] (|a> + 3|b> + 2|c> + 9.3|d> + 0.5|e>)
  top[1] (3.2|a> + |b> + 3.2|c> + 3.2|d> + 3|e> + |f> + |g> + 3.1|h> + 3.2|i>)
  top[2] (3.2|a> + |b> + 3.2|c> + 3.2|d> + 3|e> + |f> + |g> + 3.1|h> + 3.2|i>)
  top[3] (3.2|a> + |b> + 3.2|c> + 3.2|d> + 3|e> + |f> + |g> + 3.1|h> + 3.2|i>)
  top[4] (3.2|a> + |b> + 3.2|c> + 3.2|d> + 3|e> + |f> + |g> + 3.1|h> + 3.2|i>)
  top[5] (3.2|a> + |b> + 3.2|c> + 3.2|d> + 3|e> + |f> + |g> + 3.1|h> + 3.2|i>)
  top[6] (3.2|a> + |b> + 3.2|c> + 3.2|d> + 3|e> + |f> + |g> + 3.1|h> + 3.2|i>)
  top[7] (3.2|a> + |b> + 3.2|c> + 3.2|d> + 3|e> + |f> + |g> + 3.1|h> + 3.2|i>)
  q

2015-09-24
  load fred-sam-friends.sw
  common[friends] split |Fred Sam>
  q

2015-09-24
  load fred-sam-friends.sw
  common[friends] split |Fred Sam>
  q

2015-09-24
  load fred-sam-friends.sw
  common[friends] split |Fred Sam>
  q

2015-09-24
  load fib-play.sw
  dump
  fib |7>
  dump
  q

2015-09-25
  equal(split |a b>,split |a b>)
  equal(split |a b c>,split |a b>)
  q

2015-09-26
  op |x> => |a>
  op |x> +=> |a>
  dump
  op |x> +=> |b>
  dump
  q

2015-09-26
  debug on
  op |x> => |a>
  op |x> +=> |b>
  dump
  q

2015-10-03
  algebra(|x>,|^>,|2>)
  non-Abelian-algebra(|A> + |B> + |C>,|^>,|2>)
  q

2015-10-04
  process-reaction(10|dollar>,0.6|dollar>,|apple>)
  price |apple> => 0.6|dollar>
  process-reaction(10|dollar>,price |apple>,|apple>)
  process-reaction(10|dollar>,3 price |apple>,3 |apple>)
  save history

2015-10-04
  process-reaction(10|dollar>,0.6|dollar>,|apple>)
  price |apple> => 0.6|dollar>
  process-reaction(10|dollar>,price |apple>,|apple>)
  process-reaction(10|dollar>,3 price |apple>,3 |apple>)
  save history
  process-reaction(10|dollar>,price 4 |apple>,4 |apple>)
  save history

2015-10-11
  process-reaction(10|dollar>,0.6|dollar>,|apple>)
  price |apple> => 0.6|dollar>
  process-reaction(10|dollar>,price |apple>,|apple>)
  process-reaction(10|dollar>,3 price |apple>,3 |apple>)
  save history
  process-reaction(10|dollar>,price 4 |apple>,4 |apple>)
  save history
  non-Abelian-algebra(|A> + |B>,|^>,|3>)
  history
  dump
  price |orange> => 0.8 |dollar>
  dump
  price |milk> => 2.3|dollar>
  price |coffee> => 5.5|dollar>
  dump
  price |steak> => 9|dollar>
  dump
  process-reaction(30|dollar>,price |orange>,|orange>)
  process-reaction(29.2|dollar> + |orange>,price 4 |apple>,4 |apple>)
  process-reaction(26.8|dollar> + |orange> + 4|apple>,price |milk> + price |coffee> + price |steak>,|milk> + |coffee> + |steak>)
  list-for |shopping> => |orange> + 4|apple> + |milk> + |coffee> + |steak>
  dump
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  list-for |shopping> +=> |tomato>
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  history
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  price |tomato>
  price list-for |shopping>
  price |*> => |undefined price>
  price list-for |shopping>
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  history
  price list-for |shopping>
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  do-you-know price |tomato>
  reset
  dump
  reset
  price |apple> => 0.6|dollar>
  
  price |orange> => 0.8|dollar>
  
  price |milk> => 2.3|dollar>
  
  price |coffee> => 5.5|dollar>
  
  price |steak> => 9|dollar>
  
  list-for |shopping> => |orange> + 4|apple> + |milk> + |coffee> + |steak> + |tomato>
  
  dump
  do-you-know price |tomato>
  price-is-defined |*> #=> do-you-know price |_self>
  price-is-defined |tomato>
  price-is-defined |apple>
  list-of |available items> => such-that[price-is-defined] list-for |shopping>
  dump
  history
  process-reaction(30|dollar>,price list-of |available items>,list-of |available items>)
  save history

2015-10-11
  load simple-shopping-basket.sw
  dump
  100 similar[basket] |f>
  dump
  history
  100 self-similar[basket] |f>
  fish |x> => |fish-x>
  fish|x>
  fish |x> + |c>
  fish |x> + (|c>)
  q

2015-10-11
  process-reaction(10|dollar>,0.6|dollar>,|apple>)
  price |apple> => 0.6|dollar>
  process-reaction(10|dollar>,price |apple>,|apple>)
  process-reaction(10|dollar>,3 price |apple>,3 |apple>)
  save history
  process-reaction(10|dollar>,price 4 |apple>,4 |apple>)
  save history
  non-Abelian-algebra(|A> + |B>,|^>,|3>)
  history
  dump
  price |orange> => 0.8 |dollar>
  dump
  price |milk> => 2.3|dollar>
  price |coffee> => 5.5|dollar>
  dump
  price |steak> => 9|dollar>
  dump
  process-reaction(30|dollar>,price |orange>,|orange>)
  process-reaction(29.2|dollar> + |orange>,price 4 |apple>,4 |apple>)
  process-reaction(26.8|dollar> + |orange> + 4|apple>,price |milk> + price |coffee> + price |steak>,|milk> + |coffee> + |steak>)
  list-for |shopping> => |orange> + 4|apple> + |milk> + |coffee> + |steak>
  dump
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  list-for |shopping> +=> |tomato>
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  history
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  price |tomato>
  price list-for |shopping>
  price |*> => |undefined price>
  price list-for |shopping>
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  history
  price list-for |shopping>
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  do-you-know price |tomato>
  reset
  dump
  reset
  price |apple> => 0.6|dollar>
  
  price |orange> => 0.8|dollar>
  
  price |milk> => 2.3|dollar>
  
  price |coffee> => 5.5|dollar>
  
  price |steak> => 9|dollar>
  
  list-for |shopping> => |orange> + 4|apple> + |milk> + |coffee> + |steak> + |tomato>
  
  dump
  do-you-know price |tomato>
  price-is-defined |*> #=> do-you-know price |_self>
  price-is-defined |tomato>
  price-is-defined |apple>
  list-of |available items> => such-that[price-is-defined] list-for |shopping>
  dump
  history
  process-reaction(30|dollar>,price list-of |available items>,list-of |available items>)
  save history
  history
  clean |x>
  debug on
  clean |x>
  [A
  
  threshold_filter[7] 2|x>
  threshold-filter[7] 2|x>
  sigmoid-in-range[3,5] rank split |a b c d e f g h i j k l>
  in-range[3,5] rank split |a b c d e f g h i j k l>
  coeff-in-range[3,5]  rank split |a b c d e f g h i j k l>
  save history

2015-10-11
  process-reaction(10|dollar>,0.6|dollar>,|apple>)
  price |apple> => 0.6|dollar>
  process-reaction(10|dollar>,price |apple>,|apple>)
  process-reaction(10|dollar>,3 price |apple>,3 |apple>)
  save history
  process-reaction(10|dollar>,price 4 |apple>,4 |apple>)
  save history
  non-Abelian-algebra(|A> + |B>,|^>,|3>)
  history
  dump
  price |orange> => 0.8 |dollar>
  dump
  price |milk> => 2.3|dollar>
  price |coffee> => 5.5|dollar>
  dump
  price |steak> => 9|dollar>
  dump
  process-reaction(30|dollar>,price |orange>,|orange>)
  process-reaction(29.2|dollar> + |orange>,price 4 |apple>,4 |apple>)
  process-reaction(26.8|dollar> + |orange> + 4|apple>,price |milk> + price |coffee> + price |steak>,|milk> + |coffee> + |steak>)
  list-for |shopping> => |orange> + 4|apple> + |milk> + |coffee> + |steak>
  dump
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  list-for |shopping> +=> |tomato>
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  history
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  price |tomato>
  price list-for |shopping>
  price |*> => |undefined price>
  price list-for |shopping>
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  history
  price list-for |shopping>
  process-reaction(30|dollar>,price list-for |shopping>,list-for |shopping>)
  do-you-know price |tomato>
  reset
  dump
  reset
  price |apple> => 0.6|dollar>
  
  price |orange> => 0.8|dollar>
  
  price |milk> => 2.3|dollar>
  
  price |coffee> => 5.5|dollar>
  
  price |steak> => 9|dollar>
  
  list-for |shopping> => |orange> + 4|apple> + |milk> + |coffee> + |steak> + |tomato>
  
  dump
  do-you-know price |tomato>
  price-is-defined |*> #=> do-you-know price |_self>
  price-is-defined |tomato>
  price-is-defined |apple>
  list-of |available items> => such-that[price-is-defined] list-for |shopping>
  dump
  history
  process-reaction(30|dollar>,price list-of |available items>,list-of |available items>)
  save history
  history
  clean |x>
  debug on
  clean |x>
  [A
  
  threshold_filter[7] 2|x>
  threshold-filter[7] 2|x>
  sigmoid-in-range[3,5] rank split |a b c d e f g h i j k l>
  in-range[3,5] rank split |a b c d e f g h i j k l>
  coeff-in-range[3,5]  rank split |a b c d e f g h i j k l>
  save history
  ket-length |abcdef>
  pop-float |number: 37>
  pop-float (|number: 3.2> + |number: 5> + 2|number: 0.3>)
  q

2015-10-12
  debug on
  clean-ket-label |x>
  clean-ket-label 3.72197|x>
  height |everest> => |km: 8>
  height |some mountain> => times[0.333] height |everest>
  dump
  history
  
  q

2015-10-12
  -- Mary went sledding with her family
  went |Mary> => |sledding>
  went-sledding-with |Mary> => |her family>
  dump
  -- maybe we need sequences for this to work nicely?
  -- Mary won a race against her brother to the bottom of the hill
  won |Mary> => |a race>
  won-a-race-against |Mary> => |her brother>
  won-a-race-to-the |Mary> => |bottom of the hill>
  dump
  won-a |Mary> => |race>
  dump
  -- Mary cheered because it was her first time winning
  cheered |Mary> => |yes>
  cheered-because |Mary> => |it was her first time winning>
  dump
  history
  cheered-because-it-was |Mary> => |her first time winning>
  dump
  context learning about Mary
  url |context: learning about Mary> => |url: http://blog.ayoungprogrammer.com/2015/09/a-simple-artificial-intelligence.html>
  went |Mary> => |sledding>
  went-sledding-with |Mary> => |her family>
  won |Mary> => |a race>
  won-a-race-against |Mary> => |her brother>
  won-a-race-to-the |Mary> => |bottom of the hill>
  won-a |Mary> => |race>
  cheered |Mary> => |yes>
  cheered-because |Mary> => |it was her first time winning>
  cheered-because-it-was |Mary> => |her first time winning>
  
  dump
  save learning-about-Mary.sw
  her-brother |Mary> => |Jack>
  dump
  save learning-about-Mary.sw
  dump
  -- what is the minimum amount of structure we need to auto learn and recall rules???
  save history

2015-10-13
  -- Mary went sledding with her family
  went |Mary> => |sledding>
  went-sledding-with |Mary> => |her family>
  dump
  -- maybe we need sequences for this to work nicely?
  -- Mary won a race against her brother to the bottom of the hill
  won |Mary> => |a race>
  won-a-race-against |Mary> => |her brother>
  won-a-race-to-the |Mary> => |bottom of the hill>
  dump
  won-a |Mary> => |race>
  dump
  -- Mary cheered because it was her first time winning
  cheered |Mary> => |yes>
  cheered-because |Mary> => |it was her first time winning>
  dump
  history
  cheered-because-it-was |Mary> => |her first time winning>
  dump
  context learning about Mary
  url |context: learning about Mary> => |url: http://blog.ayoungprogrammer.com/2015/09/a-simple-artificial-intelligence.html>
  went |Mary> => |sledding>
  went-sledding-with |Mary> => |her family>
  won |Mary> => |a race>
  won-a-race-against |Mary> => |her brother>
  won-a-race-to-the |Mary> => |bottom of the hill>
  won-a |Mary> => |race>
  cheered |Mary> => |yes>
  cheered-because |Mary> => |it was her first time winning>
  cheered-because-it-was |Mary> => |her first time winning>
  
  dump
  save learning-about-Mary.sw
  her-brother |Mary> => |Jack>
  dump
  save learning-about-Mary.sw
  dump
  -- what is the minimum amount of structure we need to auto learn and recall rules???
  save history
  everything |*> #=> apply(supported-ops|_self>,|_self>)
  everything |Mary>
  dump
  save learning-about-Mary.sw
  dump
  supported-ops |Mary>
  remove-leading-category supported-ops |Mary>
  list-of-operators |*> #=> remove-leading-category supported-ops |_self>
  save learning-about-Mary.sw
  dump
  list-of-operators |Mary>
  save history

2015-10-13
  -- Mary went sledding with her family
  went |Mary> => |sledding>
  went-sledding-with |Mary> => |her family>
  dump
  -- maybe we need sequences for this to work nicely?
  -- Mary won a race against her brother to the bottom of the hill
  won |Mary> => |a race>
  won-a-race-against |Mary> => |her brother>
  won-a-race-to-the |Mary> => |bottom of the hill>
  dump
  won-a |Mary> => |race>
  dump
  -- Mary cheered because it was her first time winning
  cheered |Mary> => |yes>
  cheered-because |Mary> => |it was her first time winning>
  dump
  history
  cheered-because-it-was |Mary> => |her first time winning>
  dump
  context learning about Mary
  url |context: learning about Mary> => |url: http://blog.ayoungprogrammer.com/2015/09/a-simple-artificial-intelligence.html>
  went |Mary> => |sledding>
  went-sledding-with |Mary> => |her family>
  won |Mary> => |a race>
  won-a-race-against |Mary> => |her brother>
  won-a-race-to-the |Mary> => |bottom of the hill>
  won-a |Mary> => |race>
  cheered |Mary> => |yes>
  cheered-because |Mary> => |it was her first time winning>
  cheered-because-it-was |Mary> => |her first time winning>
  
  dump
  save learning-about-Mary.sw
  her-brother |Mary> => |Jack>
  dump
  save learning-about-Mary.sw
  dump
  -- what is the minimum amount of structure we need to auto learn and recall rules???
  save history
  everything |*> #=> apply(supported-ops|_self>,|_self>)
  everything |Mary>
  dump
  save learning-about-Mary.sw
  dump
  supported-ops |Mary>
  remove-leading-category supported-ops |Mary>
  list-of-operators |*> #=> remove-leading-category supported-ops |_self>
  save learning-about-Mary.sw
  dump
  list-of-operators |Mary>
  save history
  28
  save history

2015-10-13
  -- Mary went sledding with her family
  went |Mary> => |sledding>
  went-sledding-with |Mary> => |her family>
  dump
  -- maybe we need sequences for this to work nicely?
  -- Mary won a race against her brother to the bottom of the hill
  won |Mary> => |a race>
  won-a-race-against |Mary> => |her brother>
  won-a-race-to-the |Mary> => |bottom of the hill>
  dump
  won-a |Mary> => |race>
  dump
  -- Mary cheered because it was her first time winning
  cheered |Mary> => |yes>
  cheered-because |Mary> => |it was her first time winning>
  dump
  history
  cheered-because-it-was |Mary> => |her first time winning>
  dump
  context learning about Mary
  url |context: learning about Mary> => |url: http://blog.ayoungprogrammer.com/2015/09/a-simple-artificial-intelligence.html>
  went |Mary> => |sledding>
  went-sledding-with |Mary> => |her family>
  won |Mary> => |a race>
  won-a-race-against |Mary> => |her brother>
  won-a-race-to-the |Mary> => |bottom of the hill>
  won-a |Mary> => |race>
  cheered |Mary> => |yes>
  cheered-because |Mary> => |it was her first time winning>
  cheered-because-it-was |Mary> => |her first time winning>
  
  dump
  save learning-about-Mary.sw
  her-brother |Mary> => |Jack>
  dump
  save learning-about-Mary.sw
  dump
  -- what is the minimum amount of structure we need to auto learn and recall rules???
  save history
  everything |*> #=> apply(supported-ops|_self>,|_self>)
  everything |Mary>
  dump
  save learning-about-Mary.sw
  dump
  supported-ops |Mary>
  remove-leading-category supported-ops |Mary>
  list-of-operators |*> #=> remove-leading-category supported-ops |_self>
  save learning-about-Mary.sw
  dump
  list-of-operators |Mary>
  save history
  28
  save history
  dump
  list-of-operators |Mary>
  q

2015-10-14
  inhibition[0.5] (10|x> + 3|y> + 2|z> + 13|foo>)
  inhibition[0.5] |x>
  inhibition[0.5] 3|x>
  inhibition[0] (|x> + 3|y>)
  history
  q

2015-10-14
  inhibition[0.5] (10|x> + 3|y> + 2|z> + 13|foo>)
  q

2015-10-14
  inhibition[0.5] (10|x> + 3|y> + 2|z> + 13|foo>)
  q

2015-10-14
  inhibition[0] (10|x> + 3|y> + 2|z> + 13|foo>)
  inhibition[0.5] (10|x> + 3|y> + 2|z> + 13|foo>)
  inhibition[1] (10|x> + 3|y> + 2|z> + 13|foo>)
  inhibition[10] (10|x> + 3|y> + 2|z> + 13|foo>)
  inhibition[5] (10|x> + 3|y> + 2|z> + 13|foo>)
  inhibition[2] (10|x> + 3|y> + 2|z> + 13|foo>)
  inhibition[1] (0.8|yes> + 0.2|no>)
  q

2015-10-14
  |list> => 10|x> + 3|y> + 2|z> + 13|foo>
  inhibition[1] "" |list>
  inhibition[0.5] "" |list>
  history
  q

2015-10-14
  |list> => 10|x> + 3|y> + 2|z> + 13|foo> + 12|cat>
  inhibition[1] "" |list>
  inhibition[0.5] "" |list>
  q

2015-10-14
  |list> => 3|x> + 2|y> + 11|z> + 11|f> + 9|g>
  inhibition[0.1] "" |list>
  inhibition[1] "" |list>
  inhibition[-1] "" |list>
  save history

2015-10-18
  |list> => 3|x> + 2|y> + 11|z> + 11|f> + 9|g>
  inhibition[0.1] "" |list>
  inhibition[1] "" |list>
  inhibition[-1] "" |list>
  save history
  debug on
  inhibition[-1] "" |list>
  foo[""] |x>
  q

2015-10-18
  |list> => 6|x> + 4|y> + 11|z> + 11|f> + 18|g>
  inhibition[-0.5] "" |list>
  q

2015-10-26
  |superposition> => normalize range(|x: 1>,|x: 20>)
  dump
  tweak |*> #=> normalize ("" |_self> + 0.01 weighted-pick-elt "" |_self>)
  dump
  tweak |superposition>
  tweak^50 |superposition>
  dump
  tweak^10 |superposition>
  dump
  |s1> => tweak |superposition>
  dump
  |s2> => tweak |s1>
  dump
  |s3> => tweak |s2>
  |s4> => tweak |s3>
  dump
  dump exact
  q

2015-10-26
  load wave-fn-collapse-example.sw
  dump
  q

2015-10-26
  load wave-fn-collapse-example.sw
  dump
  q

2015-10-26
  load wave-fn-collapse-example.sw
  dump
  
  q

2015-10-26
  load wave-fn-collapse-example.sw
  dump
  
  q

2015-10-26
  load wave-fn-collapse-example.sw
  dump
  q

2015-10-26
  load wave-fn-collapse-example.sw
  dump
  q

2015-10-26
  load wave-fn-collapse-example.sw
  dump
  q

2015-10-26
  load wave-fn-collapse-example.sw
  dump
  q

2015-10-26
  load wave-fn-collapse-example.sw
  dump
  dump exact
  q

2015-10-27
  load wave-fn-collapse-example--sans-normalize.sw
  dump
  dump
  dump exact
  q

2015-10-28
  load wave-fn-collapse-example--bigger.sw
  dump
  coeff-sort "" |s1001>
  q

2015-10-28
  load wave-fn-collapse-example--bigger.sw
  dump
  coeff-sort "" |s1001>
  q

2015-10-28
  load wave-fn-collapse-example--bigger.sw
  dump
  coeff-sort "" |s1001>
  coeff-sort "" |s500>
  coeff-sort "" |s900>
  coeff-sort "" |s800>
  dump exact
  history
  save wave-fn-collapse-example--bigger--saved.sw
  q

2015-10-28
  context simple entanglement example
  dump
  entanglement-1 |particles> => |particle 1: spin up> + |particle 2: spin down>
  dump
  entanglement-2 |particles> => |particle 1: spin down> + |particle 2: spin up>
  the-list-of-possible-entanglements |particles> => |op: entanglement-1> + |op: entanglement-2>
  dump
  measure |particles> => apply(weighted-pick-elt the-list-of-possible-entanglements|_self>,|_self>)
  dump
  history
  measure |particles> #=> apply(weighted-pick-elt the-list-of-possible-entanglements|_self>,|_self>)
  dump
  measure |particles>
  .
  .
  .
  .
  .
  dump
  save simple-entanglement-example.sw
  weighted-pick-elt (10|x> + |y>)
  dump
  measure |particles>
  measure |particles>
  measure |particles>
  .
  wave-fn-collapse-measure |particles> !=> apply(weighted-pick-elt the-list-of-possible-entanglements|_self>,|_self>)
  dump
  wave-fn-collapse-measure |particles>
  dump
  q

2015-11-10
  load africa.sw
  
  do-you-know |>
  do-you-know |x>
  q

2015-11-12
  h
  q

2015-11-12
  is-alive |Schroedinger's cat> !=> normalize weighted-pick-elt (0.5|yes> + 0.5|no>)
  is-alive |Schroedinger's cat>
  .
  dump
  q

2015-11-15
  load fred-sam-friends.sw
  dump
  friends |Fred> + friends |Sam>
  q

2015-11-15
  load fred-sam-friends.sw
  dump
  friends |Fred> + friends |Sam>
  dump
  op |x> => |a>
  dump
  op |x> +=> |a>
  dump
  q

2015-11-15
  op |x> +=> |a>
  dump
  op |x> +=> |a>
  dump
  q

2015-11-15
  op |x> +=> |a>
  dump
  op |x> +=> |a>
  dump
  q

2015-11-15
  op |x> +=> |a>
  dump
  op |x> => |a>
  dump
  op |x> +=> |a>
  dump
  q

2015-11-15
  op |x> +=> |a>
  .
  q

2015-11-15
  op |x> +=> |a>
  dump
  q

2015-11-15
  op |x> +=> |a>
  dump
  q

2015-11-15
  op |x> +=> |a>
  dump
  .
  dump
  op |x> +=> |a>
  dump
  op|x> +=> 7|a> + 3|b> + |c>
  dump
  .
  dump
  q

2015-11-15
  load early-us-presidents.sw
  dump
  h
  create inverse
  dump
  
  q

2015-11-15
  load early-us-presidents.sw
  dump
  create inverse
  dump
  
  
  debug on
  
  q

2015-11-15
  load ngram-letter-pairs--sherlock-holmes--add-learn.sw
  dump
  letter-ramble |*> #=> merge-labels(|_self> + weighted-pick-elt next-2-letters extract-3-tail-chars |_self>)
  letter-ramble^1000 |The>
  history
  letter-ramble^1000 |Here >
  history
  weird-letter-ramble |*> #=> merge-labels(weighted-pick-elt next-2-letters extract-3-tail-chars |_self> + |_self>)
  weird-letter-ramble^1000 |The>
  q

2015-11-19
  load fred-sam-friends.sw
  dump
  apply(|op: friends>,|Fred>)
  apply(2.3|op: friends>,|Fred>)
  q

2015-11-19
  context simple sentence to word2sp example
  next-1 |this> => |is>
  next-2 |this> => |a>
  next-3 |this> => |sentence>
  next-2gram |this> => |is a>
  next-3gram |this> => |is a sentence>
  
  pre-1 |is> => |this>
  next-1 |is> => |a>
  next-2 |is> => |sentence>
  next-3 |is> => |about>
  next-2gram |is> => |a sentence>
  next-3gram |is> => |a sentence about>
  
  pre-2 |a> => |this>
  pre-1 |a> => |is>
  pre-2gram |a> => |this is>
  next-1 |a> => |sentence>
  next-2 |a> => |about>
  next-3 |a> => |mary>
  next-2gram |a> => |sentence about>
  next-3gram |a> => |sentence about mary>
  
  pre-3 |sentence> => |this>
  pre-2 |sentence> => |is>
  pre-3 |sentence> => |a>
  pre-3gram |sentence> => |this is a>
  pre-2gram |sentence> => |is a>
  next-1 |sentence> => |about>
  next-2 |sentence> => |mary>
  next-3 |sentence> => |and>
  next-2gram |sentence> => |about mary>
  next-3gram |sentence> => |about mary and>
  dump
  save simple-sentence-to-word2sp-example.sw
  dump exact
  word2sp-op |*> #=> apply(|op: pre-3> + |op: pre-2> + |op: pre-3gram> + |op: pre-2gram> + |op: next-1> + |op: next-2> + |op: next-3> + |op: next-2gram> + |op: next-3gram>,|_self>)
  dump
  word2sp-op |sentence>
  dump
  info off
  word2sp-op |sentence>
  dump
  word2sp-op |a>
  word2sp-op |is>
  hash[4] word2sp-op |is>
  history
  dump
  history
  save simple-sentence-to-word2sp-example.sw
  dump
  the |example sentence> => |This is a sentence about Mary and her pet dog>
  dump
  save simple-sentence-to-word2sp-example.sw
  dump
  dump
  word2sp-op |this>
  word2sp-op |is>
  word2sp-op |a>
  word2sp-op |sentence>
  hash[4] word2sp-op |sentence>
  dump
  rel-kets[next-1]
  map[word2sp-op,word2sp] rel-kets[next-1]
  dump
  table[word,coeff] 100 self-similar[word2sp] |this>
  save history

2015-11-21
  context simple sentence to word2sp example
  next-1 |this> => |is>
  next-2 |this> => |a>
  next-3 |this> => |sentence>
  next-2gram |this> => |is a>
  next-3gram |this> => |is a sentence>
  
  pre-1 |is> => |this>
  next-1 |is> => |a>
  next-2 |is> => |sentence>
  next-3 |is> => |about>
  next-2gram |is> => |a sentence>
  next-3gram |is> => |a sentence about>
  
  pre-2 |a> => |this>
  pre-1 |a> => |is>
  pre-2gram |a> => |this is>
  next-1 |a> => |sentence>
  next-2 |a> => |about>
  next-3 |a> => |mary>
  next-2gram |a> => |sentence about>
  next-3gram |a> => |sentence about mary>
  
  pre-3 |sentence> => |this>
  pre-2 |sentence> => |is>
  pre-3 |sentence> => |a>
  pre-3gram |sentence> => |this is a>
  pre-2gram |sentence> => |is a>
  next-1 |sentence> => |about>
  next-2 |sentence> => |mary>
  next-3 |sentence> => |and>
  next-2gram |sentence> => |about mary>
  next-3gram |sentence> => |about mary and>
  dump
  save simple-sentence-to-word2sp-example.sw
  dump exact
  word2sp-op |*> #=> apply(|op: pre-3> + |op: pre-2> + |op: pre-3gram> + |op: pre-2gram> + |op: next-1> + |op: next-2> + |op: next-3> + |op: next-2gram> + |op: next-3gram>,|_self>)
  dump
  word2sp-op |sentence>
  dump
  info off
  word2sp-op |sentence>
  dump
  word2sp-op |a>
  word2sp-op |is>
  hash[4] word2sp-op |is>
  history
  dump
  history
  save simple-sentence-to-word2sp-example.sw
  dump
  the |example sentence> => |This is a sentence about Mary and her pet dog>
  dump
  save simple-sentence-to-word2sp-example.sw
  dump
  dump
  word2sp-op |this>
  word2sp-op |is>
  word2sp-op |a>
  word2sp-op |sentence>
  hash[4] word2sp-op |sentence>
  dump
  rel-kets[next-1]
  map[word2sp-op,word2sp] rel-kets[next-1]
  dump
  table[word,coeff] 100 self-similar[word2sp] |this>
  save history
  dump exact
  test-word2sp-op |*> #=> apply(supported-ops |_self>,|_self>)
  test-word2sp-op |this>
  q

2015-11-22
  load testing-word2sp.sw
  word2sp-op |*> #=> apply(|op: pre-3> + |op: pre-2> + |op: pre-3gram> + |op: pre-2gram> + |op: next-1> + |op: next-2> + |op: next-3> + |op: next-2gram> + |op: next-3gram>,|_self>)
  word2sp-op |the>
  word2sp-op |*> #=> coeff-sort apply(|op: pre-3> + |op: pre-2> + |op: pre-1> + |op: pre-3gram> + |op: pre-2gram> + |op: next-1> + |op: next-2> + |op: next-3> + |op: next-2gram> + |op: next-3gram>,|_self>)
  word2sp-op |the>
   map[word2sp-op,word2sp] rel-kets[next-1] |>
  history
  word2sp |sherlock>
  save history

2015-11-22
  load testing-word2sp.sw
  word2sp-op |*> #=> apply(|op: pre-3> + |op: pre-2> + |op: pre-3gram> + |op: pre-2gram> + |op: next-1> + |op: next-2> + |op: next-3> + |op: next-2gram> + |op: next-3gram>,|_self>)
  word2sp-op |the>
  word2sp-op |*> #=> coeff-sort apply(|op: pre-3> + |op: pre-2> + |op: pre-1> + |op: pre-3gram> + |op: pre-2gram> + |op: next-1> + |op: next-2> + |op: next-3> + |op: next-2gram> + |op: next-3gram>,|_self>)
  word2sp-op |the>
   map[word2sp-op,word2sp] rel-kets[next-1] |>
  history
  word2sp |sherlock>
  save history
  table[word,coeff] select[1,200] 100 self-similar[word2sp] |sherlock>
  
  history
  T |*> #=> table[word,ceoff] select[1,200] 100 self-similar[word2sp] |_self>
  T |hungry>
  
  history
  T |*> #=> table[word,coeff] select[1,200] 100 self-similar[word2sp] |_self>
  T |hungry>
  
  history
  save history

2015-11-22
  load testing-word2sp.sw
  word2sp-op |*> #=> apply(|op: pre-3> + |op: pre-2> + |op: pre-3gram> + |op: pre-2gram> + |op: next-1> + |op: next-2> + |op: next-3> + |op: next-2gram> + |op: next-3gram>,|_self>)
  word2sp-op |the>
  word2sp-op |*> #=> coeff-sort apply(|op: pre-3> + |op: pre-2> + |op: pre-1> + |op: pre-3gram> + |op: pre-2gram> + |op: next-1> + |op: next-2> + |op: next-3> + |op: next-2gram> + |op: next-3gram>,|_self>)
  word2sp-op |the>
   map[word2sp-op,word2sp] rel-kets[next-1] |>
  history
  word2sp |sherlock>
  save history
  table[word,coeff] select[1,200] 100 self-similar[word2sp] |sherlock>
  
  history
  T |*> #=> table[word,ceoff] select[1,200] 100 self-similar[word2sp] |_self>
  T |hungry>
  
  history
  T |*> #=> table[word,coeff] select[1,200] 100 self-similar[word2sp] |_self>
  T |hungry>
  
  history
  save history
  how-many-next-1-op |*> #=> how-many next-1 |_self>
  map[how-many-next-1-op,how-many-next-1] rel-kets[next-1] |>
  table[word,coeff] select[1,200] reverse sort-by[how-many-next-1] rel-kets[next-1] |>
  history
  table[word,how-many-next-1] select[1,200] reverse sort-by[how-many-next-1] rel-kets[next-1] |>
  save history

2015-11-22
  load testing-word2sp.sw
  word2sp-op |*> #=> apply(|op: pre-3> + |op: pre-2> + |op: pre-3gram> + |op: pre-2gram> + |op: next-1> + |op: next-2> + |op: next-3> + |op: next-2gram> + |op: next-3gram>,|_self>)
  word2sp-op |the>
  word2sp-op |*> #=> coeff-sort apply(|op: pre-3> + |op: pre-2> + |op: pre-1> + |op: pre-3gram> + |op: pre-2gram> + |op: next-1> + |op: next-2> + |op: next-3> + |op: next-2gram> + |op: next-3gram>,|_self>)
  word2sp-op |the>
   map[word2sp-op,word2sp] rel-kets[next-1] |>
  history
  word2sp |sherlock>
  save history
  table[word,coeff] select[1,200] 100 self-similar[word2sp] |sherlock>
  
  history
  T |*> #=> table[word,ceoff] select[1,200] 100 self-similar[word2sp] |_self>
  T |hungry>
  
  history
  T |*> #=> table[word,coeff] select[1,200] 100 self-similar[word2sp] |_self>
  T |hungry>
  
  history
  save history
  how-many-next-1-op |*> #=> how-many next-1 |_self>
  map[how-many-next-1-op,how-many-next-1] rel-kets[next-1] |>
  table[word,coeff] select[1,200] reverse sort-by[how-many-next-1] rel-kets[next-1] |>
  history
  table[word,how-many-next-1] select[1,200] reverse sort-by[how-many-next-1] rel-kets[next-1] |>
  save history
  table[word,coeff] select[1,200] coeff-sort next-1 |the>
  
  history
  save sherlock-word2sp-trial--saved.sw
  q

2015-11-22
  load 30k-wikipedia-links.sw
  load 30k--wikipedia-links.sw
  find-inverse[links-to]
  T |*> #=> table[page,coeff] select[1,200] 100 self-similar[inverse-links-to] |_self>
  T |WP: Geoffrey_Hinton>
  
  history
  T |WP: Adelaide>
  history
  T |WP: Los_Angeles>
  
  history
  save history

2015-11-23
  load testing-word2sp.sw
  grams-op |*> #=> apply(|op: pre-3gram> + |op: next-3gram>,|_self>)
  grams-op |this>
  history
  grams-op |*> #=> coeff-sort apply(|op: pre-3gram> + |op: next-3gram>,|_self>)
  grams-op |this>
  history
  map[grams-op,grams] rel-kets[next-1] |>
  T |*> #=> table[word,coeff] select[1,200] 100 self-similar[grams] |_self>
  T |this>
  
  T |sherlock>
  
  T |sat>
  
  T |remarked>
  q

2015-11-23
  load testing-word2sp.sw
  T |*> #=> table[word,coeff] select[1,200] 100 self-similar[pre-next-3gram] |_self>
  T |hungry>
  T |sat>
  T |sherlock>
  q

2015-11-23
  load ngram-letter-pairs--sherlock-holmes--add-learn.sw
  letter-ramble |*> #=> merge-labels(|_self> + weighted-pick-elt next-2-letters extract-3-tail-chars |_self>)
  letter-ramble^200 |The>
  history
  old-letter-ramble |*> #=> merge-labels(|_self> + pick-elt next-2-letters extract-3-tail-chars |_self>)
  old-letter-ramble^200 |The>
  history
  q

2015-11-25
  load 30k-wikipedia-links.sw
  load 30k--wikipedia-links.sw
  find-inverse[links-to]
  T |*> #=> table[page,coeff] select[1,200] 100 self-similar[inverse-links-to] |_self>
  T |WP: Geoffrey_Hinton>
  
  history
  T |WP: Adelaide>
  history
  T |WP: Los_Angeles>
  
  history
  save history
  T |WP: Ronald_Reagan>
  history
  T |WP: Hunger_(motivational_stata)>
  T |WP: Hunger_(motivational_state)>
  
  T |WP: Central_processing_unit>
  T |Linux>
  T |WP: Linux>
  
  T |WP: BitTorrent>
  T |WP: artificial_intelligence>
  T |WP: France>
  
  history
  T |WP: San_Francisco>
  
  history
  how-many inverse-links-to |WP: San_Francisco>
  q

2015-11-25
  load fred-sam-friends.sw
  dump
  find-unique[friends]
  dump
  q

2015-11-26
  select[1,5] split |a b>
  table[ket,bah] |x>
  round[2] |x: 1.23456789>
  q

2015-11-26
  ngrams[1,2,3] |x>
  q

2015-11-26
   ngrams[1,2,3] |x>
  q

2015-11-26
  ngrams[1,2,3] |x>
  ngrams[1] |a b c d e f>
  ngrams[2] |a b c d e f>
  ngrams[3] |a b c d e f>
  ngrams[1,3] |a b c d e f>
  ngrams[1,2,3] |a b c d e f>
  q

2015-11-26
  letter-ngrams[1] |abcdef>
  letter-ngrams[1,2,3] |abcdef>
  q

2015-11-26
  letter-ngrams[1,2,3] |abcdef>
  letter-ngrams[1] (|xy> + |uv>)
  q

2015-11-26
  letter-ngram[1,x] |xyu>
  letter-ngrams[1,x] |uvxy>
  q

2015-11-26
  list-of |words> => |frog> + |hat> + |horse>
  word2ngram-op |*> #=> letter-ngrams[1,2,3] |_self>
  map[word2ngram-op,word2ngram] list-of |words>
  dump
  q

2015-11-26
  load common-English-words.sw
  word2ngram-op |*> #=> letter-ngrams[1,2,3] |_self>
  map[word2ngram-op,word2ngram] list-of |common English words>
  history
  map[word2ngram-op,word2ngram] |elefant>
  table[word,coeff] select[1,100] 100 self-similar[word2ngram] |elefant>
  -- so not a perfect spell check algo
  -- 1) it is too slow (above table took 2 min)
  -- 2) it ignores ordering of fragments. elefant is similar to mantelet, because of "ele" and "ant"
  save history

2015-11-26
  load common-English-words.sw
  word2ngram-op |*> #=> letter-ngrams[1,2,3] |_self>
  map[word2ngram-op,word2ngram] list-of |common English words>
  history
  map[word2ngram-op,word2ngram] |elefant>
  table[word,coeff] select[1,100] 100 self-similar[word2ngram] |elefant>
  -- so not a perfect spell check algo
  -- 1) it is too slow (above table took 2 min)
  -- 2) it ignores ordering of fragments. elefant is similar to mantelet, because of "ele" and "ant"
  save history
  
  q

2015-12-03
  load frog.sw
  dump
  dump exact
  q

2015-12-03
  load methanol.sw
  dump
  table[piece,atom-type,bonds-to] molecular-pieces |molecule: methanol>
  history
  atom-type molecular-pieces |molecule: methanol>
  q

2015-12-03
  load methanol.sw
  dump
  hash-data[4] molecular-pieces |molecule: methanol>
  q

2015-12-03
  load bots.sw
  dump
  everything-op |*> #=> apply(supported-ops |_self>,|_self>)
  map[everything-op,everything-about] starts-with |bot: >
  dump
  everything-about starts-with |bot: >
  coeff-sort everything-about starts-with |bot: >
  table[bot,coeff] 100 self-similar[everything-about] |bot: Madison>
  table[bot,coeff] 100 self-similar[everything-about] |bot: Emma>
  table[bot,coeff] 100 self-similar[everything-about] |bot: Bella>
  common[everything-about] starts-with |bot: >
  common[everything-about] (|bot: Madison> + |bot: Emma>)
  history
  q

2015-12-04
  load fibonacci.sw
  dump
  map[fib] range(|2>,|10>)
  dump
  history
  save fibonacci-saved.sw
  q

2015-12-04
  load fibonacci.sw
  dump
  map[fib] range(|2>,|30>)
  dump
  save fibonacci-saved.sw
  q

2015-12-04
  load methanol.sw
  dump
  table[pieces,atom-type,bonds-to] molecular-pieces |molecule: methanol>
  history
  atom-type molecular-pieces |molecule: methanol>
  dump
  relevant-kets[*]
  supported-ops relevant-kets[*]
  debug on
  supported-ops relevant-kets[*]
  q

2015-12-04
  strange-int |6>
  strange-int |8>
  strange-int |10>
  strange-int |number: 10>
  SoPF-op |*> #=> strange-int |_self>
  map[SoPF-op,SoPF] range(|2>,|100>)
  dump
  history
  q

2015-12-04
  table[number] select[1,50] range(|number: 2>,|number: 50000>)
  q

2015-12-04
  table[number] select[1,50] range(|number: 2>,|number: 50000>)
  history
  table[number] select[1,10] range(|2>,|50000>)
  q

2015-12-04
  strange-int |*> #=> strange-int |_self>
  strange-int-list |*> #=> strange-int-list |_self>
  length-of-strange-int-list |*> #=> how-many strange-int-list |_self>
  length-of-strange-int-list |number: 1000>
  table[number,strange-int,strange-int-list,length-of-strange-int-list] reverse sorty-by[length-of-strange-int-list] range(|number: 2>,|number: 30>)
  history
  table[number,strange-int,strange-int-list,length-of-strange-int-list] reverse sort-by[length-of-strange-int-list] range(|number: 2>,|number: 30>)
  history
  table[number,strange-int,strange-int-list,length-of-strange-int-list] select[1,50] reverse sort-by[length-of-strange-int-list] range(|number: 2>,|number: 50000>)
  history
  table[number,strange-int,strange-int-list,length-of-strange-int-list] select[1,100] reverse sort-by[length-of-strange-int-list] range(|number: 2>,|number: 100000>)
  
  history
  
  save history

2015-12-05
  SoPF-op |*> #=> strange-int merge-labels(|number: > + |_self>)
  map[SoPF-op,SoPF] range(|2>,|100>)
  dump
  history
  extract-value |number: 37>
  SoPF-op |*> #=> extract-value strange-int merge-labels(|number: > + |_self>)
  map[SoPF-op,SoPF] range(|2>,|100>)
  dump
  save sum-of-prime-factors.sw
  history
  map[SoPF-op,SoPF] range(|2>,|1000>)
  history
  save sum-of-prime-factors.sw
  factor |number: 28>
  history
  strange-int |*> #=> strange-int |_self>
  table[number,strange-int] range(|2>,|20>)
  history
  table[number,strange-int] range(|number: 2>,|number: 20>)
  history
  strange-int-list |number: 1000>
  strange-int-list |*> #=> strange-int-list |_self>
  table[number,strange-int,strange-int-list] range(|number: 2>,|number: 30>)
  history
  
  how-long-is-strange-int-list |*> #=> how-many strange-int-list |_self>
  table[number,strange-int,strange-int-list,how-long-is-strange-int-list] range(|number: 2>,|number: 30>)
  history
  table[number,strange-int,strange-int-list,how-long-is-strange-int-list] reverse sort-by[how-long-is-strange-int-list] range(|number: 2>,|number: 30>)
  history
  table[number,strange-int,strange-int-list,how-long-is-strange-int-list] select[1,50] reverse sort-by[how-long-is-strange-int-list] range(|number: 2>,|number: 50000>)
  save history

2015-12-06
  rescale[5] (3|x> + |y>)
  debug on
  rescale[5] (3|x> + |y>)
  q

2015-12-06
  context procrasti example
  the-utility-function-for |procrasti of kuro5hin> => 25|maximize bitcoin> + 13|make kr5ddit a success> + 10|get laid> + 6.3|have a coffee> + 2|the heat wave goes away> + |...>
  the-derivation-of-the-username-for |procrasti of kuro5hin> => |someone that procrastinates a lot>
  the-website-created-by |procrasti of kuro5hin> => |url: https://kr5ddit.com>
  where-lives |procrasti of kuro5hin> => |I think Perth>
  dump
  the-normalized-utility-function-for |procrasti of kuro5hin> => normalize[100] the-utility-function-for |_self>
  dump
  history
  table[procrasti,*] |procrasti of kuro5hin>
  display |procrasti of kuro5hin>
  save history

2015-12-06
  context procrasti example
  the-utility-function-for |procrasti of kuro5hin> => 25|maximize bitcoin> + 13|make kr5ddit a success> + 10|get laid> + 6.3|have a coffee> + 2|the heat wave goes away> + |...>
  the-derivation-of-the-username-for |procrasti of kuro5hin> => |someone that procrastinates a lot>
  the-website-created-by |procrasti of kuro5hin> => |url: https://kr5ddit.com>
  where-lives |procrasti of kuro5hin> => |I think Perth>
  dump
  the-normalized-utility-function-for |procrasti of kuro5hin> => normalize[100] the-utility-function-for |_self>
  dump
  history
  table[procrasti,*] |procrasti of kuro5hin>
  display |procrasti of kuro5hin>
  save history
  dump
  q

2015-12-08
  a |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: chair> + |number: 5573>
  dump
  is-number |*> => |no>
  is-number |number: *> => |yes>
  dump
  is-number a |list>
  history
  the |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: table> + |number: 5573>
  dump
  number-filter |*> #=> 0|_self>
  number-filter |number: *> #=> |_self>
  dump
  number-filter the |list>
  furniture-filter |*> #=> 0|_self>
  furniture-filter |furniture: *> #=> |_self>
  animal-filter |*> #=> 0|_self>
  animal-filter |animal: *> #=> |_self>
  dump
  animal-filter the |list>
  furniture-filter the |list>
  save history

2015-12-08
  a |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: chair> + |number: 5573>
  dump
  is-number |*> => |no>
  is-number |number: *> => |yes>
  dump
  is-number a |list>
  history
  the |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: table> + |number: 5573>
  dump
  number-filter |*> #=> 0|_self>
  number-filter |number: *> #=> |_self>
  dump
  number-filter the |list>
  furniture-filter |*> #=> 0|_self>
  furniture-filter |furniture: *> #=> |_self>
  animal-filter |*> #=> 0|_self>
  animal-filter |animal: *> #=> |_self>
  dump
  animal-filter the |list>
  furniture-filter the |list>
  save history
  dump
  test-number-filter |*> #=> drop 0|_self>
  dump
  test-number-filter |number: *> #=> |_self>
  test-number-filter the |list>
  dump
  save history

2015-12-09
  a |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: chair> + |number: 5573>
  dump
  is-number |*> => |no>
  is-number |number: *> => |yes>
  dump
  is-number a |list>
  history
  the |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: table> + |number: 5573>
  dump
  number-filter |*> #=> 0|_self>
  number-filter |number: *> #=> |_self>
  dump
  number-filter the |list>
  furniture-filter |*> #=> 0|_self>
  furniture-filter |furniture: *> #=> |_self>
  animal-filter |*> #=> 0|_self>
  animal-filter |animal: *> #=> |_self>
  dump
  animal-filter the |list>
  furniture-filter the |list>
  save history
  dump
  test-number-filter |*> #=> drop 0|_self>
  dump
  test-number-filter |number: *> #=> |_self>
  test-number-filter the |list>
  dump
  save history
  test-number-filter |*> #=> |>
  dump
  test-number-filter the |list>
  test-animal-filter |*> => |>
  dump
  context KR
  above |red block> => |blue block>
  above |green block> => |red block>
  dump
  above |green block> => |blue block>
  dump
  mother-of |John> => |Liz>
  is-sitting-on mother-of |John> => |chair>
  is-sitting-on |Liz>
  dump
  has-gender |mystery person> => |male>
  has-DOB |mystery person> => |date: 4/8/1961>
  has-race |mystery person> => |African American>
  has-hair-color |mystery person> => |black>
  has-address |mystery person> => |White House>
  dump
  guess-who-is |mystery person> => |Barack Obama>
  save history

2015-12-09
  a |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: chair> + |number: 5573>
  dump
  is-number |*> => |no>
  is-number |number: *> => |yes>
  dump
  is-number a |list>
  history
  the |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: table> + |number: 5573>
  dump
  number-filter |*> #=> 0|_self>
  number-filter |number: *> #=> |_self>
  dump
  number-filter the |list>
  furniture-filter |*> #=> 0|_self>
  furniture-filter |furniture: *> #=> |_self>
  animal-filter |*> #=> 0|_self>
  animal-filter |animal: *> #=> |_self>
  dump
  animal-filter the |list>
  furniture-filter the |list>
  save history
  dump
  test-number-filter |*> #=> drop 0|_self>
  dump
  test-number-filter |number: *> #=> |_self>
  test-number-filter the |list>
  dump
  save history
  test-number-filter |*> #=> |>
  dump
  test-number-filter the |list>
  test-animal-filter |*> => |>
  dump
  context KR
  above |red block> => |blue block>
  above |green block> => |red block>
  dump
  above |green block> => |blue block>
  dump
  mother-of |John> => |Liz>
  is-sitting-on mother-of |John> => |chair>
  is-sitting-on |Liz>
  dump
  has-gender |mystery person> => |male>
  has-DOB |mystery person> => |date: 4/8/1961>
  has-race |mystery person> => |African American>
  has-hair-color |mystery person> => |black>
  has-address |mystery person> => |White House>
  dump
  guess-who-is |mystery person> => |Barack Obama>
  save history
  dump
  q

2015-12-09
  is-a |Socrates> => |human>
  is-a |human> => |mortal>
  dump
  exp-max[is-a] |Socrates>
  exp[is-a,2] |Socrates>
  exp[is-a,1] |Socrates>
  save history

2015-12-10
  URI |*> #=> merge-labels(|URI: http://example.com/example-ontology#> + |_self>)
  URI |Fred>
  URI (|Fred> + |Sam> + |Jack>)
  dump
  URI |op: *> #=> merge-labels(|URI: http://example.com/example-operator-ontology#> + |_self>)
  URI |op: friends>
  URI |Fred>
  dump
  URI |op: *> #=> merge-labels(|URI: http://example.com/example-operator-ontology#> + extract-value |_self>)
  URI |op: friends>
  history
  save history

2015-12-10
  URI |*> #=> merge-labels(|URI: http://example.com/example-ontology#> + |_self>)
  URI |Fred>
  URI (|Fred> + |Sam> + |Jack>)
  dump
  URI |op: *> #=> merge-labels(|URI: http://example.com/example-operator-ontology#> + |_self>)
  URI |op: friends>
  URI |Fred>
  dump
  URI |op: *> #=> merge-labels(|URI: http://example.com/example-operator-ontology#> + extract-value |_self>)
  URI |op: friends>
  history
  save history
  same-as |Fred> => |Fred Smith of Sydney>
  dump
  is-mother |Mary> => |yes>
  dump
  is-a-mother |Mary> => |yes>
  is-a-parent |*> #=> if(is-a-mother |_self>,|yes>,|no>)
  is-a-parent |Mary>
  is-a-parent |Fred>
  history
  load fred-sam-friends.sw
  context
  URI |*> #=> merge-labels(|URI: http://example.com/example-ontology#> + |_self>)
  URI |op: *> #=> merge-labels(|URI: http://example.com/example-operator-ontology#> + extract-value |_self>)
  dump
  URI friends |Fred>
  dump
  URI supported-ops |Fred>
  save history

2015-12-11
  URI |*> #=> merge-labels(|URI: http://example.com/example-ontology#> + |_self>)
  URI |Fred>
  URI (|Fred> + |Sam> + |Jack>)
  dump
  URI |op: *> #=> merge-labels(|URI: http://example.com/example-operator-ontology#> + |_self>)
  URI |op: friends>
  URI |Fred>
  dump
  URI |op: *> #=> merge-labels(|URI: http://example.com/example-operator-ontology#> + extract-value |_self>)
  URI |op: friends>
  history
  save history
  same-as |Fred> => |Fred Smith of Sydney>
  dump
  is-mother |Mary> => |yes>
  dump
  is-a-mother |Mary> => |yes>
  is-a-parent |*> #=> if(is-a-mother |_self>,|yes>,|no>)
  is-a-parent |Mary>
  is-a-parent |Fred>
  history
  load fred-sam-friends.sw
  context
  URI |*> #=> merge-labels(|URI: http://example.com/example-ontology#> + |_self>)
  URI |op: *> #=> merge-labels(|URI: http://example.com/example-operator-ontology#> + extract-value |_self>)
  dump
  URI friends |Fred>
  dump
  URI supported-ops |Fred>
  save history
  rel-kets[*]
  supported-ops rel-kets[*]
  debug on
  supported-ops rel-kets[*]
  q

2015-12-12
  is-a |Socrates> => |human>
  is-a |human> => |mortal>
  dump
  exp-max[is-a] |Socrates>
  exp[is-a,2] |Socrates>
  exp[is-a,1] |Socrates>
  save history
  table[number,coeff] select[1,100] coeff-sort strange-int-prime range(|number: 2>,|number: 3>)
  debug on
  table[number,coeff] select[1,100] coeff-sort strange-int-prime range(|number: 2>,|number: 3>)
  history
  cell-value |grid: 1 22> => |5>
  |cell> => |grid: 1 22>
  dump
  cell-value "" |cell> => arithmetic(cell-value |_self>,|+>,|1>)
  dump
  cell-value "" |cell> => arithmetic(cell-value |_self>,|+>,|1>)
  dump
  save history

2015-12-12
  load bigger-binary-tree.sw
  q

2015-12-12
  load bigger-binary-tree.sw
  dump
  left-op |*> #=> merge-labels(|0> + |_self>)
  right-op |*> #=> merge-labels(|1> + |_self>)
  dump
  left-op |100>
  right-op |100>
  dump
  child |*> #=> left |_self> + right |_self>
  child |x>
  child^2 |x>
  child^3 |x>
  child^4 |x>
  history
  child^3 |x>
  dump
  map[left-op,left] child^3 |x>
  history
  map[right-op,right] child^3 |x>
  child^4 |x>
  history
  save history

2015-12-13
  load bigger-binary-tree.sw
  dump
  left-op |*> #=> merge-labels(|0> + |_self>)
  right-op |*> #=> merge-labels(|1> + |_self>)
  dump
  left-op |100>
  right-op |100>
  dump
  child |*> #=> left |_self> + right |_self>
  child |x>
  child^2 |x>
  child^3 |x>
  child^4 |x>
  history
  child^3 |x>
  dump
  map[left-op,left] child^3 |x>
  history
  map[right-op,right] child^3 |x>
  child^4 |x>
  history
  save history
  child^2 |x>
  label weighted-pick-elt child^2 |x> => |some label>
  dump
  history
  child^2 |x>
  history
  context
  context bigger binary tree
  left-op |*> #=> merge-labels(|_self> + |0>)
  right-op |*> #=> merge-labels(|_self> + |1>)
  left |x> => |0>
  right |x> => |1>
  history
  child |*> #=> left |_self> + right |_self>
  child |x>
  child^2 |x>
  map[left-op,left] child |x>
  map[right-op,right] child |x>
  dump
  left |0> => |00>
  right |1> => |11>
  dump
  history
  map[left-op,left] child^2 |x>
  history
  map[right-op,right] child^2 |x>
  dump
  history
  map[left-op,left] child^3 |x>
  map[right-op,right] child^3 |x>
  
  map[left-op,left] child^4 |x>
  map[right-op,right] child^4 |x>
  
  map[left-op,left] child^5 |x>
  map[right-op,right] child^5 |x>
  
  map[left-op,left] child^6 |x>
  map[right-op,right] child^6 |x>dump
  dump
  save bigger-binary-tree.sw
  q

2015-12-13
  load improved-geonames-au.sw
  dump |id: 995l324>
  dump |id: 9957324>
  find-inverse[name]
  inverse-name |Adelaide>
  table[Adelaide,*] inverse-name |Adelaide>
  table[Perth,*] inverse-name |Perth>
  table[StPeters,*] inverse-name |St Peters>
  table[Sydney,*] inverse-name |Sydney>
  table[city,*] select[1,200] reverse sort-by[population] starts-with |id: >
  
  history
  table[place,name,population,latitude,longitude,tz] select[1,200] reverse sort-by[population] starts-with |id: >
  
  history
  rank-table[place,name,population,latitude,longitude,tz] select[1,200] reverse sort-by[population] starts-with |id: >
  history
  table[Clare,*] inverse-name |Clare>
  history
  
  load improved-geonames-cities-15000.sw
  rank-table[place,name,population,latitude,longitude,tz] select[1,20] reverse sort-by[population] starts-with |id: >
  history
  rank-table[place,name,population,latitude,longitude,tz] select[1,30] reverse sort-by[population] starts-with |id: >
  history
  
  population |id: 1796236>
  to-comma-number population |id: 1796236>
  population-comma |*> #=> to-comma-number population |_self>
   rank-table[place,name,population-comma,latitude,longitude,tz] select[1,30] reverse sort-by[population] starts-with |id: >
  history
  
  icontext
  population-comma |*> #=> to-comma-number population |_self>
  rank-table[place,name,population-comma,latitude,longitude,tz] select[1,200] reverse sort-by[population] starts-with |id: >
  history
  save history

2015-12-14
  14^2 |x>
  h
  ident |*> #=> |_self>
  ident |x>
  history
  q

2015-12-14
  has-skin |animal> => |yes>
  has-skin |animal: *> => |yes>
  kind-of |animal> => |animal: fish>
  kind-of |animal> => |animal: birds>
  kind-of |animal> => |animal: mammals>
  has-skin |animal: mammals>
  dump
  eats |animal> => |yes>
  eats |animal: *> => |yes>
  dump
  history
  kind-of |animal> => |animal: fish> + |animal: birds> + |animal: mammals>
  dump
  has-gills |animal: fish> => |yes>
  has-scales |animal: fish> => |yes>
  dump
  has-feathers |animal: birds> => |yes>
  has-beak |animal: birds> => |yes>
  dump
  has-fur |animal: mammals> => |yes>
  dump
  save animals.sw
  history
  q

2015-12-14
  q

2015-12-14
  is-a |Socrates> => |human>
  is-a |human> => |mortal>
  dump
  exp-max[is-a] |Socrates>
  exp[is-a,2] |Socrates>
  exp[is-a,1] |Socrates>
  save history
  table[number,coeff] select[1,100] coeff-sort strange-int-prime range(|number: 2>,|number: 3>)
  debug on
  table[number,coeff] select[1,100] coeff-sort strange-int-prime range(|number: 2>,|number: 3>)
  history
  cell-value |grid: 1 22> => |5>
  |cell> => |grid: 1 22>
  dump
  cell-value "" |cell> => arithmetic(cell-value |_self>,|+>,|1>)
  dump
  cell-value "" |cell> => arithmetic(cell-value |_self>,|+>,|1>)
  dump
  save history
  history
  table[number,coeff] select[1,100] coeff-sort strange-int-prime range(|number: 1000000>,|number: 1500000>)
  history
  
  history
  strange-int-prime-op |*> #=> strange-int-prime |_self>
  map[strange-int-prime-op,strange-int-prime] range(|number: 2>,|number: 1000>)
  dump
  find-inverse[strange-int-prime]
  dump
  inverse-strange-int-prime |number: 5>
  history
  is-prime-op |*> #=> is-prime |_self>
  is-prime |number: 5>
  is-prime |number: 6>
  map[is-prime-op,is-prime] range(|number: 2>,|number: 1000>)
  dump
  find-inverse[is-prime]
  inverse-is-prime |yes>
  history
  inverse-strange-int-prime-list |*> #=> select[1,20] inverse-strange-int-prime |_self>
  table[prime,inverse-strange-int-prime-list] select[1,20] inverse-is-prime |yes>
  history
  inverse-strange-int-prime-list |*> #=> select[1,30] inverse-strange-int-prime |_self>
  table[prime,inverse-strange-int-prime-list] select[1,50] inverse-is-prime |yes>
  .
  history
  inverse-strange-int-prime-list |*> #=> select[1,25] inverse-strange-int-prime |_self>
  table[prime,inverse-strange-int-prime-list] select[1,75] inverse-is-prime |yes>
  history
  inverse-strange-int-prime-list |*> #=> select[1,20] inverse-strange-int-prime |_self>
  table[prime,inverse-strange-int-prime-list] select[1,75] inverse-is-prime |yes>
  
  history
  inverse-strange-int-prime-list |*> #=> select[1,25] inverse-strange-int-prime |_self>
  table[prime,inverse-strange-int-prime-list] select[1,75] inverse-is-prime |yes>
  history
  history 1000
  
  q

2015-12-14
  child |*> #=> left |_self> + right |_self>
  left-op |*> #=> merge-labels(|0> + |_self>)
  right-op |*> #=> merge-labels(|1> + |_self>)
  left |x> => |0>
  right |x> => |1>
  left |0> => |00>
  right |0> => |01>
  left |1> => |10>
  right |1> => |11>dump
  dump
  child |x>
  child^2 |x>
    map[left-op,left] child^2 |x>
    map[right-op,right] child^2 |x>
  
    map[left-op,left] child^3 |x>
    map[right-op,right] child^3 |x>
  
    map[left-op,left] child^4 |x>
    map[right-op,right] child^4 |x>
  
    map[left-op,left] child^5 |x>
    map[right-op,right] child^5 |x>
  
    map[left-op,left] child^6 |x>
    map[right-op,right] child^6 |x>dump
  
  dump
  context
  context bigger binary tree
  child |*> #=> left |_self> + right |_self>
  left-op |*> #=> merge-labels(|0> + |_self>)
  right-op |*> #=> merge-labels(|1> + |_self>)
  left |x> => |0>
  right |x> => |1>
  left |0> => |00>
  right |0> => |01>
  left |1> => |10>
  right |1> => |11>
  
    map[left-op,left] child^2 |x>
    map[right-op,right] child^2 |x>
  
    map[left-op,left] child^3 |x>
    map[right-op,right] child^3 |x>
  
    map[left-op,left] child^4 |x>
    map[right-op,right] child^4 |x>
  
    map[left-op,left] child^5 |x>
    map[right-op,right] child^5 |x>
  
    map[left-op,left] child^6 |x>
    map[right-op,right] child^6 |x>
  
  dump
  history
  q

2015-12-14
  child |*> #=> left |_self> + right |_self>
  left-op |*> #=> merge-labels(|_self> + |0>)
  right-op |*> #=> merge-labels(||_self> + |1>)
  left |x> => |0>
  right |x> => |1>
  left |0> => |00>
  right |0> => |01>
  left |1> => |10>
  right |1> => |11>
  
      map[left-op,left] child^2 |x>
      map[right-op,right] child^2 |x>
  
      map[left-op,left] child^3 |x>
      map[right-op,right] child^3 |x>
  
      map[left-op,left] child^4 |x>
      map[right-op,right] child^4 |x>
  
      map[left-op,left] child^5 |x>
      map[right-op,right] child^5 |x>
  
      map[left-op,left] child^6 |x>
      map[right-op,right] child^6 |x>
  
  
  dump
  q

2015-12-14
  child |*> #=> left |_self> + right |_self>
  left-op |*> #=> merge-labels(|_self> + |0>)
  right-op |*> #=> merge-labels(|_self> + |1>)
  left |x> => |0>
  right |x> => |1>
  left |0> => |00>
  right |0> => |01>
  left |1> => |10>
  right |1> => |11>
  
      map[left-op,left] child^2 |x>
      map[right-op,right] child^2 |x>
  
      map[left-op,left] child^3 |x>
      map[right-op,right] child^3 |x>
  
      map[left-op,left] child^4 |x>
      map[right-op,right] child^4 |x>
  
      map[left-op,left] child^5 |x>
      map[right-op,right] child^5 |x>
  
      map[left-op,left] child^6 |x>
      map[right-op,right] child^6 |x>
  
  
  dump
  
  q

2015-12-14
  the |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: table> + |number: 5573>
  number-filter |*> #=> |>
  number-filter |number: *> #=> |_self>
  furniture-filter |*> #=> |>
  furniture-filter |furniture: *> #=> |_self>
  animal-filter |*> #=> |>
  animal-filter |animal: *> #=> |_self>
  animal-number-filter |*> #=> |>
  animal-number-filter |animal: *> #=> |_self>
  animal-number-filter |number: *> #=> |_self>
  dump
  number-filter |*> #=> |>
  furniture-filter |*> #=> |>
  animal-filter |*> #=> |>
  animal-number-filter |*> #=> |>
  
  number-filter |number: *> #=> |_self>
  animal-number-filter |number: *> #=> |_self>
  
  furniture-filter |furniture: *> #=> |_self>
  
  animal-filter |animal: *> #=> |_self>
  animal-number-filter |animal: *> #=> |_self>
  dump
  number-filter the |list>
  furniture-filter the |list
  furniture-filter the |list>
  animal-filter the |list>
  animal-number-filter the |list>
  dump
  save animal-number-furniture-filter.sw
  context URI's
  load fred-sam-friends.sw
  dump
  dump exact
    URI |*> #=> merge-labels(|URI: http://example.com/example-ontology#> + |_self>)
    URI |op: *> #=> merge-labels(|URI: http://example.com/example-operator-ontology#> + extract-value |_self>)
  
  URI supported-ops |Fred>
  URI friends |Fred>
  history
  URI |op: friends>
  URI |Fred>
  URI friends |Fred>
  context semantic network
  is-a |canary> => |bird>
  color |canary> => |yellow>
  size |canary> => |small>
  is-a |penguin> => |bird>
  movement |penguin> => |swim>
  dump
  is-a |bird> => |vertebrate>
  has-part |bird> => |wings>
  reproduction |bird> => |egg-laying>
  dump
  context semantic network example
  has |Mammal> => |Vertebra>
  is-an |Mammal> => |Animal>
  is-a |Cat> => |Mammal>
  has |Cat> => |Fur>
  is-a |Bear> => |Mammal>
  has |Bear> => |Fur>
  is-a |Whale> => |Mammal>
  lives-in |Whale> => |Water>
  is-an |Fish> => |Animal>
  lives-in |Fish> => |Water>
  dump
  save semantic-network-example.sw
  q

2015-12-14
  op |node 1> => 0.9 |node 2>
  op |node 2> => |node 3>
  op |node 2> => 0.9 |node 3>
  op |node 3> => 0.9 |node 4> + 0.9 |node 11>
  op |node 11> => 0.9 |node 12>
  op |node 12> => 0.9 |node 13>
  op |node 13> => 0.9 |node 14>
  op |node 14> => 0.9 |node 15>
  op |node 14> => 0.9 |node 15>
  op |node 15> => 0.9 |node 16>
  dump
  op |node 4> => 0.9 |node 5>
  op |node 5> => 0.9 |node 6>
  op |node 6> => 0.9 |node 7>
  op |node 7> => 0.9 |node 8>
  op |node 8> => 0.9 |node 9>
  op |node 9> => 0.9 |node 10>
  dump
  decay-factor |*> #=> 0.85 |_self>
  dump
  decay-factor op |node 1>
  decay-factor op decay-factor op decay-factor op |node 1>
  decay-factor op decay-factor op decay-factor op decay-factor op |node 1>
  decay-factor op |node 1>
  decay-factor op decay-factor op |node 1>
  decay-factor op decay-factor op decay-factor op |node 1>
  decay-factor op decay-factor op decay-factor op decay-factor op |node 1>
  dump
  
  history
  decay-factor op 100 |node 1>
  decay-factor op decay-factor op 100 |node 1>
  decay-factor op decay-factor op decay-factor op 100 |node 1>
  decay-factor op decay-factor op decay-factor op decay-factor op 100 |node 1>
  sa: decay-factor op 100 |node 1>
  inside process_brackets: decay-factor op 100 |node 1>
  INFO: ket: node 1
  INFO: ket: node 2
  els final result: 0.85|node 2>
  76.5|node 2>
  
    Time taken: 2 milliseconds
  
  sa: decay-factor op decay-factor op 100 |node 1>
  inside process_brackets: decay-factor op decay-factor op 100 |node 1>
  INFO: ket: node 1
  INFO: ket: node 2
  els final result: 0.85|node 2>
  INFO: ket: node 2
  INFO: ket: node 3
  els final result: 0.85|node 3>
  58.523|node 3>
  
    Time taken: 5 milliseconds
  
  sa: decay-factor op decay-factor op decay-factor op 100 |node 1>
  inside process_brackets: decay-factor op decay-factor op decay-factor op 100 |node 1>
  INFO: ket: node 1
  INFO: ket: node 2
  els final result: 0.85|node 2>
  INFO: ket: node 2
  INFO: ket: node 3
  els final result: 0.85|node 3>
  INFO: ket: node 3
  INFO: ket: node 4
  els final result: 0.85|node 4>
  INFO: ket: node 11
  els final result: 0.85|node 11>
  44.77|node 4> + 44.77|node 11>
  
    Time taken: 7 milliseconds
  
  sa: decay-factor op decay-factor op decay-factor op decay-factor op 100 |node 1>
  inside process_brackets: decay-factor op decay-factor op decay-factor op decay-factor op 100 |node 1>
  INFO: ket: node 1
  INFO: ket: node 2
  els final result: 0.85|node 2>
  INFO: ket: node 2
  INFO: ket: node 3
  els final result: 0.85|node 3>
  INFO: ket: node 3
  INFO: ket: node 4
  els final result: 0.85|node 4>
  INFO: ket: node 11
  els final result: 0.85|node 11>
  INFO: ket: node 4
  INFO: ket: node 11
  INFO: ket: node 5
  els final result: 0.85|node 5>
  INFO: ket: node 12
  els final result: 0.85|node 12>
  34.249|node 5> + 34.249|node 12>
  
  dump
  decay-factor-op |*> #=> 0.85 op |_self>
  exp[decay-factor-op,4] 100 |node 1>
  decay-factor-op |*> #=> decay-factor op |_self>
  exp[decay-factor-op,4] 100 |node 1>
  history
  exp[decay-factor-op,4] 100 |node 1>
  exp-max[decay-factor-op] 100 |node 1>
  history
  history 1000
  q

2015-12-14
  table[number,coeff] select[1,100] coeff-sort strange-int-prime range(|number: 2>,|number: 500000>)
  history
  
  table[number,coeff] select[1,100] coeff-sort strange-int-prime range(|number: 500000>,|number: 1000000>)
  
  history
  history
  q

2015-12-15
  op |node 1> => 0.9|node 2>
  op |node 2> => 0.9|node 3>
  op |node 3> => 0.9|node 4> + 0.9|node 11>
  op |node 11> => 0.9|node 12>
  op |node 12> => 0.9|node 13>
  op |node 13> => 0.9|node 14>
  op |node 14> => 0.9|node 15>
  op |node 15> => 0.9|node 16>
  op |node 4> => 0.9|node 5>
  op |node 5> => 0.9|node 6>
  op |node 6> => 0.9|node 7>
  op |node 7> => 0.9|node 8>
  op |node 8> => 0.9|node 9>
  op |node 9> => 0.9|node 10>
  decay-factor |*> #=> 0.85 |_self>
  dump
  drop-decay-factor-op |*> #=> drop-below[20] decay-factor op |_self>
  decay-factor-op |*> #=> decay-factor op |_self>
  dump
  exp-max[decay-factor-op] 100 |node 1>
  table[node,coeff] exp-max[drop-factor-op] 100 |node 1>
  table[node,coeff] exp-max[decay-factor-op] 100 |node 1>
  table[node,coeff] exp-max[drop-decay-factor-op] 100 |node 1>
  dump
  history
  drop-decay-factor-op 100 |node 1>
  debug on
  drop-decay-factor-op 100 |node 1>
  drop-below[20] decay-factor op 100 |node 1>
  history
  drop-decay-factor-op (100 |node 1>)
  drop-decay-factor-op 100 |node 1>
  history
  -- drop-decay-factor-op is not working as expected. need to work out why.
  save history

2015-12-15
  op |node 1> => 0.9|node 2>
  op |node 2> => 0.9|node 3>
  op |node 3> => 0.9|node 4> + 0.9|node 11>
  op |node 11> => 0.9|node 12>
  op |node 12> => 0.9|node 13>
  op |node 13> => 0.9|node 14>
  op |node 14> => 0.9|node 15>
  op |node 15> => 0.9|node 16>
  op |node 4> => 0.9|node 5>
  op |node 5> => 0.9|node 6>
  op |node 6> => 0.9|node 7>
  op |node 7> => 0.9|node 8>
  op |node 8> => 0.9|node 9>
  op |node 9> => 0.9|node 10>
  decay-factor |*> #=> 0.85 |_self>
  dump
  drop-decay-factor-op |*> #=> drop-below[20] decay-factor op |_self>
  decay-factor-op |*> #=> decay-factor op |_self>
  dump
  exp-max[decay-factor-op] 100 |node 1>
  table[node,coeff] exp-max[drop-factor-op] 100 |node 1>
  table[node,coeff] exp-max[decay-factor-op] 100 |node 1>
  table[node,coeff] exp-max[drop-decay-factor-op] 100 |node 1>
  dump
  history
  drop-decay-factor-op 100 |node 1>
  debug on
  drop-decay-factor-op 100 |node 1>
  drop-below[20] decay-factor op 100 |node 1>
  history
  drop-decay-factor-op (100 |node 1>)
  drop-decay-factor-op 100 |node 1>
  history
  -- drop-decay-factor-op is not working as expected. need to work out why.
  save history
  drop-below[20] decay-factor op 100 |node 1>
  drop-decay-factor-op |*> #=> drop-below[20] decay-factor op |_self>
  drop-decay-factor-op 100 |node 1>
  history 1000
  tweak-drop-decay-factor-op |*> #=> drop-below[0.2] decay-factor op |_self>
  tweak-drop-decay-factor-op 100 |node 1>
  history
  table[node,coeff] exp-max[tweak-drop-decay-factor-op] 100 |node 1>
  history
  table[node,coeff] drop-below[20] exp-max[decay-factor-op] 100 |node 1>
  history
  table[node,coeff] exp-max[decay-factor-op] 100 |node 1>
  history
  table[node,coeff] drop-below[20] exp-max[decay-factor-op] 100 |node 1>
  save history

2015-12-15
  log 10|x>
  log 2.71218 |x>
  q

2015-12-15
  log 2.71218 |x>
  log[2] 8|x>
  log[10] 1000|x>
  log 0|x>
  log -3|x>
  q

2015-12-15
  log -3|x>
  q

2015-12-15
  softmax 10|x>
  softmax (10|x> + 5|y> + 30|z> + |u> + 0.5|v>)
  softmax (20|x> + 25|y>)
  q

2015-12-15
  op |node 1> => 0.9|node 2>
  op |node 2> => 0.9|node 3>
  op |node 3> => 0.9|node 4> + 0.9|node 11>
  op |node 11> => 0.9|node 12>
  op |node 12> => 0.9|node 13>
  op |node 13> => 0.9|node 14>
  op |node 14> => 0.9|node 15>
  op |node 15> => 0.9|node 16>
  op |node 4> => 0.9|node 5>
  op |node 5> => 0.9|node 6>
  op |node 6> => 0.9|node 7>
  op |node 7> => 0.9|node 8>
  op |node 8> => 0.9|node 9>
  op |node 9> => 0.9|node 10>
  decay-factor |*> #=> 0.85 |_self>
  dump
  drop-decay-factor-op |*> #=> drop-below[20] decay-factor op |_self>
  decay-factor-op |*> #=> decay-factor op |_self>
  dump
  exp-max[decay-factor-op] 100 |node 1>
  table[node,coeff] exp-max[drop-factor-op] 100 |node 1>
  table[node,coeff] exp-max[decay-factor-op] 100 |node 1>
  table[node,coeff] exp-max[drop-decay-factor-op] 100 |node 1>
  dump
  history
  drop-decay-factor-op 100 |node 1>
  debug on
  drop-decay-factor-op 100 |node 1>
  drop-below[20] decay-factor op 100 |node 1>
  history
  drop-decay-factor-op (100 |node 1>)
  drop-decay-factor-op 100 |node 1>
  history
  -- drop-decay-factor-op is not working as expected. need to work out why.
  save history
  drop-below[20] decay-factor op 100 |node 1>
  drop-decay-factor-op |*> #=> drop-below[20] decay-factor op |_self>
  drop-decay-factor-op 100 |node 1>
  history 1000
  tweak-drop-decay-factor-op |*> #=> drop-below[0.2] decay-factor op |_self>
  tweak-drop-decay-factor-op 100 |node 1>
  history
  table[node,coeff] exp-max[tweak-drop-decay-factor-op] 100 |node 1>
  history
  table[node,coeff] drop-below[20] exp-max[decay-factor-op] 100 |node 1>
  history
  table[node,coeff] exp-max[decay-factor-op] 100 |node 1>
  history
  table[node,coeff] drop-below[20] exp-max[decay-factor-op] 100 |node 1>
  save history
  dump
  context spreading activation
  op |node 1> => 0.9|node 2>
  
  op |node 2> => 0.9|node 3>
  
  op |node 3> => 0.9|node 4> + 0.9|node 11>
  
  op |node 11> => 0.9|node 12>
  
  op |node 12> => 0.9|node 13>
  
  op |node 13> => 0.9|node 14>
  
  op |node 14> => 0.9|node 15>
  
  op |node 15> => 0.9|node 16>
  
  op |node 4> => 0.9|node 5>
  
  op |node 5> => 0.9|node 6>
  
  op |node 6> => 0.9|node 7>
  
  op |node 7> => 0.9|node 8>
  
  op |node 8> => 0.9|node 9>
  
  op |node 9> => 0.9|node 10>
  
  decay-factor |*> #=> 0.85 |_self>
  decay-factor-op |*> #=> decay-factor op |_self>
  dump
  save spreading-activation.sw
  dump
  table[node,coeff] exp-max[decay-factor-op] 100 |node 1>
  dump
  history
  table[node,coeff] exp-max[decay-factor-op] 100 |node 1>
  table[node,coeff] drop-below[20] exp-max[decay-factor-op] 100 |node 1>
  history
  table[node,coeff] drop-below[20] exp-max[decay-factor-op] 100 |node 1>
  table[node,coeff] threshold-filter[20] exp-max[decay-factor-op] 100 |node 1>
  history
  table[node,coeff] threshold-filter[20] exp-max[decay-factor-op] 100 |node 1>
  q

2015-12-17
  delete[k,0] |kitten>
  delete[s,0] |kitten>
  delete[i,1] |kitten>
  debug on
  delete[k,0] |kitten>
  delete[s,0] |kitten>
  delete[i,1] |kitten>
  delete[k,20] |kitten>
  q

2015-12-17
  insert[g,6] |sittin>
  insert[f,0] |sittin>
  insert[g,6] insert[i,4] delete[3,4] insert[s,0] delete[k,0] |kitten>
  insert[g,6] insert[i,4] delete[e,4] insert[s,0] delete[k,0] |kitten>
  q

2015-12-17
  substitute[s,k,0] |kitten>
  substitute[k,s,0] |kitten>
  substitute[s,k,1] |kitten>
  q

2015-12-17
  debug on
  substitute[s,k,0] |kitten>
  q

2015-12-17
  substitute[s,k,0] |kitten>
  q

2015-12-17
  substitute[s,k,0] |kitten>
  insert[g,6] substitute[i,e,4] substitute[s,k,0] |kitten>
  insert[g,6] insert[i,4] delete[e,4] insert[s,0] delete[k,0] |kitten>
  delete[k,0] 15.3|kitten>
  q

2015-12-17
  delete[k,0] 15.3|kitten>
  q

2015-12-17
  log |x>
  log 2.71218 |x>
  log 2.71828 |x>
  log[2] 128|x>
  log[10] (5|a> + 10|b> + 100|c> + 375|d> + 123456|e>)
  softmax 0|x>
  load common-English-words.sw
  word2ngram-op |*> #=> letter-ngrams[1,2,3] |_self>
  map[word2ngram-op,word2ngram] list-of |common English words>
  map[word2ngram-op,word2ngram] |elefant>
  table[word,coeff] select[1,30] 100 self-similar[word2ngram] |elefant>
  history
  
  q

2015-12-18
  n-1 |*> #=> arithmetic(|_self>,|->,|1>)
  n-1 |3>
  fact |*> #=> arithmetic(|_self>,|*>,fact n-1 |_self>)
  fact |3>
  dump
  fact |0> => |1>
  fact |3>
  fact |4>
  fact |5>
  history
  dump
  fact |30>
  fact |50>
  fact |1000>
  fact |1000>
  fact |500>
  fact |100>
  q

2015-12-19
  the |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: table> + |number: 5573>
  number-filter |*> #=> |>
  furniture-filter |*> #=> |>
  animal-filter |*> #=> |>
  animal-number-filter |*> #=> |>
  
  number-filter |number: *> #=> |_self>
  animal-number-filter |number: *> #=> |_self>
  
  furniture-filter |furniture: *> #=> |_self>
  
  animal-filter |animal: *> #=> |_self>
  animal-number-filter |animal: *> #=> |_self>
  
  dump
  how-many-numbers-in |*> #=> how-many number-filter |_self>
  how-many-numbers-in the |list>
  number-filter the |list>
  how-many |>
  
  -- nope. It won't work correctly until we have learn sp rules.
  -- eg: how-many-numbers-in (*) #=> how-many number-filter |_self>
  q

2015-12-19
  F |C: 42>
  context branching
  do-some-thing-with |branch a> #=> shout |Hello World!>
  do-some-thing-with |branch b> #=> shout |Goodbye World!>
  choose |branch> #=> do-some-thing-with if(foo|x>,|branch a>,|branch b>)
  foo |x> => |True>
  choose |branch>
  foo |x> => |False>
  choose |branch>
  history
  F |C: 44>
  F |C: 42>
  history
  save history

2015-12-20
  n-1 |*> #=> arithmetic(|_self>,|->,|1>)
  fact |*> #=> arithmetic(|_self>,|*>,n-1 |_self>)
  fact |3>
  fact range(|0>,|20>)
  dump
  fact |*> #=> arithmetic(|_self>,|*>,fact n-1 |_self>)
  fact range(|0>,|10>)
  dump
  fact |3>
  dump
  fact |0> => |1>
  fact |3>
  fact |4>
  fact range(|0>,|10>)
  history
  save history

2015-12-20
  n-1 |*> #=> arithmetic(|_self>,|->,|1>)
  fact |*> #=> arithmetic(|_self>,|*>,n-1 |_self>)
  fact |3>
  fact range(|0>,|20>)
  dump
  fact |*> #=> arithmetic(|_self>,|*>,fact n-1 |_self>)
  fact range(|0>,|10>)
  dump
  fact |3>
  dump
  fact |0> => |1>
  fact |3>
  fact |4>
  fact range(|0>,|10>)
  history
  save history
  context visualizing edit distance
  op1 |kitten> => substitute[s,k,0] |_self>
  op2 substitute[s,k,0] |kitten> => substitute[i,e,4] |_self>
  op3 substitute[i,e,4] substitute[s,k,0] |kitten> => insert[g,6] |_self>
  
  dump
  op4 |kitten> => delete[k,0] |_self>
  op5 op4 |kitten> => insert[s,0] |_self>
  op6 op5 op4 |kitten> => delete[e,4] |_self>
  op7 op6 op5 op4 |kitten> => insert[i,4] |_self>
  op8 op7 op6 op5 op4 |kitten> => insert[g,6] |_self>
  
  dump
  history
  dump
  save visualizing-edit-distance.sw
  q

2015-12-20
  load build-visualize-edit-distance-file.sw
  dump
  q

2015-12-20
  number-filter |*> #=> |>
  furniture-filter |*> #=> |>
  animal-filter |*> #=> |>
  animal-number-filter |*> #=> |>
  
  number-filter |number: *> #=> |_self>
  animal-number-filter |number: *> #=> |_self>
  
  furniture-filter |furniture: *> #=> |_self>
  
  animal-filter |animal: *> #=> |_self>
  animal-number-filter |animal: *> #=> |_self>
  dump
  how-many-numbers-in |*> #=> how-many number-filter |_self>
  the |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: table> + |number: 5573>
  how-many-numbers-in the |list>
  history
  how-many-numbers-in the |list>
  the |list>
  history 1000
  q

2015-12-20
  load early-us-presidents.sw
  dump
  everything-op |*> #=> apply(supported-ops |_self>,|_self>)
  map[everything-op,everything] rel-kets[*] |>
  dump
  everything |early US Presidents: _list>
  how-many everything |early US Presidents: _list>
  how-many everything^2 |early US Presidents: _list>
  how-many everything^3 |early US Presidents: _list>
  history
  how-many-everything |*> #=> how-many everything |_self>
  how-many-everything-2 |*> #=> how-many everything^2 |_self>
  how-many-everything-3 |*> #=> how-many everything^3 |_self>
  table[ket,how-many-everything,how-many-everything-2,how-many-everything-3] rel-kets[*] |>
  F |C: 40>
  F |C: 43>
  F |C: 21>
  history
  save history

2015-12-20
  load bots.sw
  dump
    everything-op |*> #=> apply(supported-ops |_self>,|_self>)
    map[everything-op,everything] rel-kets[*] |>
  
    how-many-everything |*> #=> how-many everything |_self>
    how-many-everything-2 |*> #=> how-many everything^2 |_self>
    how-many-everything-3 |*> #=> how-many everything^3 |_self>
  
  
  dump
  table[ket,how-many-everything,how-many-everything-2,how-many-everything-3] rel-kets[*] |>
  display |bot: Madison>
  
  history
    table[ket,how-many-everything,how-many-everything-2,how-many-everything-3] rel-kets[*] |>
  context
  context understand
  q

2015-12-20
  load fred-sam-friends.sw
  load understand.sw
  q

2015-12-20
  load fred-sam-friends.sw
  load understand.sw
  q

2015-12-20
  
  load fred-sam-friends.sw
  dump
  load understand.sw
  history
  context
  load animals.sw
  load understand.sw
  reset
  load breakfast-menu.sw
  load understand.sw
  dump
  history
  reset
  load breakfast-menu.sw
  load understand.sw
  history
  q

2015-12-20
  load fred-sam-friends.sw
  load how-well-do-you-know.sw
  how-well-do-you-know |*> #=> how-many-everything |_self>
  how-well-do-you-know |Fred>
  how-well-do-you-know |null>
  history
  q

2015-12-20
  load george.sw
  load how-well-do-you-know.sw
  q

2015-12-21
  load early-us-presidents.sw
  dump
  everything-op |*> #=> apply(supported-ops |_self>,|_self>)
  map[everything-op,everything] rel-kets[*] |>
  dump
  everything |early US Presidents: _list>
  how-many everything |early US Presidents: _list>
  how-many everything^2 |early US Presidents: _list>
  how-many everything^3 |early US Presidents: _list>
  history
  how-many-everything |*> #=> how-many everything |_self>
  how-many-everything-2 |*> #=> how-many everything^2 |_self>
  how-many-everything-3 |*> #=> how-many everything^3 |_self>
  table[ket,how-many-everything,how-many-everything-2,how-many-everything-3] rel-kets[*] |>
  F |C: 40>
  F |C: 43>
  F |C: 21>
  history
  save history
  
  table[ket,how-many-everything,how-many-everything-2,how-many-everything-3] rel-kets[*] |>
  history
  context
  context test add learn
  op |x> => 3.2|fish>
  dump
  op |x> #=> -3|fish>
  dump
  op |x> => 3.2|fish>
  op |x> +=> -3|fish>
  dump
  op |x> +=> - op |_self>
  dump
  q

2015-12-23
  F |C: 42>
  context branching
  do-some-thing-with |branch a> #=> shout |Hello World!>
  do-some-thing-with |branch b> #=> shout |Goodbye World!>
  choose |branch> #=> do-some-thing-with if(foo|x>,|branch a>,|branch b>)
  foo |x> => |True>
  choose |branch>
  foo |x> => |False>
  choose |branch>
  history
  F |C: 44>
  F |C: 42>
  history
  save history
  q

2015-12-23
  context category theory is bko?
  f |a> => |b>
  g |b> => |c>
  h |c> => |d>
  dump
  h g f |a>
  id |*> #=> |_self>
  id |b>
  id |c>
  H |*> #=> g f |_self>
  H |a>
  dump
  save category-theory.sw
  context sum of prime factors
  SoPF-op |*> #=> strange-int |_self>
  map[SoPF-op,SoPF] range(|number: 2>,|number: 1000>)
  dump
  history
  context
  icontext
  q

2015-12-23
  word-ngram[1,2,3] |text: the fish lives here>
  word-ngrams[1,2,3] |text: the fish lives here>
  load next-breakfast-menu.sw
  dump
  word-ngrams[1,2,3] |text: the fish lives here>
  prepend-word |*> #=> merge-labels(|word: > + |_self>
  prepend-word word-ngrams[1,2,3] |text: the fish lives here>
  history
  prepend-word |fish>
  prepend-word |*> #=> merge-labels(|word: > + |_self>)
  prepend-word |fish>
  6
  prepend-word word-ngrams[1,2,3] |text: the fish lives here>
  everything-op |*> #=> apply(supported-ops |_self>,|_self>)
  map[everything-op,everything] rel-kets[*] |>
  history
  everything prepend-word word-ngrams[1,2,3] |text: two eggs band or sausage toast>
  history
  prepend-word word-ngrams[1,2,3] |text: two eggs band or sausage toast>
  everything |word: two>
  q

2016-01-08
  load fre
  load fred-sam-friends.sw
  load how-well-do-you-know.sw
  load early-us-presidents.sw
  load how-well-do-you-know.sw
  q

2016-01-10
  context if example
  if-pattern |node: 1> => |X>
  if-pattern |node: 2> => |Y>
  if-pattern |node: 3> => |X> + |Y>
  dump
  if-pattern |input> => |X>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |Y>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |X> + |Y>
  table[ket,coeff] similar[if-pattern] |input>
  dump
  then |node: 1> => |X OR Y>
  then |node: 2> => |X OR Y>
  then |node: 3> => |X AND Y>
  history
  table[ket,coeff] then similar[if-pattern] |input>
  dump
  table[ket,coeff] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[90] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  if-pattern |input> => |X>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  save history

2016-01-10
  context if example
  if-pattern |node: 1> => |X>
  if-pattern |node: 2> => |Y>
  if-pattern |node: 3> => |X> + |Y>
  dump
  if-pattern |input> => |X>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |Y>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |X> + |Y>
  table[ket,coeff] similar[if-pattern] |input>
  dump
  then |node: 1> => |X OR Y>
  then |node: 2> => |X OR Y>
  then |node: 3> => |X AND Y>
  history
  table[ket,coeff] then similar[if-pattern] |input>
  dump
  table[ket,coeff] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[90] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  if-pattern |input> => |X>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  save history
  context ket arithmetic
  5.2 |x> + 3.4|x>
  11 13 |x>
  7^3 |x>
  save history

2016-01-10
  context if example
  if-pattern |node: 1> => |X>
  if-pattern |node: 2> => |Y>
  if-pattern |node: 3> => |X> + |Y>
  dump
  if-pattern |input> => |X>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |Y>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |X> + |Y>
  table[ket,coeff] similar[if-pattern] |input>
  dump
  then |node: 1> => |X OR Y>
  then |node: 2> => |X OR Y>
  then |node: 3> => |X AND Y>
  history
  table[ket,coeff] then similar[if-pattern] |input>
  dump
  table[ket,coeff] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[90] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  if-pattern |input> => |X>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  save history
  context ket arithmetic
  5.2 |x> + 3.4|x>
  11 13 |x>
  7^3 |x>
  save history
  2 (5.2 |x> + 3.4|x>)
  save history

2016-01-11
  context if example
  if-pattern |node: 1> => |X>
  if-pattern |node: 2> => |Y>
  if-pattern |node: 3> => |X> + |Y>
  dump
  if-pattern |input> => |X>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |Y>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |X> + |Y>
  table[ket,coeff] similar[if-pattern] |input>
  dump
  then |node: 1> => |X OR Y>
  then |node: 2> => |X OR Y>
  then |node: 3> => |X AND Y>
  history
  table[ket,coeff] then similar[if-pattern] |input>
  dump
  table[ket,coeff] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[90] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  if-pattern |input> => |X>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  save history
  context ket arithmetic
  5.2 |x> + 3.4|x>
  11 13 |x>
  7^3 |x>
  save history
  2 (5.2 |x> + 3.4|x>)
  save history
  F |*> #=> F |_self>
  table[C,F] range(|0>,|100>,|0.5>)
  history
  F |*> #=> F merge-labels(|C: > + |_self>)
  table[C,F] range(|0>,|100>,|0.5>)
  
  the |list> => range(|1>,|15>)
  the |list>
  mult-2 |*> #=> times[2] |_self>
  mult-2 the |list>
  add-3 |*> #=> arithmetic(|_self>,|+>,|3>)
  add-3 the |list>
  mult-2 add-3 the |list>
  history
  save history

2016-01-11
  context if example
  if-pattern |node: 1> => |X>
  if-pattern |node: 2> => |Y>
  if-pattern |node: 3> => |X> + |Y>
  dump
  if-pattern |input> => |X>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |Y>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |X> + |Y>
  table[ket,coeff] similar[if-pattern] |input>
  dump
  then |node: 1> => |X OR Y>
  then |node: 2> => |X OR Y>
  then |node: 3> => |X AND Y>
  history
  table[ket,coeff] then similar[if-pattern] |input>
  dump
  table[ket,coeff] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[90] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  if-pattern |input> => |X>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  save history
  context ket arithmetic
  5.2 |x> + 3.4|x>
  11 13 |x>
  7^3 |x>
  save history
  2 (5.2 |x> + 3.4|x>)
  save history
  F |*> #=> F |_self>
  table[C,F] range(|0>,|100>,|0.5>)
  history
  F |*> #=> F merge-labels(|C: > + |_self>)
  table[C,F] range(|0>,|100>,|0.5>)
  
  the |list> => range(|1>,|15>)
  the |list>
  mult-2 |*> #=> times[2] |_self>
  mult-2 the |list>
  add-3 |*> #=> arithmetic(|_self>,|+>,|3>)
  add-3 the |list>
  mult-2 add-3 the |list>
  history
  save history
  mult-2^3 add-3 the |list>
  history
  save history

2016-01-12
  context if example
  if-pattern |node: 1> => |X>
  if-pattern |node: 2> => |Y>
  if-pattern |node: 3> => |X> + |Y>
  dump
  if-pattern |input> => |X>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |Y>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |X> + |Y>
  table[ket,coeff] similar[if-pattern] |input>
  dump
  then |node: 1> => |X OR Y>
  then |node: 2> => |X OR Y>
  then |node: 3> => |X AND Y>
  history
  table[ket,coeff] then similar[if-pattern] |input>
  dump
  table[ket,coeff] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[90] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  if-pattern |input> => |X>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  save history
  context ket arithmetic
  5.2 |x> + 3.4|x>
  11 13 |x>
  7^3 |x>
  save history
  2 (5.2 |x> + 3.4|x>)
  save history
  F |*> #=> F |_self>
  table[C,F] range(|0>,|100>,|0.5>)
  history
  F |*> #=> F merge-labels(|C: > + |_self>)
  table[C,F] range(|0>,|100>,|0.5>)
  
  the |list> => range(|1>,|15>)
  the |list>
  mult-2 |*> #=> times[2] |_self>
  mult-2 the |list>
  add-3 |*> #=> arithmetic(|_self>,|+>,|3>)
  add-3 the |list>
  mult-2 add-3 the |list>
  history
  save history
  mult-2^3 add-3 the |list>
  history
  save history
  very |*> #=> 0.9 |_self>
  a-little |*> #=> 0.2 |_self>
  a-little |hungry>
  very |hungry>
  save history

2016-01-13
  context if example
  if-pattern |node: 1> => |X>
  if-pattern |node: 2> => |Y>
  if-pattern |node: 3> => |X> + |Y>
  dump
  if-pattern |input> => |X>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |Y>
  table[ket,coeff] similar[if-pattern] |input>
  if-pattern |input> => |X> + |Y>
  table[ket,coeff] similar[if-pattern] |input>
  dump
  then |node: 1> => |X OR Y>
  then |node: 2> => |X OR Y>
  then |node: 3> => |X AND Y>
  history
  table[ket,coeff] then similar[if-pattern] |input>
  dump
  table[ket,coeff] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[90] similar[if-pattern] |input>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  if-pattern |input> => |X>
  table[ket,coeff] then drop-below[0.9] similar[if-pattern] |input>
  save history
  context ket arithmetic
  5.2 |x> + 3.4|x>
  11 13 |x>
  7^3 |x>
  save history
  2 (5.2 |x> + 3.4|x>)
  save history
  F |*> #=> F |_self>
  table[C,F] range(|0>,|100>,|0.5>)
  history
  F |*> #=> F merge-labels(|C: > + |_self>)
  table[C,F] range(|0>,|100>,|0.5>)
  
  the |list> => range(|1>,|15>)
  the |list>
  mult-2 |*> #=> times[2] |_self>
  mult-2 the |list>
  add-3 |*> #=> arithmetic(|_self>,|+>,|3>)
  add-3 the |list>
  mult-2 add-3 the |list>
  history
  save history
  mult-2^3 add-3 the |list>
  history
  save history
  very |*> #=> 0.9 |_self>
  a-little |*> #=> 0.2 |_self>
  a-little |hungry>
  very |hungry>
  save history
  history
  q

2016-01-14
  times-by[2] |number: 2.5>
  divide-by[3] |number: 1>
  round[3] divide-by[3] |number: 1>
  q

2016-01-14
  add[3] |number: 5>
  plus[3] |number: 5>
  debug on
  plus[3] |number: 5>
  q

2016-01-14
  plus[3] |number: 5.2>
  minus[2.5] |number: 5>
  q

2016-01-14
  add[3.2] |number: 5>
  take[7] |number: 10>
  take[7] |10>
  pop-float |10>
  plus[3] 2|number: 7>
  round[3] 2|number: 7.1234567>
  q

2016-01-14
  round[3] 2|number: 7.1234567890>
  q

2016-01-14
  plus[3] 2|number: 7>
  times-by[3] 5|number: 7.2>
  q

2016-01-14
  divide-by[7] 5.2|number: 28>
  minus[13] 44.44|number: 27>
  take[2] 3.21|number: 9>
  q

2016-01-14
  op |x> => |y>
  dump
  q

2016-01-14
  context new fib
  fib |0> => |1>
  fib |1> => |1>
  fib |*> #=> arithmetic(fib minus[1] |_self>,|+>,fib minus[2] |_self>)
  fib |5>
  dump
  fib |10>
  dump
  save new-fib.sw
  q

2016-01-14
  fib |number: 0> => |number: 1>
  fib |number: 1> => |number: 1>
  fib |number: *> #=> arithmetic(fib minus[1] |_self>,|+>,fib minus[2] |_self>)
  fib |number: 10>
  dump
  square 3|x>
  sqrt 25|x>
  sqrt 2|x>
  push-float sqrt 2|x>
  history
  q

2016-01-17
  fact |0> => |1>
  fact |*> #=> arithmetic(|_self>,|*>,fact minus[1] |_self>)
  fact range(|0>,|20>)
  fact |3>
  times-by[0.9] |number: 40000>
  divide-by[9] times-by[5] |10>
  times-by[5/9] |number: 7>
  context category theory
  context
  f |a> => |b>
  g |b> => |c>
  h |c> => |d>
  id |*> #=> |_self>
  id-a |a> => |a>
  id-b |b> => |b>
  id-c |c> => |c>
  dump
  g f |a>
  h g f |a>
  f id-a |a>
  id-b f |a>
  f |a>
  q

2016-01-17
  load breakfast-menu.sw
  load how-well-do-you-know.sw
  dump
  q

2016-01-17
  load fred-sam-friends.sw
  load how-well-do-you-know.sw
  dump
  "" |table>
  dump
  q

2016-01-18
  load fred-sam-friends.sw
  load how-well-do-you-know.sw
  dump
  the |table>
  info off
  the |table>
  load names.sw
  rel-kets[names]
  how-many names rel-kets[names]
  how-many-names |*> #=> how-many names |_self>
  table[ket,how-many-names] rel-kets[names]
  insert[s,0] delete[k,0] |kitten>
  delete[k,0] insert[s,0] |kitten>
  f |a> => |x1>
  g |x1> => |b>
  g f |a>
  g |a> => |x2>
  f |x2> => |b>
  f g |a>
  g f |a>
  context
  q

2016-01-18
  load common-English-words.sw
  word2ngram-op |*> #=> letter-ngrams[1,2,3] |_self>
  map[word2ngram-op,word2ngram] list-of |common English words>
  letter-ngrams[1,2,3] |elefant>
  table[word,coeff] select[1,30] 100 similar-input[word2ngram] letter-ngrams[1,2,3] |elefant>
  q

2016-01-18
  3.0 |x>
  3.0 7.0 |x>
  debug on
  3.0 7.0 |x>
  q

2016-01-18
  3.0 7.0 |x>
  3 7 |x>
  3 7.0 |x>
  3.0 7 |x>
  3.1 7 |x>
  3.1 7.2 |x>
  3.1 7.0 |x>
  q

2016-01-18
  3.0 7.0 |x>
  9/5 10 |x>
  q

2016-01-18
  9/5 10 |x>
  3.0 7.0 |x>
  q

2016-01-18
  9/5 10 |x>
  q

2016-01-18
  9/5 10 |x>
  q

2016-01-18
  debug on
  9/5 10 |x>
  q

2016-01-18
  9/5 10 |x>
  times-by[9/5] |number: 10>
  q

2016-01-18
  9/5 10 |x>
  3/7.2 10 |x>
  q

2016-01-18
  9/5 10 |x>
  9.2 10 |x>
  9 10 |x>
  9/5 |x>
  q

2016-01-18
  9/5 |x>
  10 |x>
  7 10 |x>
  9/5 10 |x>
  times-by[9/5] |number: 10>
  3.0 7.0 9/5 10 |x>
  3.0 10 |x>
  3.1 10 |x>
  q

2016-01-18
  load fred-sam-friends.sw
  dump
  how-many supported-ops |Fred>
  debug on
  how-many exp-max[friends] |Fred>
  op |x> => |y>
  how-many exp-max[op] |x>
  exp-max[op] |x>
  exp-max[friends] |Fred>
  exp-max[supported-ops] |Fred>
  history
  how-many drop exp-max[friends] |Fred>
  load fibonacci.sw
  dump
  exp-max[n-1] |*>
  exp-max[fib] |*>
  dump
  icontext
  ket-sort friends |Fred>
  how-many |*> #=> |foo>
  how-many |fish>
  C |F: -270>
  history
  q

2016-01-18
  9/5 10 |x>
  3.0 10 |x>
  3.1/5 |x>
  3.0 7.0 5.1 10 |X>
  times-by[9/5] |number: 10>
  times-by[3.1415926535] |number: 1>
  divide-by[5/9] |number: 10>
  times-by[9/5] divide-by[9/5] |number: 7>
  round[5] times-by[9/5] divide-by[9/5] |number: 7>
  3.1/5 |x>
  C |F: 212>
  3.2|x> + 5.3|x> + 7|x>
  5 11 17
  5 11 17 |x>
  debug off
  5 11 17 |x>
  13^9 |x>
  5.2^2
  5.2^2 |x>
  5.2^2 (3|x> + 7.1|x> + 9.8|x>)
  2 3 7^7 (5|x> + 9.2|x>)
  3.2|x> + 5.3|x> -7|x>
  3.2|x> + 5.3|x> - 7|x>
  3.2|x> + 5.3|x> + -7 |x>
  9/5 10 |x>
  fact |0> => |1>
  fact |*> #=> arithmetic( |_self>, |*>, fact minus[1] |_self>)
  dump
  fact |4>
  to-USD |currency: GBP: *> #=> extract-value |_self>
  to-USD |currency: GBP: 30>
  to-USD |currency: GBP: *> #=> times-by[1.62] extract-value |_self>
  to-USD |currency: GBP: 30>
  to-USD |currency: GBP: *> #=> merge-labels(|currency: USD: > + times-by[1.62] extract-value |_self>)
  to-USD |currency: GBP: 30>
  history
  context GBP USD exchange rate
  to-USD |currency: USD: *> #=> |_self>
  to-GBP |currency: GBP: *> #=> |_self>
  to-USD |currency: GBP: *> #=> merge-labels(|currency: USD: > + times-by[1.43] extract-value |_self>)
  
  to-GBP |currency: USD: *> #=> merge-labels(|currency: GBP: > + divide-by[1.43] extract-value |_self>)
  
  
  dump
  to-USD |currency: GBP: 1>
  to-USD |currency: GBP: 2>
  to-GBP to-USD |currency: GBP: 2>
  dump
  save gbp-usd-exchange-rate.sw
  q

2016-01-18
  context temperature conversion
  to-Kelvin |temperature: Kelvin: *> #=> |_self>
  to-Celsius |temperature: Kelvin: *> #=> |temperature: Celsius: > _ minus[273.15] extract-value |_self>
  to-Fahrenheit |temperature: Kelvin: *> #=> |temperature: Fahrenheit: > _ minus[459.67] times-by[9/5] extract-value |_self>
  
  to-Kelvin |temperature: Celsius: *> #=> |temperature: Kelvin: > _ plus[273.15] extract-value |_self>
  to-Celsius |temperature: Celsius: *> #=> |_self>
  to-Fahrenheit |temperature: Celsius: *> #=> |temperature: Fahrenheit: > _ plus[32] times-by[9/5] extract-value |_self>
  
  to-Kelvin |temperature: Fahrenheit: *> #=> |temperature: Kelvin: > _ times-by[5/9] plus[459.67] extract-value |_self>
  to-Celsius |temperature: Fahrenheit: *> #=> |temperature: Celsius: > _ times-by[5/9 minus[32] extract-value |_self>
  to-Fahrenheit |temperature: Fahrenheit: *> #=> |_self>
  dump
  to-Celsius |temperature: Fahrenheit: 32>
  to-Kelvin |temperature: Kelvin: *> #=> |_self>
  to-Celsius |temperature: Kelvin: *> #=> merge-labels(|temperature: Celsius: > + minus[273.15] extract-value |_self>)
  to-Fahrenheit |temperature: Kelvin: *> #=> merge-labels(|temperature: Fahrenheit: > + minus[459.67] times-by[9/5] extract-value |_self>)
  
  to-Kelvin |temperature: Celsius: *> #=> merge-labels(|temperature: Kelvin: > + plus[273.15] extract-value |_self>)
  to-Celsius |temperature: Celsius: *> #=> |_self>
  to-Fahrenheit |temperature: Celsius: *> #=> merge-labels(|temperature: Fahrenheit: > + plus[32] times-by[9/5] extract-value |_self>)
  
  to-Kelvin |temperature: Fahrenheit: *> #=> merge-labels(|temperature: Kelvin: > + times-by[5/9] plus[459.67] extract-value |_self>)
  to-Celsius |temperature: Fahrenheit: *> #=> merge-labels(|temperature: Celsius: > + times-by[5/9 minus[32] extract-value |_self>)
  to-Fahrenheit |temperature: Fahrenheit: *> #=> |_self>
  
  dump
  to-Celsius |temperature: Fahrenheit: 32>
  to-Celsius |temperature: Fahrenheit: *> #=> merge-labels(|temperature: Celsius: > + times-by[5/9] minus[32] extract-value |_self>)
  
  dump
  to-Celsius |temperature: Fahrenheit: 32>
  to-Celsius |temperature: Fahrenheit: 100>
  dump
  save temperature-conversion.sw
  q

2016-01-18
  h
  web-load http://semantic-db.org/sw-examples/gbp-usd-exchange-rate.sw
  web-load http://semantic-db.org/sw-examples/temperature-conversion.sw
  q

2016-01-19
  3.0 7.0 |x>
  9/5 10 |x>
  debug on
  9/5 10 |x>
  9/5^2 |x>
  do-you-know |>
  q

2016-01-19
  load fred-sam-friends.sw
  dump
  mbr(|Ed>,friends |Fred>)
  is-mbr(|Ed>,friends |Fred>)
  is-mbr(|Frank>,friends |Fred>)
  q

2016-01-19
  load shares.sw
  table[ket,*] |ticker: GOOG>
  history
  table[ket,coeff] select[1,100] 100 self-similar[open] |ticker: GOOG>
  
  history
  table[ket,coeff] select[1,100] 100 self-similar[open] |ticker: MSFT>
  
  load simple-network.sw
  dump
  exp-max[O] |a1>
  history
  table[ket,coeff] select[1,100] 100 self-similar[open] |ticker: APPL>
  table[ket,coeff] select[1,100] 100 self-similar[open] |ticker: AAPL>
  table[ket,coeff] select[1,100] 100 self-similar[open] |ticker: INTC>
  history
  exp-max[O] |a1>
  exp-max[O] |a2>
  exp-max[O] |b1>
  q

2016-01-20
  load common-English-words.sw
  word2ngram-op |*> #=> letter-ngrams[1,2,3] |_self>
  map[word2ngram-op,word2ngram] list-of |common English words>
  table[word,coeff] select[1,30] 100 similar-input[word2ngram] word2ngram |fish>
  T |*> #=> table[word,coeff] select[1,30] 100 similar-input[word2ngram] word2ngram |_self>
  T |ribbit>
  history
  T |*> #=> table[word,coeff] select[1,30] 100 similar-input[word2ngram] word2ngram-op |_self>
  T |ribbit>
  T |scrumcious>
  T |pertabation>
  T |perscicacity>
  T |matricies>
  history
  
  T |repeatible>
  history
  mbr(|repeatable>,list-of |common English words>)
  history
  save history

2016-01-20
  load common-English-words.sw
  word2ngram-op |*> #=> letter-ngrams[1,2,3] |_self>
  map[word2ngram-op,word2ngram] list-of |common English words>
  table[word,coeff] select[1,30] 100 similar-input[word2ngram] word2ngram |fish>
  T |*> #=> table[word,coeff] select[1,30] 100 similar-input[word2ngram] word2ngram |_self>
  T |ribbit>
  history
  T |*> #=> table[word,coeff] select[1,30] 100 similar-input[word2ngram] word2ngram-op |_self>
  T |ribbit>
  T |scrumcious>
  T |pertabation>
  T |perscicacity>
  T |matricies>
  history
  
  T |repeatible>
  history
  mbr(|repeatable>,list-of |common English words>)
  history
  save history
  ket-simm(|a>,split |a b>)
  ket-simm(letter-ngrams[1,2,3] |luck of the draw>,letter-ngrams[1,2,3] |yuck of the draw>)
  save history

2016-01-20
  pattern |node: 1> => |X> + |Y>
  pattern |node: 2> => |X>
  pattern |node: 3> => |Y>
  similar-input[pattern] |X>
  similar-input[pattern] |Y>
  similar-input[pattern] (|X> + |Y>)
  then |node: 1> => |X and Y>
  then |node: 2> => |X or Y>
  then |node: 3> => |X or Y>
  dump
  then similar-input[pattern] |X>
  then similar-input[pattern] |Y>
  then similar-input[pattern] split |X Y>
  S |*> #=> drop-below[0.9] then similar-input[pattern] |_self>
  S |X>
  S |Y>
  S (|X> + |Y>)
  then similar-input[pattern] (|X> + |Y>)
  
  
  half |*> #=> times-by[0.5] |_self>
  half |number: 100>
  q

2016-01-21
  mod[3] |number: 8>
  mod[5] |25>
  mod[5] |number: 25>
  
  is-equal[0] |number: 0>
  is-equal[0] |number: 1>
  debug on
  is-equal[0] |number: 0>
  q

2016-01-21
  is-mod[3] |number: 12>
  is-mod[3] |number: 5>
  is-mod[5] |number: 125>
  is-mod[5] |number: 7>
  mod[3] |number: 12>
  mod[3] |8>
  is-mod[7] |50>
  7^3
  7^3 |x>
  7^13 |x>
  is-mod[7] |96889010407>
  is-mod[13] |number: 286723>
  is-mod[3] |category 1: category 2: category 3: 286723>
  is-mod[3] |286724>
  is-mod[4] |286725>
  is-mod[3] |286725>
  is-mod[3] |category 1: category 2: category 3: 286725>
  q

2016-01-21
  load fizz-buzz--is-mod.sw
  dump
  
  history
  dump
  
  q

2016-01-21
  F |C: 4>
  q

2016-01-21
  fact |0> => |1>
  fact |*> !=> arithmetic(|_self>,|*>,fact minus[1] |_self>)
  fact |10>
  dump
  history
  q

2016-01-21
  fib |0> => |0>
  fib |1> => |1>
  fib |*> !=> arithmetic(fib minus[1] |_self>,|+>,fib minus[2] |_self>)
  fib |15>
  dump
  history
  q

2016-01-21
  load common-English-words.sw
  word2ngram-op |*> #=> letter-ngrams[1,2,3] |_self>
  map[word2ngram-op,word2ngram] list-of |common English words>
  table[word,coeff] select[1,30] 100 similar-input[word2ngram] word2ngram |fish>
  T |*> #=> table[word,coeff] select[1,30] 100 similar-input[word2ngram] word2ngram |_self>
  T |ribbit>
  history
  T |*> #=> table[word,coeff] select[1,30] 100 similar-input[word2ngram] word2ngram-op |_self>
  T |ribbit>
  T |scrumcious>
  T |pertabation>
  T |perscicacity>
  T |matricies>
  history
  
  T |repeatible>
  history
  mbr(|repeatable>,list-of |common English words>)
  history
  save history
  ket-simm(|a>,split |a b>)
  ket-simm(letter-ngrams[1,2,3] |luck of the draw>,letter-ngrams[1,2,3] |yuck of the draw>)
  save history
  q

2016-01-21
  fact |0> => |1>
  fact |*> !=> arithmetic( |_self>, |*>, fact minus[1] |_self>)
  
  fib |0> => |0>
  fib |1> => |1>
  fib |*> !=> arithmetic( fib minus[1] |_self>, |+>, fib minus[2] |_self>)
  
  the |list> => range(|1>,|50>)
  
  fizz-buzz-0 |*> #=> |_self>
  fizz-buzz-1 |*> #=> if(is-mod[3] |_self>,|Fizz>,|>)
  fizz-buzz-2 |*> #=> if(is-mod[5] |_self>,|Buzz>,|>)
  fizz-buzz-3 |*> #=> if(is-mod[15] |_self>,|FizzBuzz>,|>)
  
  |null> => map[fizz-buzz-0,fizz-buzz] the |list>
  |null> => map[fizz-buzz-1,fizz-buzz] the |list>
  |null> => map[fizz-buzz-2,fizz-buzz] the |list>
  |null> => map[fizz-buzz-3,fizz-buzz] the |list>
  
  table[number,fact,fib,fizz-buzz] the |list>
  q

2016-01-25
  fact |0> => |1>
  fact |*> !=> arithmetic( |_self>, |*>, fact minus[1] |_self>)
  
  fib |0> => |0>
  fib |1> => |1>
  fib |*> !=> arithmetic( fib minus[1] |_self>, |+>, fib minus[2] |_self>)
  
  the |list> => range(|1>,|50>)
  
  fizz-buzz-0 |*> #=> |_self>
  fizz-buzz-1 |*> #=> if(is-mod[3] |_self>,|Fizz>,|>)
  fizz-buzz-2 |*> #=> if(is-mod[5] |_self>,|Buzz>,|>)
  fizz-buzz-3 |*> #=> if(is-mod[15] |_self>,|FizzBuzz>,|>)
  
  map[fizz-buzz-0,fizz-buzz] the |list>
  map[fizz-buzz-1,fizz-buzz] the |list>
  map[fizz-buzz-2,fizz-buzz] the |list>
  map[fizz-buzz-3,fizz-buzz] the |list>
  
  table[number,fact,fib,fizz-buzz] the |list>
  C |F: 98.6>
  age |person: Emma> => |age: 12>
  age |person: Fred> => |age: 17>
  age |person: Sam> => |age: 18>
  age |person: Liz> => |age: 19>
  age |person: Jack> => |age: 20>
  context
  context teenager
  age |person: Emma> => |age: 12>
  age |person: Fred> => |age: 17>
  age |person: Sam> => |age: 18>
  age |person: Liz> => |age: 19>
  age |person: Jack> => |age: 20>
  
  dump
  is-teenager |person: *> #=> is-in-range[13,19] age |_self>
  is-adult |person: *> #=> is-greater-equal-than[18] age |_self>
  table[person,is-teenager,is-adult] starts-with |person: >
  history
  q

2016-01-25
  context is-teenager and is-adult
    is-teenager |person: *> #=> is-in-range[13,19] age |_self>
    is-adult |person: *> #=> is-greater-equal-than[18] age |_self>
  
    age |person: Emma> => |age: 12>
    age |person: Fred> => |age: 17>
    age |person: Sam> => |age: 18>
    age |person: Liz> => |age: 19>
    age |person: Jack> => |age: 20>
  
  dump
  table[person,is-teenager,is-adult] starts-with |person: >
  history
  dump
  table[person,is-teenager,is-adult] starts-with |person: >
  history
  is-teenager |person: *> !=> is-in-range[13,19] age |_self>
  table[person,is-teenager,is-adult] starts-with |person: >
  history
  dump
  is-teenager |person: Sam>
    is-teenager |person: *> #=> is-in-range[13,19] age |_self>
  is-teenager |person: Sam>
  is-teenager |person: *> !=> is-in-range[13,19] age |_self>
  is-teenager |person: Sam>
  table[person,is-teenager,is-adult] starts-with |person: >
  dump
  history
  -- weird bug: is-teenager |person: *> !=> is-in-range[13,19] age |_self>
  save history

2016-01-26
  context is-teenager and is-adult
    is-teenager |person: *> #=> is-in-range[13,19] age |_self>
    is-adult |person: *> #=> is-greater-equal-than[18] age |_self>
  
    age |person: Emma> => |age: 12>
    age |person: Fred> => |age: 17>
    age |person: Sam> => |age: 18>
    age |person: Liz> => |age: 19>
    age |person: Jack> => |age: 20>
  
  dump
  table[person,is-teenager,is-adult] starts-with |person: >
  history
  dump
  table[person,is-teenager,is-adult] starts-with |person: >
  history
  is-teenager |person: *> !=> is-in-range[13,19] age |_self>
  table[person,is-teenager,is-adult] starts-with |person: >
  history
  dump
  is-teenager |person: Sam>
    is-teenager |person: *> #=> is-in-range[13,19] age |_self>
  is-teenager |person: Sam>
  is-teenager |person: *> !=> is-in-range[13,19] age |_self>
  is-teenager |person: Sam>
  table[person,is-teenager,is-adult] starts-with |person: >
  dump
  history
  -- weird bug: is-teenager |person: *> !=> is-in-range[13,19] age |_self>
  save history
  C |F: 2000>
  fission-channel-1 |U: 235> => |Ba: 141> + |Kr: 92> + 3|n>
  fission-channel-2 |U: 235> => |Xe: 140> + |Sr: 94> + 2|n>
  fission-channel-3 |U: 235> => |La: 143> + |Br: 90> + 3|n>
  fission-channel-4 |U: 235> => |Cs: 137> + |Rb: 96> + 3|n>
  fission-channel-5 |U: 235> => |I: 131> + |Y: 89> + 16|n>
  list-of-fission-channels |U: 235> => |op: fission-channel-1> + |op: fission-channel-2> + |op: fission-channel-3> + |op: fission-channel-4> + |op: fission-channel-5>
  
  fission |*> #=> apply(weighted-pick-elt list-of-fission-channels |_self>,|_self>)
  dump
  fission |U: 235>
  fission |U: 235>
  fission |U: 235>
  fission |U: 235>
  process-reaction(|n> + 4|U: 235>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(3|U: 235> + |Cs: 137> + |Rb: 96> + 3|n>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(2|U: 235> + |Cs: 137> + |Rb: 96> + 18|n> + |I: 131> + |Y: 89>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(|U: 235> + 2|Cs: 137> + 2|Rb: 96> + 20|n> + |I: 131> + |Y: 89>,|n> + |U: 235>,fission |U: 235>)
  process-reaction(2|Cs: 137> + 2|Rb: 96> + 35|n> + 2|I: 131> + 2|Y: 89>,|n> + |U: 235>,fission |U: 235>)
  q

2016-01-26
  arrow |e1> => |gamma 1>
  arrow |gamma 1> => |e2>
  q

2016-01-26
  electron |e1> => |gamma 1>
  electron |gamma 1> => |e2>
  photon |gamma 1> => |gamma 2>
  electron |e3> => |gamma 2>
  electron |gamma 2> => |e4>
  dump
  q

2016-01-26
  context simple Feynman diagram
  electron |e1> => |gamma 1>
  
  electron |gamma 1> => |e2>
  photon |gamma 1> => |gamma 2>
  
  electron |e3> => |gamma 2>
  
  electron |gamma 2> => |e4>
  
  dump
  save simple-feynman-diagram.sw
  q

2016-01-27
  letter-ngram[1,2,3] |fish>
  letter-ngrams[1,2,3] |fish>
  ket-simm(|a>,split |a b c>)
  ket-simm(letter-ngrams[1,2,3] |nice to meet you>,letter-ngrams[1,2,3] |ice to meet you>)
  ngram-op |*> #=> letter-ngrams[1,2,3] |_self>
  ket-simm(ngram-op |Shakespeare produced most of his known work between 1589 and 1613>,ngram-op |Shakespeare produced most of his work after 1589>)
  save history

2016-01-28
  letter-ngram[1,2,3] |fish>
  letter-ngrams[1,2,3] |fish>
  ket-simm(|a>,split |a b c>)
  ket-simm(letter-ngrams[1,2,3] |nice to meet you>,letter-ngrams[1,2,3] |ice to meet you>)
  ngram-op |*> #=> letter-ngrams[1,2,3] |_self>
  ket-simm(ngram-op |Shakespeare produced most of his known work between 1589 and 1613>,ngram-op |Shakespeare produced most of his work after 1589>)
  save history
  ket-simm(ngram-op |nsa>,ngram-op|nasa>)
  ket-simm(ngram-op|gary>,ngram-op|garry>)
  q

2016-01-28
  the-price-for |apple> => 0.6|dollars>
  the-price-for |orange> => 0.8|dollars>
  the-price-for |milk> => 2.3|dollars>
  the-price-for |coffee> => 5.5|dollars>
  the-price-for |steak> => 9|dollars>
  the |shopping list> => |orange> + 4|apple> + |milk> + |coffee> + |steak>
  
  
  dump
  the-price-for the |shopping list>
  process-reaction(30|dollars>,the-price-for the |shopping list>,the |shopping list>)
  list-to-words split |a b c>
  list-to-words process-reaction(30|dollars>,the-price-for the |shopping list>,the |shopping list>)
  int-coeffs-to-word (10|dollars> + |orange> + 4|apple> + |milk> + |coffee> + |steak>)
  plural |apple> => |apples>
  int-coeffs-to-word (10|dollars> + |orange> + 4|apple> + |milk> + |coffee> + |steak>)
  list-to-words int-coeffs-to-word (10|dollars> + |orange> + 4|apple> + |milk> + |coffee> + |steak>)
  list-to-words int-coeffs-to-word process-reaction(30|dollars>,the-price-for the |shopping list>,the |shopping list>)
  history
  list-to-words int-coeffs-to-word process-reaction(30|dollars>,the-price-for the |shopping list>,the |shopping list>)
  list-to-words int-coeffs-to-word 0|fish>
  q

2016-01-28
    the-price-for |apple> => 0.6|dollars>
    the-price-for |orange> => 0.8|dollars>
    the-price-for |milk> => 2.3|dollars>
    the-price-for |coffee> => 5.5|dollars>
    the-price-for |steak> => 9|dollars>
    the |shopping list> => |orange> + 4|apple> + |milk> + |coffee> + |steak>
  
  dump
  rel-kets[the-price-for]
  rel-kets[the]
  -- that is cool!
  q

2016-01-28
  day-of-the-week |date: 2016/1/28>
  q

2016-01-30
  ngop |*> #=> letter-ngrams[1,2,3] |_self>
  ket-simm(ngop |university of adelaide>,ngop |adelaide university>)
  ket-simm(word-ngrams[1] |university of adelaide>,word-ngrams[1] |adelaide university>)
  history
  ngop |*> #=> letter-ngrams[1,2,3,4] |_self>
  ket-simm(ngop |university of adelaide>,ngop |adelaide university>)
  ngop |*> #=> letter-ngrams[1,2,3] |_self>
  ket-simm(ngop |captain picarrd>,ngop |captain jean-luc picarrd>)
  ket-simm(ngop |fred jones>,ngop |jones fred>)
  -- a note: letter-ngrams[1,2,3] does for text what we want to do for images. Break into component parts. I guess need an |image: 5: 5: AF352E4> data type or something, so we can pass image fragments around as superpositions.
  save history

2016-02-04
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history

2016-02-04
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history

2016-02-04
  ngop |*> #=> letter-ngrams[1,2,3] |_self>
  ket-simm(ngop |university of adelaide>,ngop |adelaide university>)
  ket-simm(word-ngrams[1] |university of adelaide>,word-ngrams[1] |adelaide university>)
  history
  ngop |*> #=> letter-ngrams[1,2,3,4] |_self>
  ket-simm(ngop |university of adelaide>,ngop |adelaide university>)
  ngop |*> #=> letter-ngrams[1,2,3] |_self>
  ket-simm(ngop |captain picarrd>,ngop |captain jean-luc picarrd>)
  ket-simm(ngop |fred jones>,ngop |jones fred>)
  -- a note: letter-ngrams[1,2,3] does for text what we want to do for images. Break into component parts. I guess need an |image: 5: 5: AF352E4> data type or something, so we can pass image fragments around as superpositions.
  save history
  ket-simm(ngop |tough enough>,ngop |tough ain't enough>)
  invert how-many split |a b c>
  invert pop-float how-many split |a b c>
  save history

2016-02-04
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history
  dump
  save simple-if-then-machine.sw
  context play
  seq |node 1> => letter-ngrams[1,2,3] |the man on the moon>
  then |node 1> => |the man on the moon>
  dump
  then similar-input[seq] letter-ngrams[1,2,3] |the man>
  then similar-input[seq] letter-ngrams[1,2,3] |the man on>
  save history

2016-02-05
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history
  dump
  save simple-if-then-machine.sw
  context play
  seq |node 1> => letter-ngrams[1,2,3] |the man on the moon>
  then |node 1> => |the man on the moon>
  dump
  then similar-input[seq] letter-ngrams[1,2,3] |the man>
  then similar-input[seq] letter-ngrams[1,2,3] |the man on>
  save history
  context bigger if-then machine
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  seq |node 1> => ngrams |the cat sat on the mat>
  then |node 1> => |the cat sat on the mat>
  seq |node 2> => ngrams |the man on the moon>
  then |node 2> => |the man on the moon>
  then similar-input[seq] ngrams |the >
  then similar-input[seq] ngrams |the cat>
  then similar-input[seq] ngrams |the cat sat>
  then similar-input[seq] ngrams |the cat sat on the>
  then similar-input[seq] ngrams |the cat sat on the moon>
  then similar-input[seq] ngrams |the man on the>
  save history

2016-02-05
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history
  dump
  save simple-if-then-machine.sw
  context play
  seq |node 1> => letter-ngrams[1,2,3] |the man on the moon>
  then |node 1> => |the man on the moon>
  dump
  then similar-input[seq] letter-ngrams[1,2,3] |the man>
  then similar-input[seq] letter-ngrams[1,2,3] |the man on>
  save history
  context bigger if-then machine
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  seq |node 1> => ngrams |the cat sat on the mat>
  then |node 1> => |the cat sat on the mat>
  seq |node 2> => ngrams |the man on the moon>
  then |node 2> => |the man on the moon>
  then similar-input[seq] ngrams |the >
  then similar-input[seq] ngrams |the cat>
  then similar-input[seq] ngrams |the cat sat>
  then similar-input[seq] ngrams |the cat sat on the>
  then similar-input[seq] ngrams |the cat sat on the moon>
  then similar-input[seq] ngrams |the man on the>
  save history
  history
  dump
  then similar-input[seq] ngrams |the cat sat on the mat>
  then similar-input[seq] ngrams |the man on the moon>
  guess-phrase |*> #=> then similar-input[seq] ngrams |_self>
  guess-phrase |the >
  guess-phrase |the cat>
  guess-phrase |the cat sat>
  guess-phrase |the cat sat on the>
  guess-phrase |the cat sat on the moon>
  guess-phrase |the man on the>
  guess-phrase |the cat sat on the mat>
  guess-phrase |the man on the moon>
  save history

2016-02-06
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history
  dump
  save simple-if-then-machine.sw
  context play
  seq |node 1> => letter-ngrams[1,2,3] |the man on the moon>
  then |node 1> => |the man on the moon>
  dump
  then similar-input[seq] letter-ngrams[1,2,3] |the man>
  then similar-input[seq] letter-ngrams[1,2,3] |the man on>
  save history
  context bigger if-then machine
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  seq |node 1> => ngrams |the cat sat on the mat>
  then |node 1> => |the cat sat on the mat>
  seq |node 2> => ngrams |the man on the moon>
  then |node 2> => |the man on the moon>
  then similar-input[seq] ngrams |the >
  then similar-input[seq] ngrams |the cat>
  then similar-input[seq] ngrams |the cat sat>
  then similar-input[seq] ngrams |the cat sat on the>
  then similar-input[seq] ngrams |the cat sat on the moon>
  then similar-input[seq] ngrams |the man on the>
  save history
  history
  dump
  then similar-input[seq] ngrams |the cat sat on the mat>
  then similar-input[seq] ngrams |the man on the moon>
  guess-phrase |*> #=> then similar-input[seq] ngrams |_self>
  guess-phrase |the >
  guess-phrase |the cat>
  guess-phrase |the cat sat>
  guess-phrase |the cat sat on the>
  guess-phrase |the cat sat on the moon>
  guess-phrase |the man on the>
  guess-phrase |the cat sat on the mat>
  guess-phrase |the man on the moon>
  save history
  context if-then machine learning a sequence
  -- define our superpositions:
  the |sp1> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  -- define our if-then machines:
  seq |node 1: 1> => the |sp1>
  then |node 1: *> => the |sp2>
  
  seq |node 2: 1> => the |sp2>
  then |node 2: *> => the |sp3>
  
  seq |node 3: 1> => the |sp3>
  then |node 3: *> => the |sp4>
  
  seq |node 4: 1> => the |sp4>
  then |node 4: *> => the |sp5>
  
  seq |node 5: 1> => the |sp5>
  then |node 5: *> => |the finish line>
  dump
  -- see what we have:
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  context
  context fixed if-then machine learning a sequence
  history
  -- define our superpositions:
  the |sp1> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  
  seq |node: 1: 1> => the |sp1>
  then |node: 1: *> => the |sp2>
  
  seq |node: 2: 1> => the |sp2>
  then |node: 2: *> => the |sp3>
  
  seq |node: 3: 1> => the |sp3>
  then |node: 3: *> => the |sp4>
  
  seq |node: 4: 1> => the |sp4>
  then |node: 4: *> => the |sp5>
  
  seq |node: 5: 1> => the |sp5>
  then |node: 5: *> => |the finish line>
  
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  dump
  .
  
  dump
  history
  history 1000
  
  seq2 |node: 1: 1> => absolute-noise[1] the |sp1>
  seq2 |node: 2: 1> => absolute-noise[1] the |sp2>
  seq2 |node: 3: 1> => absolute-noise[1] the |sp3>
  seq2 |node: 4: 1> => absolute-noise[1] the |sp4>
  seq2 |node: 5: 1> => absolute-noise[1] the |sp5>
  history
  history
    table[node,coeff] 100 similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  dump
  table[node,coeff] 100 similar-input[seq2] absolute-noise[1] the |input>
  .
  save history

2016-02-06
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history
  dump
  save simple-if-then-machine.sw
  context play
  seq |node 1> => letter-ngrams[1,2,3] |the man on the moon>
  then |node 1> => |the man on the moon>
  dump
  then similar-input[seq] letter-ngrams[1,2,3] |the man>
  then similar-input[seq] letter-ngrams[1,2,3] |the man on>
  save history
  context bigger if-then machine
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  seq |node 1> => ngrams |the cat sat on the mat>
  then |node 1> => |the cat sat on the mat>
  seq |node 2> => ngrams |the man on the moon>
  then |node 2> => |the man on the moon>
  then similar-input[seq] ngrams |the >
  then similar-input[seq] ngrams |the cat>
  then similar-input[seq] ngrams |the cat sat>
  then similar-input[seq] ngrams |the cat sat on the>
  then similar-input[seq] ngrams |the cat sat on the moon>
  then similar-input[seq] ngrams |the man on the>
  save history
  history
  dump
  then similar-input[seq] ngrams |the cat sat on the mat>
  then similar-input[seq] ngrams |the man on the moon>
  guess-phrase |*> #=> then similar-input[seq] ngrams |_self>
  guess-phrase |the >
  guess-phrase |the cat>
  guess-phrase |the cat sat>
  guess-phrase |the cat sat on the>
  guess-phrase |the cat sat on the moon>
  guess-phrase |the man on the>
  guess-phrase |the cat sat on the mat>
  guess-phrase |the man on the moon>
  save history
  context if-then machine learning a sequence
  -- define our superpositions:
  the |sp1> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  -- define our if-then machines:
  seq |node 1: 1> => the |sp1>
  then |node 1: *> => the |sp2>
  
  seq |node 2: 1> => the |sp2>
  then |node 2: *> => the |sp3>
  
  seq |node 3: 1> => the |sp3>
  then |node 3: *> => the |sp4>
  
  seq |node 4: 1> => the |sp4>
  then |node 4: *> => the |sp5>
  
  seq |node 5: 1> => the |sp5>
  then |node 5: *> => |the finish line>
  dump
  -- see what we have:
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  context
  context fixed if-then machine learning a sequence
  history
  -- define our superpositions:
  the |sp1> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  
  seq |node: 1: 1> => the |sp1>
  then |node: 1: *> => the |sp2>
  
  seq |node: 2: 1> => the |sp2>
  then |node: 2: *> => the |sp3>
  
  seq |node: 3: 1> => the |sp3>
  then |node: 3: *> => the |sp4>
  
  seq |node: 4: 1> => the |sp4>
  then |node: 4: *> => the |sp5>
  
  seq |node: 5: 1> => the |sp5>
  then |node: 5: *> => |the finish line>
  
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  dump
  .
  
  dump
  history
  history 1000
  
  seq2 |node: 1: 1> => absolute-noise[1] the |sp1>
  seq2 |node: 2: 1> => absolute-noise[1] the |sp2>
  seq2 |node: 3: 1> => absolute-noise[1] the |sp3>
  seq2 |node: 4: 1> => absolute-noise[1] the |sp4>
  seq2 |node: 5: 1> => absolute-noise[1] the |sp5>
  history
  history
    table[node,coeff] 100 similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  dump
  table[node,coeff] 100 similar-input[seq2] absolute-noise[1] the |input>
  .
  save history
  context
  save if-then-machine-learning-a-sequence.sw
  dump
  table[node,coeff] 100 similar-input[seq1] then clean drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then clean drop-below[0.9] similar-input[seq2] the |input>
  history
  save history

2016-02-07
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history
  dump
  save simple-if-then-machine.sw
  context play
  seq |node 1> => letter-ngrams[1,2,3] |the man on the moon>
  then |node 1> => |the man on the moon>
  dump
  then similar-input[seq] letter-ngrams[1,2,3] |the man>
  then similar-input[seq] letter-ngrams[1,2,3] |the man on>
  save history
  context bigger if-then machine
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  seq |node 1> => ngrams |the cat sat on the mat>
  then |node 1> => |the cat sat on the mat>
  seq |node 2> => ngrams |the man on the moon>
  then |node 2> => |the man on the moon>
  then similar-input[seq] ngrams |the >
  then similar-input[seq] ngrams |the cat>
  then similar-input[seq] ngrams |the cat sat>
  then similar-input[seq] ngrams |the cat sat on the>
  then similar-input[seq] ngrams |the cat sat on the moon>
  then similar-input[seq] ngrams |the man on the>
  save history
  history
  dump
  then similar-input[seq] ngrams |the cat sat on the mat>
  then similar-input[seq] ngrams |the man on the moon>
  guess-phrase |*> #=> then similar-input[seq] ngrams |_self>
  guess-phrase |the >
  guess-phrase |the cat>
  guess-phrase |the cat sat>
  guess-phrase |the cat sat on the>
  guess-phrase |the cat sat on the moon>
  guess-phrase |the man on the>
  guess-phrase |the cat sat on the mat>
  guess-phrase |the man on the moon>
  save history
  context if-then machine learning a sequence
  -- define our superpositions:
  the |sp1> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  -- define our if-then machines:
  seq |node 1: 1> => the |sp1>
  then |node 1: *> => the |sp2>
  
  seq |node 2: 1> => the |sp2>
  then |node 2: *> => the |sp3>
  
  seq |node 3: 1> => the |sp3>
  then |node 3: *> => the |sp4>
  
  seq |node 4: 1> => the |sp4>
  then |node 4: *> => the |sp5>
  
  seq |node 5: 1> => the |sp5>
  then |node 5: *> => |the finish line>
  dump
  -- see what we have:
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  context
  context fixed if-then machine learning a sequence
  history
  -- define our superpositions:
  the |sp1> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  
  seq |node: 1: 1> => the |sp1>
  then |node: 1: *> => the |sp2>
  
  seq |node: 2: 1> => the |sp2>
  then |node: 2: *> => the |sp3>
  
  seq |node: 3: 1> => the |sp3>
  then |node: 3: *> => the |sp4>
  
  seq |node: 4: 1> => the |sp4>
  then |node: 4: *> => the |sp5>
  
  seq |node: 5: 1> => the |sp5>
  then |node: 5: *> => |the finish line>
  
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  dump
  .
  
  dump
  history
  history 1000
  
  seq2 |node: 1: 1> => absolute-noise[1] the |sp1>
  seq2 |node: 2: 1> => absolute-noise[1] the |sp2>
  seq2 |node: 3: 1> => absolute-noise[1] the |sp3>
  seq2 |node: 4: 1> => absolute-noise[1] the |sp4>
  seq2 |node: 5: 1> => absolute-noise[1] the |sp5>
  history
  history
    table[node,coeff] 100 similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  dump
  table[node,coeff] 100 similar-input[seq2] absolute-noise[1] the |input>
  .
  save history
  context
  save if-then-machine-learning-a-sequence.sw
  dump
  table[node,coeff] 100 similar-input[seq1] then clean drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then clean drop-below[0.9] similar-input[seq2] the |input>
  history
  save history
  dump
  rel-kets[seq,seq2]
  dump rel-kets[seq]
  
  rel-kets[seq]
  dump rel-kets[seq] |>
  dump
  history
  table[node,coeff] 100 similar-input[seq] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  table[node,coeff] 100 similar-input[seq2] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  .
  save history

2016-02-07
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history
  dump
  save simple-if-then-machine.sw
  context play
  seq |node 1> => letter-ngrams[1,2,3] |the man on the moon>
  then |node 1> => |the man on the moon>
  dump
  then similar-input[seq] letter-ngrams[1,2,3] |the man>
  then similar-input[seq] letter-ngrams[1,2,3] |the man on>
  save history
  context bigger if-then machine
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  seq |node 1> => ngrams |the cat sat on the mat>
  then |node 1> => |the cat sat on the mat>
  seq |node 2> => ngrams |the man on the moon>
  then |node 2> => |the man on the moon>
  then similar-input[seq] ngrams |the >
  then similar-input[seq] ngrams |the cat>
  then similar-input[seq] ngrams |the cat sat>
  then similar-input[seq] ngrams |the cat sat on the>
  then similar-input[seq] ngrams |the cat sat on the moon>
  then similar-input[seq] ngrams |the man on the>
  save history
  history
  dump
  then similar-input[seq] ngrams |the cat sat on the mat>
  then similar-input[seq] ngrams |the man on the moon>
  guess-phrase |*> #=> then similar-input[seq] ngrams |_self>
  guess-phrase |the >
  guess-phrase |the cat>
  guess-phrase |the cat sat>
  guess-phrase |the cat sat on the>
  guess-phrase |the cat sat on the moon>
  guess-phrase |the man on the>
  guess-phrase |the cat sat on the mat>
  guess-phrase |the man on the moon>
  save history
  context if-then machine learning a sequence
  -- define our superpositions:
  the |sp1> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  -- define our if-then machines:
  seq |node 1: 1> => the |sp1>
  then |node 1: *> => the |sp2>
  
  seq |node 2: 1> => the |sp2>
  then |node 2: *> => the |sp3>
  
  seq |node 3: 1> => the |sp3>
  then |node 3: *> => the |sp4>
  
  seq |node 4: 1> => the |sp4>
  then |node 4: *> => the |sp5>
  
  seq |node 5: 1> => the |sp5>
  then |node 5: *> => |the finish line>
  dump
  -- see what we have:
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  context
  context fixed if-then machine learning a sequence
  history
  -- define our superpositions:
  the |sp1> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  
  seq |node: 1: 1> => the |sp1>
  then |node: 1: *> => the |sp2>
  
  seq |node: 2: 1> => the |sp2>
  then |node: 2: *> => the |sp3>
  
  seq |node: 3: 1> => the |sp3>
  then |node: 3: *> => the |sp4>
  
  seq |node: 4: 1> => the |sp4>
  then |node: 4: *> => the |sp5>
  
  seq |node: 5: 1> => the |sp5>
  then |node: 5: *> => |the finish line>
  
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  dump
  .
  
  dump
  history
  history 1000
  
  seq2 |node: 1: 1> => absolute-noise[1] the |sp1>
  seq2 |node: 2: 1> => absolute-noise[1] the |sp2>
  seq2 |node: 3: 1> => absolute-noise[1] the |sp3>
  seq2 |node: 4: 1> => absolute-noise[1] the |sp4>
  seq2 |node: 5: 1> => absolute-noise[1] the |sp5>
  history
  history
    table[node,coeff] 100 similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  dump
  table[node,coeff] 100 similar-input[seq2] absolute-noise[1] the |input>
  .
  save history
  context
  save if-then-machine-learning-a-sequence.sw
  dump
  table[node,coeff] 100 similar-input[seq1] then clean drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then clean drop-below[0.9] similar-input[seq2] the |input>
  history
  save history
  dump
  rel-kets[seq,seq2]
  dump rel-kets[seq]
  
  rel-kets[seq]
  dump rel-kets[seq] |>
  dump
  history
  table[node,coeff] 100 similar-input[seq] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  table[node,coeff] 100 similar-input[seq2] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  .
  save history
  history
  
  table[node,coeff] 100 similar-input[seq] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  save history

2016-02-07
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history
  dump
  save simple-if-then-machine.sw
  context play
  seq |node 1> => letter-ngrams[1,2,3] |the man on the moon>
  then |node 1> => |the man on the moon>
  dump
  then similar-input[seq] letter-ngrams[1,2,3] |the man>
  then similar-input[seq] letter-ngrams[1,2,3] |the man on>
  save history
  context bigger if-then machine
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  seq |node 1> => ngrams |the cat sat on the mat>
  then |node 1> => |the cat sat on the mat>
  seq |node 2> => ngrams |the man on the moon>
  then |node 2> => |the man on the moon>
  then similar-input[seq] ngrams |the >
  then similar-input[seq] ngrams |the cat>
  then similar-input[seq] ngrams |the cat sat>
  then similar-input[seq] ngrams |the cat sat on the>
  then similar-input[seq] ngrams |the cat sat on the moon>
  then similar-input[seq] ngrams |the man on the>
  save history
  history
  dump
  then similar-input[seq] ngrams |the cat sat on the mat>
  then similar-input[seq] ngrams |the man on the moon>
  guess-phrase |*> #=> then similar-input[seq] ngrams |_self>
  guess-phrase |the >
  guess-phrase |the cat>
  guess-phrase |the cat sat>
  guess-phrase |the cat sat on the>
  guess-phrase |the cat sat on the moon>
  guess-phrase |the man on the>
  guess-phrase |the cat sat on the mat>
  guess-phrase |the man on the moon>
  save history
  context if-then machine learning a sequence
  -- define our superpositions:
  the |sp1> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  -- define our if-then machines:
  seq |node 1: 1> => the |sp1>
  then |node 1: *> => the |sp2>
  
  seq |node 2: 1> => the |sp2>
  then |node 2: *> => the |sp3>
  
  seq |node 3: 1> => the |sp3>
  then |node 3: *> => the |sp4>
  
  seq |node 4: 1> => the |sp4>
  then |node 4: *> => the |sp5>
  
  seq |node 5: 1> => the |sp5>
  then |node 5: *> => |the finish line>
  dump
  -- see what we have:
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  context
  context fixed if-then machine learning a sequence
  history
  -- define our superpositions:
  the |sp1> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  
  seq |node: 1: 1> => the |sp1>
  then |node: 1: *> => the |sp2>
  
  seq |node: 2: 1> => the |sp2>
  then |node: 2: *> => the |sp3>
  
  seq |node: 3: 1> => the |sp3>
  then |node: 3: *> => the |sp4>
  
  seq |node: 4: 1> => the |sp4>
  then |node: 4: *> => the |sp5>
  
  seq |node: 5: 1> => the |sp5>
  then |node: 5: *> => |the finish line>
  
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  dump
  .
  
  dump
  history
  history 1000
  
  seq2 |node: 1: 1> => absolute-noise[1] the |sp1>
  seq2 |node: 2: 1> => absolute-noise[1] the |sp2>
  seq2 |node: 3: 1> => absolute-noise[1] the |sp3>
  seq2 |node: 4: 1> => absolute-noise[1] the |sp4>
  seq2 |node: 5: 1> => absolute-noise[1] the |sp5>
  history
  history
    table[node,coeff] 100 similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  dump
  table[node,coeff] 100 similar-input[seq2] absolute-noise[1] the |input>
  .
  save history
  context
  save if-then-machine-learning-a-sequence.sw
  dump
  table[node,coeff] 100 similar-input[seq1] then clean drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then clean drop-below[0.9] similar-input[seq2] the |input>
  history
  save history
  dump
  rel-kets[seq,seq2]
  dump rel-kets[seq]
  
  rel-kets[seq]
  dump rel-kets[seq] |>
  dump
  history
  table[node,coeff] 100 similar-input[seq] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  table[node,coeff] 100 similar-input[seq2] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  .
  save history
  history
  
  table[node,coeff] 100 similar-input[seq] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  save history
  seq3 |node: 17: 1> => the |sp1>
  seq3 |node: 17: 2> => the |sp2>
  seq3 |node: 17: 3> => the |sp3>
  seq3 |node: 17: 4> => the |sp4>
  seq3 |node: 17: 5> => the |sp5>
  then |node: 17: *> => |the SP sequence>
  dump
  history
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  then drop-below[0.9] similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  history
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  dump
  history 1000
  
  
  save if-then-machine-learning-a-sequence.sw
  dump
  history
  debug on
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  debug off
  then drop-below[0.9] similar-input[seq3] pick[9] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  projection-example |*> #=> then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  projection-example
  projection-example
  projection-example
  projection-example
  projection-example
  .
  .
  .
  .
  .
  .
  .
  .
  history
  projection-example
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  pick[2] split |a b c d e>
  .
  .
  .
  .
  .
  history
  history 1000
  projection-example |*> #=> then drop-below[0.9] similar-input[seq3] pick[9] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  projection-example
  .
  .
  .
  projection-example |x>
  projection-example 0|x>
  .
  id
  h
  x = x
  id
  projection-example
  .
  history
  save history

2016-02-08
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history
  dump
  save simple-if-then-machine.sw
  context play
  seq |node 1> => letter-ngrams[1,2,3] |the man on the moon>
  then |node 1> => |the man on the moon>
  dump
  then similar-input[seq] letter-ngrams[1,2,3] |the man>
  then similar-input[seq] letter-ngrams[1,2,3] |the man on>
  save history
  context bigger if-then machine
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  seq |node 1> => ngrams |the cat sat on the mat>
  then |node 1> => |the cat sat on the mat>
  seq |node 2> => ngrams |the man on the moon>
  then |node 2> => |the man on the moon>
  then similar-input[seq] ngrams |the >
  then similar-input[seq] ngrams |the cat>
  then similar-input[seq] ngrams |the cat sat>
  then similar-input[seq] ngrams |the cat sat on the>
  then similar-input[seq] ngrams |the cat sat on the moon>
  then similar-input[seq] ngrams |the man on the>
  save history
  history
  dump
  then similar-input[seq] ngrams |the cat sat on the mat>
  then similar-input[seq] ngrams |the man on the moon>
  guess-phrase |*> #=> then similar-input[seq] ngrams |_self>
  guess-phrase |the >
  guess-phrase |the cat>
  guess-phrase |the cat sat>
  guess-phrase |the cat sat on the>
  guess-phrase |the cat sat on the moon>
  guess-phrase |the man on the>
  guess-phrase |the cat sat on the mat>
  guess-phrase |the man on the moon>
  save history
  context if-then machine learning a sequence
  -- define our superpositions:
  the |sp1> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  -- define our if-then machines:
  seq |node 1: 1> => the |sp1>
  then |node 1: *> => the |sp2>
  
  seq |node 2: 1> => the |sp2>
  then |node 2: *> => the |sp3>
  
  seq |node 3: 1> => the |sp3>
  then |node 3: *> => the |sp4>
  
  seq |node 4: 1> => the |sp4>
  then |node 4: *> => the |sp5>
  
  seq |node 5: 1> => the |sp5>
  then |node 5: *> => |the finish line>
  dump
  -- see what we have:
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  context
  context fixed if-then machine learning a sequence
  history
  -- define our superpositions:
  the |sp1> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  
  seq |node: 1: 1> => the |sp1>
  then |node: 1: *> => the |sp2>
  
  seq |node: 2: 1> => the |sp2>
  then |node: 2: *> => the |sp3>
  
  seq |node: 3: 1> => the |sp3>
  then |node: 3: *> => the |sp4>
  
  seq |node: 4: 1> => the |sp4>
  then |node: 4: *> => the |sp5>
  
  seq |node: 5: 1> => the |sp5>
  then |node: 5: *> => |the finish line>
  
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  dump
  .
  
  dump
  history
  history 1000
  
  seq2 |node: 1: 1> => absolute-noise[1] the |sp1>
  seq2 |node: 2: 1> => absolute-noise[1] the |sp2>
  seq2 |node: 3: 1> => absolute-noise[1] the |sp3>
  seq2 |node: 4: 1> => absolute-noise[1] the |sp4>
  seq2 |node: 5: 1> => absolute-noise[1] the |sp5>
  history
  history
    table[node,coeff] 100 similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  dump
  table[node,coeff] 100 similar-input[seq2] absolute-noise[1] the |input>
  .
  save history
  context
  save if-then-machine-learning-a-sequence.sw
  dump
  table[node,coeff] 100 similar-input[seq1] then clean drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then clean drop-below[0.9] similar-input[seq2] the |input>
  history
  save history
  dump
  rel-kets[seq,seq2]
  dump rel-kets[seq]
  
  rel-kets[seq]
  dump rel-kets[seq] |>
  dump
  history
  table[node,coeff] 100 similar-input[seq] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  table[node,coeff] 100 similar-input[seq2] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  .
  save history
  history
  
  table[node,coeff] 100 similar-input[seq] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  save history
  seq3 |node: 17: 1> => the |sp1>
  seq3 |node: 17: 2> => the |sp2>
  seq3 |node: 17: 3> => the |sp3>
  seq3 |node: 17: 4> => the |sp4>
  seq3 |node: 17: 5> => the |sp5>
  then |node: 17: *> => |the SP sequence>
  dump
  history
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  then drop-below[0.9] similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  history
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  dump
  history 1000
  
  
  save if-then-machine-learning-a-sequence.sw
  dump
  history
  debug on
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  debug off
  then drop-below[0.9] similar-input[seq3] pick[9] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  projection-example |*> #=> then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  projection-example
  projection-example
  projection-example
  projection-example
  projection-example
  .
  .
  .
  .
  .
  .
  .
  .
  history
  projection-example
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  pick[2] split |a b c d e>
  .
  .
  .
  .
  .
  history
  history 1000
  projection-example |*> #=> then drop-below[0.9] similar-input[seq3] pick[9] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  projection-example
  .
  .
  .
  projection-example |x>
  projection-example 0|x>
  .
  id
  h
  x = x
  id
  projection-example
  .
  history
  save history
  current |temperature> => |C: 25.2>
  current |temperature>
  F current |temperature>
  history
  dump
  context category theory
  f |a> => |b>
  f |b> => |c>
  g |a> => |b>
  g |b> => |c>
  g f |a>
  f g |a>
  history
  g f |a>
  f g |a>
  f |a> => 3.2 |b>
  f |a> = |x>
  g |x> => |b>
  g |a> => |y>
  f |y> => |b>
  history
  g f |a>
  f |a> => |x>
  g f |a>
  f g |a>
  history
  
  
  f |a> => 0.71 |b>
  f |b> => 0.71 |c>
  g |a> => 3.5 |b>
  g |b> => 3.5 |c>
  g f |a>
  f g |a>
  icontext
  dump
  split |sp1 sp2 sp3 sp4 sp5>
  pick-elt split |sp1 sp2 sp3 sp4 sp5>
  the |sp2>
  pick[9] the |sp2>
  similar-input[seq3] (4.74|x: 5> + 8.05|x: 1> + 14.833|x: 9> + 3.91|x: 7> + 4.543|x: 2> + 1.059|x: 6> + 11.074|x: 10> + 17.714|x: 8> + 3.443|x: 4>)
  drop-below[0.9] (0.826|node: 17: 2> + 0.692|node: 17: 1> + 0.663|node: 17: 4> + 0.526|node: 17: 3> + 0.512|node: 17: 5>)
  then |>
  history
  save history

2016-02-09
  current-time
  current-date
  day-of-the-week
  q

2016-02-09
  load fred-sam-friends.sw
  dump
  guess-ket |freddie>
  q

2016-02-09
  op |abcdefg>
  op |Abxyzuv>
  guess-ket |AB>
  dump
  op |abcdefg> => |z>
  op |Abxyzuv> => |z>
  dump
  guess-ket |ab>
  guess-ket[2] |ab>
  guess-ket[*] |ab>
  op |uvzabcpqr> => |z>
  guess-ket[2] |ab>
  guess-ket[*] |ab>
  dump exact
  q

2016-02-09
  the-age-of |Fred> => |age: 37>
  guess-operator[age]
  guess-operator[age] split |a b c d e>
  ag |Sam> => |age: 25>
  guess-operator[age]
  guess-operator[age,2]
  age |Rob> => |age: 19>
  guess-operator[age,2]
  guess-operators[age,3]
  guess-operator[age,3]
  guess-operator[age,*]
  dump
  q

2016-02-09
  the-age-of |Fred> => |age: 37>
  
  ag |Sam> => |age: 25>
  
  age |Rob> => |age: 19>
  
  dump
  guess-operator[age]
  guess-operator[age,*]
  apply(guess-operator[age],guess-ket |Freddie>)
  guess-ket |Freddie>
  apply(guess-operator[age] |>,guess-ket |Freddie>)
  dump
  apply(guess-operator[age] |>,guess-ket |robbie>)
  save history

2016-02-09
  rename-kets(|abScde>,|S>,|xSy>)
  q

2016-02-09
  rename-kets(|abScde>,|S>,|xSy>)
  rename-kets(|abScde>,|a> + |b>,|x> + |y>)
  rename-kets(|fred> + |sam> + |rob>,|r>,|R>)
  q

2016-02-09
  current-date
  day-of-the-week current-date
  current-time
  q

2016-02-10
  context week day if-then machines
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  day |node: 1: 1> => ngrams |Monday>
  then |node: 1: *> => |Tuesday>
  day |node: 2: 1> => ngrams |Tuesday>
  then |node: 2: *> => |Wednesday>
  history
  reset
    context week day if-then machines
    ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  
    day |node: 1: 1> => ngrams |Monday>
    then |node: 1: *> => |Tuesday>
  
    day |node: 2: 1> => ngrams |Tuesday>
    then |node: 2: *> => |Wednesday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    then |node: 3: *> => |Thursday>
  
    day |node: 4: 1> => ngrams |Thursday>
    then |node: 4: *> => |Friday>
  
    day |node: 5: 1> => ngrams |Friday>
    then |node: 5: *> => |Saturday>
  
    day |node: 6: 1> => ngrams |Saturday>
    then |node: 6: *> => |Sunday>
  
    day |node: 7: 1> => ngrams |Sunday>
    then |node: 7: *> => |Monday>
  
    tomorrow |*> #=> then drop-below[0.6] similar-input[day] ngrams |_self>
  
  
  dump
  tomorrow |tues>
  tomorrow |tuesday>
  tomorrow |Tuesday>
  lower-case |Tues>
  reset
    context week day if-then machines
    ngrams |*> #=> letter-ngrams[1,2,3] lower-case |_self>
  
    day |node: 1: 1> => ngrams |Monday>
    then |node: 1: *> => |Tuesday>
  
    day |node: 2: 1> => ngrams |Tuesday>
    then |node: 2: *> => |Wednesday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    then |node: 3: *> => |Thursday>
  
    day |node: 4: 1> => ngrams |Thursday>
    then |node: 4: *> => |Friday>
  
    day |node: 5: 1> => ngrams |Friday>
    then |node: 5: *> => |Saturday>
  
    day |node: 6: 1> => ngrams |Saturday>
    then |node: 6: *> => |Sunday>
  
    day |node: 7: 1> => ngrams |Sunday>
    then |node: 7: *> => |Monday>
  
    tomorrow |*> #=> then drop-below[0.6] similar-input[day] ngrams |_self>
  
  
  dump
  tomorrow |tues>
  tomorrow |tuesday>
  similar-input[day] ngrams |tues>
  similar-input[day] ngrams |tue>
  reset
    context week day if-then machines
    ngrams |*> #=> letter-ngrams[1,2,3] lower-case |_self>
  
    day |node: 1: 1> => ngrams |Monday>
    day |node: 1: 2> => ngrams |mon>
  
    then |node: 1: *> => |Tuesday>
  
    day |node: 2: 1> => ngrams |Tuesday>
    day |node: 2: 2> => ngrams |tue>
    then |node: 2: *> => |Wednesday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    day |node: 3: 2> => ngrams |wed>
    then |node: 3: *> => |Thursday>
  
    day |node: 4: 1> => ngrams |Thursday>
    day |node: 4: 2> => ngrams |thurs>
    then |node: 4: *> => |Friday>
  
    day |node: 5: 1> => ngrams |Friday>
    day |node: 5: 2> => ngrams |fri>
    then |node: 5: *> => |Saturday>
  
    day |node: 6: 1> => ngrams |Saturday>
    day |node: 6: 2> => ngrams |sat>
    then |node: 6: *> => |Sunday>
  
    day |node: 7: 1> => ngrams |Sunday>
    day |node: 7: 2> => ngrams |sun>
    then |node: 7: *> => |Monday>
  
    tomorrow |*> #=> then drop-below[0.6] similar-input[day] ngrams |_self>
  
  dump
  tomorrow |tue>
  tomorrow |tues>
  tomorrow^2 |tues>
  tomorrow^7 |tues>
  tomorrow |tues>
  tomorrow^2 |tues>
  tomorrow^5 |tues>
  tomorrow^6 |tues>
  tomorrow |Sunday>
  ket-simm(ngrams |Sunday>,ngrams |Monday>)
    tomorrow |*> #=> then drop-below[0.7] similar-input[day] ngrams |_self>
  tomorrow^7 |tues>
  tomorrow |tues>
  similar-input[day] |tues>
  similar-input[day] ngrams |tues>
    tomorrow |*> #=> then drop-below[0.65] similar-input[day] ngrams |_self>
  tomorrow |tues>
  tomorrow |mon>
  tomorrow |mondy>
  tomorrow |weds>
  tomorrow |wed>
  tomorrow |wedensday>
  tomorrow^7 |wedensday>
    day |node: 1: 1> => ngrams |Monday>
    day |node: 1: 2> => ngrams |mon>
    day |node: 1: 3> => ngrams |Mo>
    then |node: 1: *> => |Tuesday>
  
    day |node: 2: 1> => ngrams |Tuesday>
    day |node: 2: 2> => ngrams |tue>
    day |node: 2: 3> => ngrams |Tu>
    then |node: 2: *> => |Wednesday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    day |node: 3: 2> => ngrams |wed>
    day |node: 3: 3> => ngrams |We>
    then |node: 3: *> => |Thursday>
  
    day |node: 4: 1> => ngrams |Thursday>
    day |node: 4: 2> => ngrams |thurs>
    day |node: 4: 3> => ngrams |Th>
    then |node: 4: *> => |Friday>
  
    day |node: 5: 1> => ngrams |Friday>
    day |node: 5: 2> => ngrams |fri>
    day |node: 5: 3> => ngrams |Fr>
    then |node: 5: *> => |Saturday>
  
    day |node: 6: 1> => ngrams |Saturday>
    day |node: 6: 2> => ngrams |sat>
    day |node: 6: 3> => ngrams |Sa>
    then |node: 6: *> => |Sunday>
  
    day |node: 7: 1> => ngrams |Sunday>
    day |node: 7: 2> => ngrams |sun>
    day |node: 7: 3> => ngrams |Su>
    then |node: 7: *> => |Monday>
  
  tomorrow |Tu>
  tomorrow |Wed>
  tomorrow |t>
  dump
  current-date
  day-of-the-week current-date
  tomorrow day-of-the-week current-date
  history 1000
    day |node: 1: 1> => ngrams |Monday>
    day |node: 1: 2> => ngrams |mon>
    day |node: 1: 3> => ngrams |Mo>
    then |node: 1: *> => |Tuesday>
    previous |node: 1: *> => |Sunday>
   
    day |node: 2: 1> => ngrams |Tuesday>
    day |node: 2: 2> => ngrams |tue>
    day |node: 2: 3> => ngrams |Tu>
    then |node: 2: *> => |Wednesday>
    previous |node: 2: *> => |Monday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    day |node: 3: 2> => ngrams |wed>
    day |node: 3: 3> => ngrams |We>
    then |node: 3: *> => |Thursday>
    previous |node: 3: *> => |Tuesday>
  
    day |node: 4: 1> => ngrams |Thursday>
    day |node: 4: 2> => ngrams |thurs>
    day |node: 4: 3> => ngrams |Th>
    then |node: 4: *> => |Friday>
    previous |node: 4: *> => |Wednesday>
  
    day |node: 5: 1> => ngrams |Friday>
    day |node: 5: 2> => ngrams |fri>
    day |node: 5: 3> => ngrams |Fr>
    then |node: 5: *> => |Saturday>
    previous |node: 5: *> => |Thursday>
  
    day |node: 6: 1> => ngrams |Saturday>
    day |node: 6: 2> => ngrams |sat>
    day |node: 6: 3> => ngrams |Sa>
    then |node: 6: *> => |Sunday>
    previous |node: 6: *> => |Friday>
  
    day |node: 7: 1> => ngrams |Sunday>
    day |node: 7: 2> => ngrams |sun>
    day |node: 7: 3> => ngrams |Su>
    then |node: 7: *> => |Monday>
    previous |node: 7: *> => |Saturday>
  
    tomorrow |*> #=> then drop-below[0.65] similar-input[day] ngrams |_self>
    yesterday |*> #=> previous drop-below[0.65] similar-input[day] ngrams |_self>
  
  yesterday |monday>
  yesterday^7 |monday>
  yesterday |weds>
  tomorrow^2 |weds>
  yesterday tomorrow |wed>
  yesterday |Su>
  tomorrow |day>
  tomorrow |sday>
  tomorrow |esday>
  tomorrow |tues>
  tomorrow |weddy>
  tomorrow |weds>
  tomorrow |thursdy>
  tomorrow |thrus>
  tomorrow |thru>
  tomorrow |thrusday>
  current-date
  day-of-the-week current-date
  tomorrow day-of-the-week current-date
  tomorrow^2 day-of-the-week current-date
  tomorrow split |Sunday Thursday>
  save history

2016-02-11
  context week day if-then machines
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  day |node: 1: 1> => ngrams |Monday>
  then |node: 1: *> => |Tuesday>
  day |node: 2: 1> => ngrams |Tuesday>
  then |node: 2: *> => |Wednesday>
  history
  reset
    context week day if-then machines
    ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  
    day |node: 1: 1> => ngrams |Monday>
    then |node: 1: *> => |Tuesday>
  
    day |node: 2: 1> => ngrams |Tuesday>
    then |node: 2: *> => |Wednesday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    then |node: 3: *> => |Thursday>
  
    day |node: 4: 1> => ngrams |Thursday>
    then |node: 4: *> => |Friday>
  
    day |node: 5: 1> => ngrams |Friday>
    then |node: 5: *> => |Saturday>
  
    day |node: 6: 1> => ngrams |Saturday>
    then |node: 6: *> => |Sunday>
  
    day |node: 7: 1> => ngrams |Sunday>
    then |node: 7: *> => |Monday>
  
    tomorrow |*> #=> then drop-below[0.6] similar-input[day] ngrams |_self>
  
  
  dump
  tomorrow |tues>
  tomorrow |tuesday>
  tomorrow |Tuesday>
  lower-case |Tues>
  reset
    context week day if-then machines
    ngrams |*> #=> letter-ngrams[1,2,3] lower-case |_self>
  
    day |node: 1: 1> => ngrams |Monday>
    then |node: 1: *> => |Tuesday>
  
    day |node: 2: 1> => ngrams |Tuesday>
    then |node: 2: *> => |Wednesday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    then |node: 3: *> => |Thursday>
  
    day |node: 4: 1> => ngrams |Thursday>
    then |node: 4: *> => |Friday>
  
    day |node: 5: 1> => ngrams |Friday>
    then |node: 5: *> => |Saturday>
  
    day |node: 6: 1> => ngrams |Saturday>
    then |node: 6: *> => |Sunday>
  
    day |node: 7: 1> => ngrams |Sunday>
    then |node: 7: *> => |Monday>
  
    tomorrow |*> #=> then drop-below[0.6] similar-input[day] ngrams |_self>
  
  
  dump
  tomorrow |tues>
  tomorrow |tuesday>
  similar-input[day] ngrams |tues>
  similar-input[day] ngrams |tue>
  reset
    context week day if-then machines
    ngrams |*> #=> letter-ngrams[1,2,3] lower-case |_self>
  
    day |node: 1: 1> => ngrams |Monday>
    day |node: 1: 2> => ngrams |mon>
  
    then |node: 1: *> => |Tuesday>
  
    day |node: 2: 1> => ngrams |Tuesday>
    day |node: 2: 2> => ngrams |tue>
    then |node: 2: *> => |Wednesday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    day |node: 3: 2> => ngrams |wed>
    then |node: 3: *> => |Thursday>
  
    day |node: 4: 1> => ngrams |Thursday>
    day |node: 4: 2> => ngrams |thurs>
    then |node: 4: *> => |Friday>
  
    day |node: 5: 1> => ngrams |Friday>
    day |node: 5: 2> => ngrams |fri>
    then |node: 5: *> => |Saturday>
  
    day |node: 6: 1> => ngrams |Saturday>
    day |node: 6: 2> => ngrams |sat>
    then |node: 6: *> => |Sunday>
  
    day |node: 7: 1> => ngrams |Sunday>
    day |node: 7: 2> => ngrams |sun>
    then |node: 7: *> => |Monday>
  
    tomorrow |*> #=> then drop-below[0.6] similar-input[day] ngrams |_self>
  
  dump
  tomorrow |tue>
  tomorrow |tues>
  tomorrow^2 |tues>
  tomorrow^7 |tues>
  tomorrow |tues>
  tomorrow^2 |tues>
  tomorrow^5 |tues>
  tomorrow^6 |tues>
  tomorrow |Sunday>
  ket-simm(ngrams |Sunday>,ngrams |Monday>)
    tomorrow |*> #=> then drop-below[0.7] similar-input[day] ngrams |_self>
  tomorrow^7 |tues>
  tomorrow |tues>
  similar-input[day] |tues>
  similar-input[day] ngrams |tues>
    tomorrow |*> #=> then drop-below[0.65] similar-input[day] ngrams |_self>
  tomorrow |tues>
  tomorrow |mon>
  tomorrow |mondy>
  tomorrow |weds>
  tomorrow |wed>
  tomorrow |wedensday>
  tomorrow^7 |wedensday>
    day |node: 1: 1> => ngrams |Monday>
    day |node: 1: 2> => ngrams |mon>
    day |node: 1: 3> => ngrams |Mo>
    then |node: 1: *> => |Tuesday>
  
    day |node: 2: 1> => ngrams |Tuesday>
    day |node: 2: 2> => ngrams |tue>
    day |node: 2: 3> => ngrams |Tu>
    then |node: 2: *> => |Wednesday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    day |node: 3: 2> => ngrams |wed>
    day |node: 3: 3> => ngrams |We>
    then |node: 3: *> => |Thursday>
  
    day |node: 4: 1> => ngrams |Thursday>
    day |node: 4: 2> => ngrams |thurs>
    day |node: 4: 3> => ngrams |Th>
    then |node: 4: *> => |Friday>
  
    day |node: 5: 1> => ngrams |Friday>
    day |node: 5: 2> => ngrams |fri>
    day |node: 5: 3> => ngrams |Fr>
    then |node: 5: *> => |Saturday>
  
    day |node: 6: 1> => ngrams |Saturday>
    day |node: 6: 2> => ngrams |sat>
    day |node: 6: 3> => ngrams |Sa>
    then |node: 6: *> => |Sunday>
  
    day |node: 7: 1> => ngrams |Sunday>
    day |node: 7: 2> => ngrams |sun>
    day |node: 7: 3> => ngrams |Su>
    then |node: 7: *> => |Monday>
  
  tomorrow |Tu>
  tomorrow |Wed>
  tomorrow |t>
  dump
  current-date
  day-of-the-week current-date
  tomorrow day-of-the-week current-date
  history 1000
    day |node: 1: 1> => ngrams |Monday>
    day |node: 1: 2> => ngrams |mon>
    day |node: 1: 3> => ngrams |Mo>
    then |node: 1: *> => |Tuesday>
    previous |node: 1: *> => |Sunday>
   
    day |node: 2: 1> => ngrams |Tuesday>
    day |node: 2: 2> => ngrams |tue>
    day |node: 2: 3> => ngrams |Tu>
    then |node: 2: *> => |Wednesday>
    previous |node: 2: *> => |Monday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    day |node: 3: 2> => ngrams |wed>
    day |node: 3: 3> => ngrams |We>
    then |node: 3: *> => |Thursday>
    previous |node: 3: *> => |Tuesday>
  
    day |node: 4: 1> => ngrams |Thursday>
    day |node: 4: 2> => ngrams |thurs>
    day |node: 4: 3> => ngrams |Th>
    then |node: 4: *> => |Friday>
    previous |node: 4: *> => |Wednesday>
  
    day |node: 5: 1> => ngrams |Friday>
    day |node: 5: 2> => ngrams |fri>
    day |node: 5: 3> => ngrams |Fr>
    then |node: 5: *> => |Saturday>
    previous |node: 5: *> => |Thursday>
  
    day |node: 6: 1> => ngrams |Saturday>
    day |node: 6: 2> => ngrams |sat>
    day |node: 6: 3> => ngrams |Sa>
    then |node: 6: *> => |Sunday>
    previous |node: 6: *> => |Friday>
  
    day |node: 7: 1> => ngrams |Sunday>
    day |node: 7: 2> => ngrams |sun>
    day |node: 7: 3> => ngrams |Su>
    then |node: 7: *> => |Monday>
    previous |node: 7: *> => |Saturday>
  
    tomorrow |*> #=> then drop-below[0.65] similar-input[day] ngrams |_self>
    yesterday |*> #=> previous drop-below[0.65] similar-input[day] ngrams |_self>
  
  yesterday |monday>
  yesterday^7 |monday>
  yesterday |weds>
  tomorrow^2 |weds>
  yesterday tomorrow |wed>
  yesterday |Su>
  tomorrow |day>
  tomorrow |sday>
  tomorrow |esday>
  tomorrow |tues>
  tomorrow |weddy>
  tomorrow |weds>
  tomorrow |thursdy>
  tomorrow |thrus>
  tomorrow |thru>
  tomorrow |thrusday>
  current-date
  day-of-the-week current-date
  tomorrow day-of-the-week current-date
  tomorrow^2 day-of-the-week current-date
  tomorrow split |Sunday Thursday>
  save history
  tomorrow^7 |sun>
  tomorrow^7 |sunnie>
  minus[3] times-by[2] plus[12] |0>
  minus[3] times-by[2] plus[12] |1>
    context weekday if-then machines
    ngrams |*> #=> letter-ngrams[1,2,3] lower-case |_self>
  
    day |node: 1: 1> => ngrams |Monday>
    day |node: 1: 2> => ngrams |mon>
    day |node: 1: 3> => ngrams |Mo>
    previous |node: 1: *> => |Sunday>
    id |node: 1: *> => |Monday>
    next |node: 1: *> => |Tuesday>
   
    day |node: 2: 1> => ngrams |Tuesday>
    day |node: 2: 2> => ngrams |tue>
    day |node: 2: 3> => ngrams |Tu>
    previous |node: 2: *> => |Monday>
    id |node: 2: *> => |Tuesday>
    next |node: 2: *> => |Wednesday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    day |node: 3: 2> => ngrams |wed>
    day |node: 3: 3> => ngrams |We>
    previous |node: 3: *> => |Tuesday>
    id |node: 3: *> => |Wednesday>
    next |node: 3: *> => |Thursday>
  
    day |node: 4: 1> => ngrams |Thursday>
    day |node: 4: 2> => ngrams |thurs>
    day |node: 4: 3> => ngrams |Th>
    previous |node: 4: *> => |Wednesday>
    id |node: 4: *> => |Thursday>
    next |node: 4: *> => |Friday>
  
    day |node: 5: 1> => ngrams |Friday>
    day |node: 5: 2> => ngrams |fri>
    day |node: 5: 3> => ngrams |Fr>
    previous |node: 5: *> => |Thursday>
    id |node: 5: *> => |Friday>
    next |node: 5: *> => |Saturday>
  
    day |node: 6: 1> => ngrams |Saturday>
    day |node: 6: 2> => ngrams |sat>
    day |node: 6: 3> => ngrams |Sa>
    previous |node: 6: *> => |Friday>
    id |node: 6: *> => |Saturday>
    next |node: 6: *> => |Sunday>
  
    day |node: 7: 1> => ngrams |Sunday>
    day |node: 7: 2> => ngrams |sun>
    day |node: 7: 3> => ngrams |Su>
    previous |node: 7: *> => |Saturday>
    id |node: 7: *> => |Sunday>
    next |node: 7: *> => |Monday>
  
    yesterday |*> #=> previous drop-below[0.65] similar-input[day] ngrams |_self>
    today |*> #=> id drop-below[0.65] similar-input[day] ngrams |_self>
    tomorrow |*> #=> next drop-below[0.65] similar-input[day] ngrams |_self>
  
  dump
  context
  context weekday if-then machines
    ngrams |*> #=> letter-ngrams[1,2,3] lower-case |_self>
  
    day |node: 1: 1> => ngrams |Monday>
    day |node: 1: 2> => ngrams |mon>
    day |node: 1: 3> => ngrams |Mo>
    previous |node: 1: *> => |Sunday>
    id |node: 1: *> => |Monday>
    next |node: 1: *> => |Tuesday>
   
    day |node: 2: 1> => ngrams |Tuesday>
    day |node: 2: 2> => ngrams |tue>
    day |node: 2: 3> => ngrams |Tu>
    previous |node: 2: *> => |Monday>
    id |node: 2: *> => |Tuesday>
    next |node: 2: *> => |Wednesday>
  
    day |node: 3: 1> => ngrams |Wednesday>
    day |node: 3: 2> => ngrams |wed>
    day |node: 3: 3> => ngrams |We>
    previous |node: 3: *> => |Tuesday>
    id |node: 3: *> => |Wednesday>
    next |node: 3: *> => |Thursday>
  
    day |node: 4: 1> => ngrams |Thursday>
    day |node: 4: 2> => ngrams |thurs>
    day |node: 4: 3> => ngrams |Th>
    previous |node: 4: *> => |Wednesday>
    id |node: 4: *> => |Thursday>
    next |node: 4: *> => |Friday>
  
    day |node: 5: 1> => ngrams |Friday>
    day |node: 5: 2> => ngrams |fri>
    day |node: 5: 3> => ngrams |Fr>
    previous |node: 5: *> => |Thursday>
    id |node: 5: *> => |Friday>
    next |node: 5: *> => |Saturday>
  
    day |node: 6: 1> => ngrams |Saturday>
    day |node: 6: 2> => ngrams |sat>
    day |node: 6: 3> => ngrams |Sa>
    previous |node: 6: *> => |Friday>
    id |node: 6: *> => |Saturday>
    next |node: 6: *> => |Sunday>
  
    day |node: 7: 1> => ngrams |Sunday>
    day |node: 7: 2> => ngrams |sun>
    day |node: 7: 3> => ngrams |Su>
    previous |node: 7: *> => |Saturday>
    id |node: 7: *> => |Sunday>
    next |node: 7: *> => |Monday>
  
    yesterday |*> #=> previous drop-below[0.65] similar-input[day] ngrams |_self>
    today |*> #=> id drop-below[0.65] similar-input[day] ngrams |_self>
    tomorrow |*> #=> next drop-below[0.65] similar-input[day] ngrams |_self>
  dump
  context
  tomorrow |sun>
  tomorrow |tues>
  tomorrow^3 |tues>
  tomorrow yesterday |fri>
  yesterday |thurs>
  today |Sa>
  yesterday |thurs>
  yesterday |thursd>
  yesterday |thrusday>
  current-date
  current-time
  day-of-the-week current-date
  day-of-the-week |date: 2016-1-1>
  yesterday^3 day-of-the-week current-date
  extract-value day-of-the-week current-date
  yesterday^3 extract-value day-of-the-week current-date
  tomorrow^5 extract-value day-of-the-week current-date
  tomorrow^3 (|Monday> + |Tuesday> + |Saturday>)
  tomorrow^7 |tues>
  yesterday tomorrow |fri>
  tomorrow^7 |thurs>
  yesterday^21 |thurs>
  similar-input[day] ngrams |Monday>
  id similar-input[day] ngrams |Monday>
  id drop-below[0.6] similar-input[day] ngrams |Monday>
  dump
  save weekday-if-then-machines.sw
  dump
  exp-max[tomorrow] |Monday>
  dump
  day-after-tomorrow |*> #=> tomorrow^2 day-of-the-week current-date |>
  day-after-tomorrow |x>
  dump
  
  save weekday-if-then-machines.sw
  q

2016-02-12
  context simple image if-then machine
  
  image |node: 1: 1> => pixels |letter: H>
  image |node: 1: 2> => pixels |noisy: H>
  image |node: 1: 3> => pixels |noisy: H2>
  then |node: 1: *> => |letter H>
  
  image |node: 2: 1> => pixels |letter: I>
  image |node: 2: 2> => pixels |noisy: I>
  image |node: 2: 3> => pixels |noisy: I2>
  then |node: 2: *> => |letter I>
  
  image |node: 3: 1> => pixels |letter: O>
  then |node: 3: *> => |letter O>
  
  dump
  reset
  load H-I-pat-rec.sw
  dump
  image |node: 1: 1> => pixels |letter: H>
  image |node: 1: 2> => pixels |noisy: H>
  image |node: 1: 3> => pixels |noisy: H2>
  then |node: 1: *> => |letter H>
  
  image |node: 2: 1> => pixels |letter: I>
  image |node: 2: 2> => pixels |noisy: I>
  image |node: 2: 3> => pixels |noisy: I2>
  then |node: 2: *> => |letter I>
  
  image |node: 3: 1> => pixels |letter: O>
  then |node: 3: *> => |letter O>
  
  dump
  history
  the |list of images> => |node: 1: 1> + |node: 1: 2> + |node: 1: 3> + |node: 2: 1> + |node: 2: 2> + |node: 2: 3> + |node: 3: 1>
  
  similar-input[image] image pick-elt the |list of images>
  .
  .
  .
  .
  then select[1,1] similar-input[image] image pick-elt the |list of images>
  .
  .
  .
  .
  .
  .
  which-image |*> #=> then select[1,1] similar-input[image] image |_self>
  which-image |node: 2: 3>
  which-image |node: 1: 2>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image absolute-noise[1] |node: 1: 1>
  then select[1,1] similar-input[image] absolute-noise[1] image |node: 1: 1>
  then select[1,1] similar-input[image] absolute-noise[1] image |node: 2: 3>
  then select[1,1] similar-input[image] absolute-noise[3] image |node: 1: 2>
  then select[1,1] similar-input[image] absolute-noise[10] image |node: 1: 2>
  then select[1,1] similar-input[image] absolute-noise[30] image |node: 1: 2>
  dump
  which-image the |list of images>
  dump
  then select[1,1] similar-input[image] absolute-noise[30] image |node: 3: 1>
  save H-I-if-then-machine-example.sw
  save history

2016-02-14
  context simple image if-then machine
  
  image |node: 1: 1> => pixels |letter: H>
  image |node: 1: 2> => pixels |noisy: H>
  image |node: 1: 3> => pixels |noisy: H2>
  then |node: 1: *> => |letter H>
  
  image |node: 2: 1> => pixels |letter: I>
  image |node: 2: 2> => pixels |noisy: I>
  image |node: 2: 3> => pixels |noisy: I2>
  then |node: 2: *> => |letter I>
  
  image |node: 3: 1> => pixels |letter: O>
  then |node: 3: *> => |letter O>
  
  dump
  reset
  load H-I-pat-rec.sw
  dump
  image |node: 1: 1> => pixels |letter: H>
  image |node: 1: 2> => pixels |noisy: H>
  image |node: 1: 3> => pixels |noisy: H2>
  then |node: 1: *> => |letter H>
  
  image |node: 2: 1> => pixels |letter: I>
  image |node: 2: 2> => pixels |noisy: I>
  image |node: 2: 3> => pixels |noisy: I2>
  then |node: 2: *> => |letter I>
  
  image |node: 3: 1> => pixels |letter: O>
  then |node: 3: *> => |letter O>
  
  dump
  history
  the |list of images> => |node: 1: 1> + |node: 1: 2> + |node: 1: 3> + |node: 2: 1> + |node: 2: 2> + |node: 2: 3> + |node: 3: 1>
  
  similar-input[image] image pick-elt the |list of images>
  .
  .
  .
  .
  then select[1,1] similar-input[image] image pick-elt the |list of images>
  .
  .
  .
  .
  .
  .
  which-image |*> #=> then select[1,1] similar-input[image] image |_self>
  which-image |node: 2: 3>
  which-image |node: 1: 2>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image pick-elt the |list of images>
  which-image absolute-noise[1] |node: 1: 1>
  then select[1,1] similar-input[image] absolute-noise[1] image |node: 1: 1>
  then select[1,1] similar-input[image] absolute-noise[1] image |node: 2: 3>
  then select[1,1] similar-input[image] absolute-noise[3] image |node: 1: 2>
  then select[1,1] similar-input[image] absolute-noise[10] image |node: 1: 2>
  then select[1,1] similar-input[image] absolute-noise[30] image |node: 1: 2>
  dump
  which-image the |list of images>
  dump
  then select[1,1] similar-input[image] absolute-noise[30] image |node: 3: 1>
  save H-I-if-then-machine-example.sw
  save history
  history
  q

2016-02-15
  ngop |*> #=> letter-ngrams[1,2,3] |_self>
  ket-simm(ngop |university of adelaide>,ngop |adelaide university>)
  ket-simm(word-ngrams[1] |university of adelaide>,word-ngrams[1] |adelaide university>)
  history
  ngop |*> #=> letter-ngrams[1,2,3,4] |_self>
  ket-simm(ngop |university of adelaide>,ngop |adelaide university>)
  ngop |*> #=> letter-ngrams[1,2,3] |_self>
  ket-simm(ngop |captain picarrd>,ngop |captain jean-luc picarrd>)
  ket-simm(ngop |fred jones>,ngop |jones fred>)
  -- a note: letter-ngrams[1,2,3] does for text what we want to do for images. Break into component parts. I guess need an |image: 5: 5: AF352E4> data type or something, so we can pass image fragments around as superpositions.
  save history
  ket-simm(ngop |tough enough>,ngop |tough ain't enough>)
  invert how-many split |a b c>
  invert pop-float how-many split |a b c>
  save history
  dump
  ket-simm(ngop |donald trump>,ngop |trump>)
  history
  q

2016-02-17
  the-age-of |Fred> => |age: 27>
  the-age-of |Frank> => |age: 33>
  the-age-of |Robert> => |age: 29>
  the-age-of |Rob> => |age: 31>
  dump
  guess-ket |freddie>
  guess-ket[*] |freddie>
  guess-operator[age]
  apply(guess-operator[age] |>,guess-ket |roberto>)
  guess-ket |roberto>
  mod[2] |4>
  is-mod-2 |*> #=> is-mod[2] |_self>
  such-that[is-mod-2] range(|1>,|15>)
  such-that[is-mod[2]] range(|1>,|15>)
  history
  q

2016-02-17
  process-catalytic-reaction(|x>,|a> + |b>,|c>)
  process-catalytic-reaction(split |a b x y>,split |a b>,|FISH!>)
  q

2016-02-19
  the-friends-of |Fred> => 2|Sam> + |Max>
  age |Sam> => 3|age: 33>
  age the-friends-of |Fred>
  history
  context if-then machine
  seq |node 1: 1> => |X>
  seq |node 1: 2> => |Y>
  seq |node 1: 3> => |X> + |Y>
  then |node 1: *> => |X or Y>
  seq |node 2: 1> = |X> + |Y>
  then |node 2: *> => |X and Y>
  dump
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  history
  seq |node 2: 1> => |X> + |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  dump
  save simple-if-then-machine.sw
  shout |fish> + |x>
  then drop-below[0.8] similar-input[seq] |Z>
  dump
  rel-kets[seq]
  seq |node 3: 1> => |X> + |Y> + |Z>
  then |node 3: *> => |X and Y and Z>
  dump
  similar-input[seq] |Y>
  similar-input[seq] (|X> + |Y>)
  similar-input[seq] (|X> + |Y> + |Z>)
  drop-below[0.8] similar-input[seq] |Y>
  drop-below[0.8] similar-input[seq] (|X> + |Y>)
  drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  then drop-below[0.8] similar-input[seq] |x>
  then drop-below[0.8] similar-input[seq] |X>
  then drop-below[0.8] similar-input[seq] |Y>
  then drop-below[0.8] similar-input[seq] |Z>
  then drop-below[0.8] similar-input[seq] (|X> + |Y>)
  then drop-below[0.8] similar-input[seq] (|X> + |Y> + |Z>)
  rel-kets[seq]
  history
  save history
  then drop-below[0.6] similar-input[seq] |X>
  then drop-below[0.6] similar-input[seq] |Y>
  then drop-below[0.6] similar-input[seq] |Z>
  then drop-below[0.6] similar-input[seq] (|X> + |Y>)
  then drop-below[0.6] similar-input[seq] (|X> + |Y> + |Z>)
  save history
  dump
  save simple-if-then-machine.sw
  context play
  seq |node 1> => letter-ngrams[1,2,3] |the man on the moon>
  then |node 1> => |the man on the moon>
  dump
  then similar-input[seq] letter-ngrams[1,2,3] |the man>
  then similar-input[seq] letter-ngrams[1,2,3] |the man on>
  save history
  context bigger if-then machine
  ngrams |*> #=> letter-ngrams[1,2,3] |_self>
  seq |node 1> => ngrams |the cat sat on the mat>
  then |node 1> => |the cat sat on the mat>
  seq |node 2> => ngrams |the man on the moon>
  then |node 2> => |the man on the moon>
  then similar-input[seq] ngrams |the >
  then similar-input[seq] ngrams |the cat>
  then similar-input[seq] ngrams |the cat sat>
  then similar-input[seq] ngrams |the cat sat on the>
  then similar-input[seq] ngrams |the cat sat on the moon>
  then similar-input[seq] ngrams |the man on the>
  save history
  history
  dump
  then similar-input[seq] ngrams |the cat sat on the mat>
  then similar-input[seq] ngrams |the man on the moon>
  guess-phrase |*> #=> then similar-input[seq] ngrams |_self>
  guess-phrase |the >
  guess-phrase |the cat>
  guess-phrase |the cat sat>
  guess-phrase |the cat sat on the>
  guess-phrase |the cat sat on the moon>
  guess-phrase |the man on the>
  guess-phrase |the cat sat on the mat>
  guess-phrase |the man on the moon>
  save history
  context if-then machine learning a sequence
  -- define our superpositions:
  the |sp1> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[5] 0 range(|x: 1>,|x: 10>)
  -- define our if-then machines:
  seq |node 1: 1> => the |sp1>
  then |node 1: *> => the |sp2>
  
  seq |node 2: 1> => the |sp2>
  then |node 2: *> => the |sp3>
  
  seq |node 3: 1> => the |sp3>
  then |node 3: *> => the |sp4>
  
  seq |node 4: 1> => the |sp4>
  then |node 4: *> => the |sp5>
  
  seq |node 5: 1> => the |sp5>
  then |node 5: *> => |the finish line>
  dump
  -- see what we have:
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  context
  context fixed if-then machine learning a sequence
  history
  -- define our superpositions:
  the |sp1> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp2> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp3> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp4> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  the |sp5> => absolute-noise[20] 0 range(|x: 1>,|x: 10>)
  
  seq |node: 1: 1> => the |sp1>
  then |node: 1: *> => the |sp2>
  
  seq |node: 2: 1> => the |sp2>
  then |node: 2: *> => the |sp3>
  
  seq |node: 3: 1> => the |sp3>
  then |node: 3: *> => the |sp4>
  
  seq |node: 4: 1> => the |sp4>
  then |node: 4: *> => the |sp5>
  
  seq |node: 5: 1> => the |sp5>
  then |node: 5: *> => |the finish line>
  
  the |input> => the |sp1>
  table[node,coeff] 100 similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  table[node,coeff] 100 similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] then drop-below[0.9] similar-input[seq] the |input>
  dump
  .
  
  dump
  history
  history 1000
  
  seq2 |node: 1: 1> => absolute-noise[1] the |sp1>
  seq2 |node: 2: 1> => absolute-noise[1] the |sp2>
  seq2 |node: 3: 1> => absolute-noise[1] the |sp3>
  seq2 |node: 4: 1> => absolute-noise[1] the |sp4>
  seq2 |node: 5: 1> => absolute-noise[1] the |sp5>
  history
  history
    table[node,coeff] 100 similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
    table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] then drop-below[0.9] similar-input[seq2] the |input>
  dump
  table[node,coeff] 100 similar-input[seq2] absolute-noise[1] the |input>
  .
  save history
  context
  save if-then-machine-learning-a-sequence.sw
  dump
  table[node,coeff] 100 similar-input[seq1] then clean drop-below[0.9] similar-input[seq2] the |input>
  table[node,coeff] 100 similar-input[seq2] then clean drop-below[0.9] similar-input[seq2] the |input>
  history
  save history
  dump
  rel-kets[seq,seq2]
  dump rel-kets[seq]
  
  rel-kets[seq]
  dump rel-kets[seq] |>
  dump
  history
  table[node,coeff] 100 similar-input[seq] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  table[node,coeff] 100 similar-input[seq2] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  .
  save history
  history
  
  table[node,coeff] 100 similar-input[seq] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  save history
  seq3 |node: 17: 1> => the |sp1>
  seq3 |node: 17: 2> => the |sp2>
  seq3 |node: 17: 3> => the |sp3>
  seq3 |node: 17: 4> => the |sp4>
  seq3 |node: 17: 5> => the |sp5>
  then |node: 17: *> => |the SP sequence>
  dump
  history
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  then drop-below[0.9] similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  table[node,coeff] 100 similar-input[seq3] absolute-noise[5] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  history
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  dump
  history 1000
  
  
  save if-then-machine-learning-a-sequence.sw
  dump
  history
  debug on
  then drop-below[0.9] similar-input[seq3] absolute-noise[10] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  debug off
  then drop-below[0.9] similar-input[seq3] pick[9] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  .
  .
  .
  .
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  projection-example |*> #=> then drop-below[0.9] similar-input[seq3] pick[8] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  projection-example
  projection-example
  projection-example
  projection-example
  projection-example
  .
  .
  .
  .
  .
  .
  .
  .
  history
  projection-example
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  .
  pick[2] split |a b c d e>
  .
  .
  .
  .
  .
  history
  history 1000
  projection-example |*> #=> then drop-below[0.9] similar-input[seq3] pick[9] the pick-elt split |sp1 sp2 sp3 sp4 sp5>
  projection-example
  .
  .
  .
  projection-example |x>
  projection-example 0|x>
  .
  id
  h
  x = x
  id
  projection-example
  .
  history
  save history
  current |temperature> => |C: 25.2>
  current |temperature>
  F current |temperature>
  history
  dump
  context category theory
  f |a> => |b>
  f |b> => |c>
  g |a> => |b>
  g |b> => |c>
  g f |a>
  f g |a>
  history
  g f |a>
  f g |a>
  f |a> => 3.2 |b>
  f |a> = |x>
  g |x> => |b>
  g |a> => |y>
  f |y> => |b>
  history
  g f |a>
  f |a> => |x>
  g f |a>
  f g |a>
  history
  
  
  f |a> => 0.71 |b>
  f |b> => 0.71 |c>
  g |a> => 3.5 |b>
  g |b> => 3.5 |c>
  g f |a>
  f g |a>
  icontext
  dump
  split |sp1 sp2 sp3 sp4 sp5>
  pick-elt split |sp1 sp2 sp3 sp4 sp5>
  the |sp2>
  pick[9] the |sp2>
  similar-input[seq3] (4.74|x: 5> + 8.05|x: 1> + 14.833|x: 9> + 3.91|x: 7> + 4.543|x: 2> + 1.059|x: 6> + 11.074|x: 10> + 17.714|x: 8> + 3.443|x: 4>)
  drop-below[0.9] (0.826|node: 17: 2> + 0.692|node: 17: 1> + 0.663|node: 17: 4> + 0.526|node: 17: 3> + 0.512|node: 17: 5>)
  then |>
  history
  save history
  to-comma-number times-by[18] |number: 75>
  select[1,2] |x>
  q

2016-02-19
  load weekday-if-then-machines.sw
  dump
  rel-kets[id]
  is-a |*> => |day of the week>
  map[is-a] rel-kets[id]
  dump
  dump |*> 
  is-a |*> #=> is-a select[1,1] similar-input[day] ngrams |_self>
  is-a |tues>
  is-a |Su>
  dump
  dump |*> 
  ngrams |*> #=> letter-ngrams[1,2,3] lower-case extract-value |_self>
  day-after-tomorrow |>
  dump |*> 
  history
  save weekday-if-then-machines-v2.sw
  dump
  history
  save history

2016-02-19
  load weekday-if-then-machines.sw
  dump
  rel-kets[id]
  is-a |*> => |day of the week>
  map[is-a] rel-kets[id]
  dump
  dump |*> 
  is-a |*> #=> is-a select[1,1] similar-input[day] ngrams |_self>
  is-a |tues>
  is-a |Su>
  dump
  dump |*> 
  ngrams |*> #=> letter-ngrams[1,2,3] lower-case extract-value |_self>
  day-after-tomorrow |>
  dump |*> 
  history
  save weekday-if-then-machines-v2.sw
  dump
  history
  save history
  context testing
  op 3|x> => |y>
  dump
  q

2016-02-21
  load fred-sam-friends.sw
  dump
  apply-person-type |*> #=> merge-labels(|person: > + |_self>)
  apply-person-type friends |Fred>
  new-friends apply-person-type |Fred> => apply-person-type friends |Fred>
  dump
  change-type |*> #=> merge-labels(|P: > + extract-value |_self>)
  change-type new-friends |person: Fred>
  history
  new-friends-2 change-type |person: Fred> => change-type friends |person: Fred>
  dump
  history
  new-friends-2 change-type |person: Fred> => change-type new-friends |person: Fred>
  dump
  ket-simm(letter-ngrams[1,2,3] |John Watson>,letter-ngrams[1,2,3] |Joan Watson>)
  ket-simm(letter-ngrams[1,2,3] |caturday>,letter-ngrams[1,2,3] |saturday>)
  history
  save history

2016-02-23
  load fred-sam-friends.sw
  dump
  apply-person-type |*> #=> merge-labels(|person: > + |_self>)
  apply-person-type friends |Fred>
  new-friends apply-person-type |Fred> => apply-person-type friends |Fred>
  dump
  change-type |*> #=> merge-labels(|P: > + extract-value |_self>)
  change-type new-friends |person: Fred>
  history
  new-friends-2 change-type |person: Fred> => change-type friends |person: Fred>
  dump
  history
  new-friends-2 change-type |person: Fred> => change-type new-friends |person: Fred>
  dump
  ket-simm(letter-ngrams[1,2,3] |John Watson>,letter-ngrams[1,2,3] |Joan Watson>)
  ket-simm(letter-ngrams[1,2,3] |caturday>,letter-ngrams[1,2,3] |saturday>)
  history
  save history
  measure-currency split |a b c>
  clean 3|x>
  clean -2|x>
  clean 0|x>
  3.7 (2|a> + 0.3|b> + |c> + 11.1|d>)
  history
  ket-simm(letter-ngrams[1,2,3] |John Watson>,letter-ngrams[1,2,3] |Joan Watson>)
  ket-simm(3.141592 letter-ngrams[1,2,3] |John Watson>,letter-ngrams[1,2,3] |Joan Watson>)
  C |F: 310>
  7 |x>
  3.1415|x>
  5/7 |x>
  5.2/7.3 |x>
  clean 3 |x>
  clean^5 3 |x>
  3.2|x> + 7.1|x>
  do-you-know |>
  do-you-know 0|x>
  how-many 0|x>
  |x> + -|x>
  drop (|x> + -|x>)
  history
  q

2016-02-24
  factor |number: 35>
  factor |number: 9999911>
  factor |number: 149>
  age |person: George> => |age: 29>
  dob |person: George> => |date: 1984-05-23>
  hair-colour |person: George> => |hair-colour: brown>
  eye-colour |person: George> => |eye-colour: blue>
  gender |person: George> => |gender: male>
  height |person: George> => |height: cm: 176>
  wife |person: George> => |person: Beth>
  occupation |person: George> => |occupation: car salesman>
  friends |person: George> => |person: Fred> + |person: Jane> + |person: Liz> + |person: Andrew>
  mother |person: George> => |person: Sarah>
  father |person: George> => |person: David>
  sisters |person: George> => |person: Emily>
  brothers |person: George> => |person: Frank> + |person: Tim> + |person: Sam>
  email |person: George> => |email: george.douglas@gmail.com>
  education |person: George> => |education: high-school> 
  dump
  age |person: George>
  occupation |person: George>
  friends |person: George>
  dump exact
  supported-ops |person: George>
  apply(|fish>,|person: George>)
  load fred-sam-friends.sw
  dump
  context
  apply(|op: friends>,split |Fred Sam>)
  icontext
  apply(|op: age> + |op: dob> + |op: height>,|person: George>)
  apply(|cat> + |dog>,|person: George>)
  apply(|op: C>,|F: 20>)
  foo-op |a>
  op |b>
  op |b> #=> |>
  op |b>
  dump
  q

2016-02-25
  op |a> => |x> + |y> + |z>
  op |a>
  op |a> +=> |x> + |z> + |u> + |w>
  op |a>
  history
  reset
  op |a> => |x> + |y> + |z>
  op |a> => op |a> + |x> + |z> + |u> + |w>
  op |a>
  op |a> => |start value>
  value |r1> => op |a>
  value |r2> #=> op |a>
  value |r1>
  value |r2>
  op |a> => |second value>
  value |r1>
  value |r2>
  is-alive |Schrodinger's cat> !=> weighted-pick-elt (|yes> + |no>)
  dump
  reset
  is-alive |Schrodinger's cat> !=> weighted-pick-elt (|yes> + |no>)
  dump
  is-alive |Schrodinger's cat>
  dump
  op |person: *> #=> |_self>
  op |person: Fred>
  [Bis-living-organism |plant> => |yes>
  is-living-organism |plant: *> => |yes>
  is-living-organism |plant: tree>
  is-living-organism |plant: tree: elm>
  is-living-organism |plant: tree: oak: the one next to my house>
  is-living-organism |plant: shrub>
  id |*> #=> |_self>
  id |x>
  id |foo: bah>
  context
  context george
  age |person: George> => |age: 29>
  dob |person: George> => |date: 1984-05-23>
  hair-colour |person: George> => |hair-colour: brown>
  eye-colour |person: George> => |eye-colour: blue>
  gender |person: George> => |gender: male>
  height |person: George> => |height: cm: 176>
  wife |person: George> => |person: Beth>
  occupation |person: George> => |occupation: car salesman>
  friends |person: George> => |person: Fred> + |person: Jane> + |person: Liz> + |person: Andrew>
  mother |person: George> => |person: Sarah>
  father |person: George> => |person: David>
  sisters |person: George> => |person: Emily>
  brothers |person: George> => |person: Frank> + |person: Tim> + |person: Sam>
  email |person: George> => |email: george.douglas@gmail.com>
  education |person: George> => |education: high-school> 
  everything-you-know-about |*> #=> apply(supported-ops |_self>,|_self>
  everything-you-know-about |person: George>
  everything-you-know-about |*> #=> apply(supported-ops |_self>,|_self>)
  everything-you-know-about |person: George>
  everything-you-know-about |person: George>
  supported-ops |person: George>
  the-list-of-interesting-operators |*> => |op: age> + |op: dob> + |op: height> + |op: gender> + |op: occupation>
  interesting-things-you-know-about |*> #=> apply(the-list-of-interesting-operators |_self>,|_self>)
  interesting-things-you-know-about |person: George>
  dump
  icontext
  identity-element |*> #=> id |_self>
  the-identity-element |*> #=> id |_self>
  icontextr
  icontext
  guess-operator |george>
  guess-ket |george>
  interesting-things-you-know-about guess-ket |george>
  guess-operator[interesting-things-about] guess-ket |george>
  apply(guess-operator[interesting-things-about] |>, guess-ket |george>)
  save history

2016-02-25
  op |a> => |x> + |y> + |z>
  op |a>
  op |a> +=> |x> + |z> + |u> + |w>
  op |a>
  history
  reset
  op |a> => |x> + |y> + |z>
  op |a> => op |a> + |x> + |z> + |u> + |w>
  op |a>
  op |a> => |start value>
  value |r1> => op |a>
  value |r2> #=> op |a>
  value |r1>
  value |r2>
  op |a> => |second value>
  value |r1>
  value |r2>
  is-alive |Schrodinger's cat> !=> weighted-pick-elt (|yes> + |no>)
  dump
  reset
  is-alive |Schrodinger's cat> !=> weighted-pick-elt (|yes> + |no>)
  dump
  is-alive |Schrodinger's cat>
  dump
  op |person: *> #=> |_self>
  op |person: Fred>
  [Bis-living-organism |plant> => |yes>
  is-living-organism |plant: *> => |yes>
  is-living-organism |plant: tree>
  is-living-organism |plant: tree: elm>
  is-living-organism |plant: tree: oak: the one next to my house>
  is-living-organism |plant: shrub>
  id |*> #=> |_self>
  id |x>
  id |foo: bah>
  context
  context george
  age |person: George> => |age: 29>
  dob |person: George> => |date: 1984-05-23>
  hair-colour |person: George> => |hair-colour: brown>
  eye-colour |person: George> => |eye-colour: blue>
  gender |person: George> => |gender: male>
  height |person: George> => |height: cm: 176>
  wife |person: George> => |person: Beth>
  occupation |person: George> => |occupation: car salesman>
  friends |person: George> => |person: Fred> + |person: Jane> + |person: Liz> + |person: Andrew>
  mother |person: George> => |person: Sarah>
  father |person: George> => |person: David>
  sisters |person: George> => |person: Emily>
  brothers |person: George> => |person: Frank> + |person: Tim> + |person: Sam>
  email |person: George> => |email: george.douglas@gmail.com>
  education |person: George> => |education: high-school> 
  everything-you-know-about |*> #=> apply(supported-ops |_self>,|_self>
  everything-you-know-about |person: George>
  everything-you-know-about |*> #=> apply(supported-ops |_self>,|_self>)
  everything-you-know-about |person: George>
  everything-you-know-about |person: George>
  supported-ops |person: George>
  the-list-of-interesting-operators |*> => |op: age> + |op: dob> + |op: height> + |op: gender> + |op: occupation>
  interesting-things-you-know-about |*> #=> apply(the-list-of-interesting-operators |_self>,|_self>)
  interesting-things-you-know-about |person: George>
  dump
  icontext
  identity-element |*> #=> id |_self>
  the-identity-element |*> #=> id |_self>
  icontextr
  icontext
  guess-operator |george>
  guess-ket |george>
  interesting-things-you-know-about guess-ket |george>
  guess-operator[interesting-things-about] guess-ket |george>
  apply(guess-operator[interesting-things-about] |>, guess-ket |george>)
  save history
  dump
  relevant-kets[age]
  context filters
  the |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: table> + |number: 5573>
  
  Define some filters:
  -- the general rule is that our filters return the empty ket, also known as the superposition identity element:
  number-filter |*> #=> |>
  furniture-filter |*> #=> |>
  animal-filter |*> #=> |>
  animal-number-filter |*> #=> |>
  
  -- now define specific exceptions to the general rules:
  number-filter |number: *> #=> |_self>
  animal-number-filter |number: *> #=> |_self>
  furniture-filter |furniture: *> #=> |_self>
  animal-filter |animal: *> #=> |_self>
  animal-number-filter |animal: *> #=> |_self>
  dump
  number-filter the |list>
  furniture-filter the |list>
  animal-filter the |list>
  animal-number-filter the |list>
  h
  history
  save history

2016-02-27
  op |a> => |x> + |y> + |z>
  op |a>
  op |a> +=> |x> + |z> + |u> + |w>
  op |a>
  history
  reset
  op |a> => |x> + |y> + |z>
  op |a> => op |a> + |x> + |z> + |u> + |w>
  op |a>
  op |a> => |start value>
  value |r1> => op |a>
  value |r2> #=> op |a>
  value |r1>
  value |r2>
  op |a> => |second value>
  value |r1>
  value |r2>
  is-alive |Schrodinger's cat> !=> weighted-pick-elt (|yes> + |no>)
  dump
  reset
  is-alive |Schrodinger's cat> !=> weighted-pick-elt (|yes> + |no>)
  dump
  is-alive |Schrodinger's cat>
  dump
  op |person: *> #=> |_self>
  op |person: Fred>
  [Bis-living-organism |plant> => |yes>
  is-living-organism |plant: *> => |yes>
  is-living-organism |plant: tree>
  is-living-organism |plant: tree: elm>
  is-living-organism |plant: tree: oak: the one next to my house>
  is-living-organism |plant: shrub>
  id |*> #=> |_self>
  id |x>
  id |foo: bah>
  context
  context george
  age |person: George> => |age: 29>
  dob |person: George> => |date: 1984-05-23>
  hair-colour |person: George> => |hair-colour: brown>
  eye-colour |person: George> => |eye-colour: blue>
  gender |person: George> => |gender: male>
  height |person: George> => |height: cm: 176>
  wife |person: George> => |person: Beth>
  occupation |person: George> => |occupation: car salesman>
  friends |person: George> => |person: Fred> + |person: Jane> + |person: Liz> + |person: Andrew>
  mother |person: George> => |person: Sarah>
  father |person: George> => |person: David>
  sisters |person: George> => |person: Emily>
  brothers |person: George> => |person: Frank> + |person: Tim> + |person: Sam>
  email |person: George> => |email: george.douglas@gmail.com>
  education |person: George> => |education: high-school> 
  everything-you-know-about |*> #=> apply(supported-ops |_self>,|_self>
  everything-you-know-about |person: George>
  everything-you-know-about |*> #=> apply(supported-ops |_self>,|_self>)
  everything-you-know-about |person: George>
  everything-you-know-about |person: George>
  supported-ops |person: George>
  the-list-of-interesting-operators |*> => |op: age> + |op: dob> + |op: height> + |op: gender> + |op: occupation>
  interesting-things-you-know-about |*> #=> apply(the-list-of-interesting-operators |_self>,|_self>)
  interesting-things-you-know-about |person: George>
  dump
  icontext
  identity-element |*> #=> id |_self>
  the-identity-element |*> #=> id |_self>
  icontextr
  icontext
  guess-operator |george>
  guess-ket |george>
  interesting-things-you-know-about guess-ket |george>
  guess-operator[interesting-things-about] guess-ket |george>
  apply(guess-operator[interesting-things-about] |>, guess-ket |george>)
  save history
  dump
  relevant-kets[age]
  context filters
  the |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: table> + |number: 5573>
  
  Define some filters:
  -- the general rule is that our filters return the empty ket, also known as the superposition identity element:
  number-filter |*> #=> |>
  furniture-filter |*> #=> |>
  animal-filter |*> #=> |>
  animal-number-filter |*> #=> |>
  
  -- now define specific exceptions to the general rules:
  number-filter |number: *> #=> |_self>
  animal-number-filter |number: *> #=> |_self>
  furniture-filter |furniture: *> #=> |_self>
  animal-filter |animal: *> #=> |_self>
  animal-number-filter |animal: *> #=> |_self>
  dump
  number-filter the |list>
  furniture-filter the |list>
  animal-filter the |list>
  animal-number-filter the |list>
  h
  history
  save history
  is-a-number |*> => |no>
  is-a-number |number: *> => |yes>
  dump
  is-a-number the |list>
  is-an-animal |*> => |no>
  is-an-animal |animal: *> => |yes>
  is-an-animal the |list>
  is-a-number the |list>
  is-a-number number-filter the |list>
  is-an-animal animal-filter the |list>
  how-many number-filter the |list>
  how-many animal-filter the |list>
  how-many animal-number-filter the |list>
  abs -3 |x>
  set-to[5] -7.2 |x>
  NOT 0|x>
  not 0|x>
  clean (3|a> + |b> + -2.7|c> + 38762|d> + -5.55|e> + |f>)
  threshold-filter[2] (3|a> + |b> + -2.7|c> + 38762|d> + -5.55|e> + |f>)
  drop clean (3|a> + |b> + -2.7|c> + 38762|d> + -5.55|e> + |f>)
  drop (3|a> + |b> + -2.7|c> + 38762|d> + -5.55|e> + |f>)
  history
  save history

2016-02-28
  age |person: George> => |age: 29>
  dob |person: George> => |date: 1984-05-23>
  hair-colour |person: George> => |hair-colour: brown>
  eye-colour |person: George> => |eye-colour: blue>
  gender |person: George> => |gender: male>
  height |person: George> => |height: cm: 176>
  wife |person: George> => |person: Beth>
  occupation |person: George> => |occupation: car salesman>
  friends |person: George> => |person: Fred> + |person: Jane> + |person: Liz> + |person: Andrew>
  mother |person: George> => |person: Sarah>
  father |person: George> => |person: David>
  sisters |person: George> => |person: Emily>
  brothers |person: George> => |person: Frank> + |person: Tim> + |person: Sam>
  email |person: George> => |email: george.douglas@gmail.com>
  education |person: George> => |education: high-school> 
  dump
  the-list-of-interesting-operators |*> => |op: age> + |op: dob> + |op: height> + |op: gender> + |op: occupation>
  the-list-of-interesting-operators |Robert> => |op: mother> + |op: father>
  interesting-things-you-know-about |*> #=> apply(the-list-of-interesting-operators |_self>,|_self>)
  interesting-things-you-know-about |person: George>
  mother |Robert> => |Emma>
  father |Robert> => |Richard>
  interesting-things-you-know-about |Robert>
  dump
  context qm
  measure |quantum system> !=> weighted-pick-elt normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  dump
  measure |quantum system>
  measure |quantum system> !=> normalize weighted-pick-elt normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  measure |quantum system>
  dump
  history
  normalized |superposition> => normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  measure |quantum system> !=> normalize weighted-pick-elt normalized |superposition>
  dump
  measure |quantum system>
  history
  save history

2016-03-01
  age |person: George> => |age: 29>
  dob |person: George> => |date: 1984-05-23>
  hair-colour |person: George> => |hair-colour: brown>
  eye-colour |person: George> => |eye-colour: blue>
  gender |person: George> => |gender: male>
  height |person: George> => |height: cm: 176>
  wife |person: George> => |person: Beth>
  occupation |person: George> => |occupation: car salesman>
  friends |person: George> => |person: Fred> + |person: Jane> + |person: Liz> + |person: Andrew>
  mother |person: George> => |person: Sarah>
  father |person: George> => |person: David>
  sisters |person: George> => |person: Emily>
  brothers |person: George> => |person: Frank> + |person: Tim> + |person: Sam>
  email |person: George> => |email: george.douglas@gmail.com>
  education |person: George> => |education: high-school> 
  dump
  the-list-of-interesting-operators |*> => |op: age> + |op: dob> + |op: height> + |op: gender> + |op: occupation>
  the-list-of-interesting-operators |Robert> => |op: mother> + |op: father>
  interesting-things-you-know-about |*> #=> apply(the-list-of-interesting-operators |_self>,|_self>)
  interesting-things-you-know-about |person: George>
  mother |Robert> => |Emma>
  father |Robert> => |Richard>
  interesting-things-you-know-about |Robert>
  dump
  context qm
  measure |quantum system> !=> weighted-pick-elt normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  dump
  measure |quantum system>
  measure |quantum system> !=> normalize weighted-pick-elt normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  measure |quantum system>
  dump
  history
  normalized |superposition> => normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  measure |quantum system> !=> normalize weighted-pick-elt normalized |superposition>
  dump
  measure |quantum system>
  history
  save history
  measure |quantum system> !=> normalize weighted-pick-elt normalized |superposition>
  measure |quantum system>
  history
  context simple QM measurement system
  normalized |superposition> => normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  measure |quantum system> !=> normalize weighted-pick-elt normalized |superposition>
  dump
  history
  dump
  measure |quantum system>
  dump
  context for all x
  has-some-property |X: *> => |yes>
  has-some-property |X: y> => |no>
  has-some-property |X: z> => |no>
  dump
  the |list> => |X: a> + 2.3|X: b> + |X: c> + |X: x> + |X: y> + |X: z>
  the |list>
  such-that[has-some-property] the |list>
  history
  save history

2016-03-02
  age |person: George> => |age: 29>
  dob |person: George> => |date: 1984-05-23>
  hair-colour |person: George> => |hair-colour: brown>
  eye-colour |person: George> => |eye-colour: blue>
  gender |person: George> => |gender: male>
  height |person: George> => |height: cm: 176>
  wife |person: George> => |person: Beth>
  occupation |person: George> => |occupation: car salesman>
  friends |person: George> => |person: Fred> + |person: Jane> + |person: Liz> + |person: Andrew>
  mother |person: George> => |person: Sarah>
  father |person: George> => |person: David>
  sisters |person: George> => |person: Emily>
  brothers |person: George> => |person: Frank> + |person: Tim> + |person: Sam>
  email |person: George> => |email: george.douglas@gmail.com>
  education |person: George> => |education: high-school> 
  dump
  the-list-of-interesting-operators |*> => |op: age> + |op: dob> + |op: height> + |op: gender> + |op: occupation>
  the-list-of-interesting-operators |Robert> => |op: mother> + |op: father>
  interesting-things-you-know-about |*> #=> apply(the-list-of-interesting-operators |_self>,|_self>)
  interesting-things-you-know-about |person: George>
  mother |Robert> => |Emma>
  father |Robert> => |Richard>
  interesting-things-you-know-about |Robert>
  dump
  context qm
  measure |quantum system> !=> weighted-pick-elt normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  dump
  measure |quantum system>
  measure |quantum system> !=> normalize weighted-pick-elt normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  measure |quantum system>
  dump
  history
  normalized |superposition> => normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  measure |quantum system> !=> normalize weighted-pick-elt normalized |superposition>
  dump
  measure |quantum system>
  history
  save history
  measure |quantum system> !=> normalize weighted-pick-elt normalized |superposition>
  measure |quantum system>
  history
  context simple QM measurement system
  normalized |superposition> => normalize absolute-noise[100] 0 (|state 1> + |state 2> + |state 3> + |state 4> + |state 5>)
  measure |quantum system> !=> normalize weighted-pick-elt normalized |superposition>
  dump
  history
  dump
  measure |quantum system>
  dump
  context for all x
  has-some-property |X: *> => |yes>
  has-some-property |X: y> => |no>
  has-some-property |X: z> => |no>
  dump
  the |list> => |X: a> + 2.3|X: b> + |X: c> + |X: x> + |X: y> + |X: z>
  the |list>
  such-that[has-some-property] the |list>
  history
  save history
  such-that[has-some-property] the |list>
  q

2016-03-02
  op |a> => |x> + |y> + |z>
  op |a>
  op |a> +=> |x> + |z> + |u> + |w>
  op |a>
  history
  reset
  op |a> => |x> + |y> + |z>
  op |a> => op |a> + |x> + |z> + |u> + |w>
  op |a>
  op |a> => |start value>
  value |r1> => op |a>
  value |r2> #=> op |a>
  value |r1>
  value |r2>
  op |a> => |second value>
  value |r1>
  value |r2>
  is-alive |Schrodinger's cat> !=> weighted-pick-elt (|yes> + |no>)
  dump
  reset
  is-alive |Schrodinger's cat> !=> weighted-pick-elt (|yes> + |no>)
  dump
  is-alive |Schrodinger's cat>
  dump
  op |person: *> #=> |_self>
  op |person: Fred>
  [Bis-living-organism |plant> => |yes>
  is-living-organism |plant: *> => |yes>
  is-living-organism |plant: tree>
  is-living-organism |plant: tree: elm>
  is-living-organism |plant: tree: oak: the one next to my house>
  is-living-organism |plant: shrub>
  id |*> #=> |_self>
  id |x>
  id |foo: bah>
  context
  context george
  age |person: George> => |age: 29>
  dob |person: George> => |date: 1984-05-23>
  hair-colour |person: George> => |hair-colour: brown>
  eye-colour |person: George> => |eye-colour: blue>
  gender |person: George> => |gender: male>
  height |person: George> => |height: cm: 176>
  wife |person: George> => |person: Beth>
  occupation |person: George> => |occupation: car salesman>
  friends |person: George> => |person: Fred> + |person: Jane> + |person: Liz> + |person: Andrew>
  mother |person: George> => |person: Sarah>
  father |person: George> => |person: David>
  sisters |person: George> => |person: Emily>
  brothers |person: George> => |person: Frank> + |person: Tim> + |person: Sam>
  email |person: George> => |email: george.douglas@gmail.com>
  education |person: George> => |education: high-school> 
  everything-you-know-about |*> #=> apply(supported-ops |_self>,|_self>
  everything-you-know-about |person: George>
  everything-you-know-about |*> #=> apply(supported-ops |_self>,|_self>)
  everything-you-know-about |person: George>
  everything-you-know-about |person: George>
  supported-ops |person: George>
  the-list-of-interesting-operators |*> => |op: age> + |op: dob> + |op: height> + |op: gender> + |op: occupation>
  interesting-things-you-know-about |*> #=> apply(the-list-of-interesting-operators |_self>,|_self>)
  interesting-things-you-know-about |person: George>
  dump
  icontext
  identity-element |*> #=> id |_self>
  the-identity-element |*> #=> id |_self>
  icontextr
  icontext
  guess-operator |george>
  guess-ket |george>
  interesting-things-you-know-about guess-ket |george>
  guess-operator[interesting-things-about] guess-ket |george>
  apply(guess-operator[interesting-things-about] |>, guess-ket |george>)
  save history
  dump
  relevant-kets[age]
  context filters
  the |list> => |number: 137> + |furniture: chair> + |animal: frog> + |furniture: table> + |number: 5573>
  
  Define some filters:
  -- the general rule is that our filters return the empty ket, also known as the superposition identity element:
  number-filter |*> #=> |>
  furniture-filter |*> #=> |>
  animal-filter |*> #=> |>
  animal-number-filter |*> #=> |>
  
  -- now define specific exceptions to the general rules:
  number-filter |number: *> #=> |_self>
  animal-number-filter |number: *> #=> |_self>
  furniture-filter |furniture: *> #=> |_self>
  animal-filter |animal: *> #=> |_self>
  animal-number-filter |animal: *> #=> |_self>
  dump
  number-filter the |list>
  furniture-filter the |list>
  animal-filter the |list>
  animal-number-filter the |list>
  h
  history
  save history
  is-a-number |*> => |no>
  is-a-number |number: *> => |yes>
  dump
  is-a-number the |list>
  is-an-animal |*> => |no>
  is-an-animal |animal: *> => |yes>
  is-an-animal the |list>
  is-a-number the |list>
  is-a-number number-filter the |list>
  is-an-animal animal-filter the |list>
  how-many number-filter the |list>
  how-many animal-filter the |list>
  how-many animal-number-filter the |list>
  abs -3 |x>
  set-to[5] -7.2 |x>
  NOT 0|x>
  not 0|x>
  clean (3|a> + |b> + -2.7|c> + 38762|d> + -5.55|e> + |f>)
  threshold-filter[2] (3|a> + |b> + -2.7|c> + 38762|d> + -5.55|e> + |f>)
  drop clean (3|a> + |b> + -2.7|c> + 38762|d> + -5.55|e> + |f>)
  drop (3|a> + |b> + -2.7|c> + 38762|d> + -5.55|e> + |f>)
  history
  save history
  q

2016-03-03
  image-load[child.png]
  
  q

2016-03-03
  image-load[Lenna.png]
  q

2016-03-03
  image-load[220px-Lenna.png]
  image-load[bko-as-neurons.png]
  q

2016-03-03
  image-load[small-lenna.png]
  q

2016-03-03
  image-histogram[Lenna.png]
  
  history
  the |Lenna sp> => image-histogram[Lenna.png]
  dump
  history
  the |Lenna sp> => image-histogram[Lenna.png] |>
  dump
  history
  the |small Lenna sp> => image-histogram[small-lenna.png] |>
  dump
  history
  the |child sp> => image-histogram[child.png] |>
  rel-kets[the]
  table[sp,coeff] 100 self-similar[the] |Lenna sp>
  history
  the |wolfmoon sp> => image-histogram[three-wolfmoon-output.png] |>
  table[sp,coeff] 100 self-similar[the] |Lenna sp>
  save history

2016-03-04
  image-save[foo.png] |bah: 37 37: ABAD>
  debug on
  image-save[foo.png] |bah: 37 37: ABAD>
  q

2016-03-04
  image-save[foo.png] |bah: 37 37: ABAD>
  image-save[foo.png] |image: 37 37: ABAD>
  image-save[foo.png] |image: 1 1: ABAD37>
  image-save[foo.png] |image: 1 2: 373728AB9712>
  q

2016-03-04
  image-save[foo.png] |image: 1 2: 373728AB9712>
  q

2016-03-04
  image-save[foo.png] |image: 1 2: 373728AB9712>
  q

2016-03-04
  image-save[foo.png] |image: 1 2: 373728AB9712>
  image-save[foo.png] image-load[child.png] |>
  history
  q

2016-03-04
  image-save[foo.png] image-load[child.png] |>
  history
  image-save[foo.png] image-load[Lenna.png]
  history
  q

2016-03-04
  image-save[foo.png] image-load[child.png] |>
  q

2016-03-04
  image-save[foo.png] image-load[child.png] |>
  history
  image-save[] image-load[child.png] |>
  image-save[''] image-load[child.png] |>
  image-save[x.png] image-load[child.png]
  q

2016-03-05
  image-save[x.png] |image: 1 1: 000000>
  image-save[x.png] |image: 1 1: FFFFFF>
  q

2016-03-05
  image-histogram[Lenna.png]
  
  history
  the |Lenna sp> => image-histogram[Lenna.png]
  dump
  history
  the |Lenna sp> => image-histogram[Lenna.png] |>
  dump
  history
  the |small Lenna sp> => image-histogram[small-lenna.png] |>
  dump
  history
  the |child sp> => image-histogram[child.png] |>
  rel-kets[the]
  table[sp,coeff] 100 self-similar[the] |Lenna sp>
  history
  the |wolfmoon sp> => image-histogram[three-wolfmoon-output.png] |>
  table[sp,coeff] 100 self-similar[the] |Lenna sp>
  save history
  history
  the |Lenna sp> => image-histogram[Lenna.png] |>
  the |small Lenna sp> => image-histogram[small-lenna.png] |>
  the |child sp> => image-histogram[child.png] |>
  the |wolfmoon sp> => image-histogram[three-wolfmoon-output.png] |>
  table[sp,coeff] 100 self-similar[the] |Lenna sp>
  table[sp,coeff] 100 self-similar[the] |child sp>
  table[sp,coeff] 100 self-similar[the] |wolfmoon sp>
  q

2016-03-13
  op |A> => |B> + |C> + |G>
  op |B> => |A> + |D> + |H>
  op |C> => |A> + |D> + |E>
  op |D> => |C> + |F> + |B>
  op |E> => |C> + |F> + |G>
  op |F> => |E> + |D> + |H>
  op |G> => |A> + |E> + |H>
  op |H> => |G> + |F> + |B>
  dump
  debug on
  how-many |A>
  how-many op |A>
  pop-float |number: 3>
  q

2016-03-14
  load network-1.sw
  h
  cd ..
  load network-1.sw
  ls
  q

2016-03-14
  foo |op: fish> => |op: bah>
  dump
  dump exact
  q

2016-03-14
  load fred-sam-friends.sw
  create inverse
  dump
  q

2016-03-15
  load network-1.sw
  matrix[op]
  op^2 |A>
  op^3 |A>
  op |A>
  op^2 |A>
  op^3 |A>
  op^4 |A>
  op^0 |A>
  op^1 |A>
  op^2 |A>
  op^3 |A>
  op^4 |A>
  op^5 |A>
  
  op |E>
  op^2 |E>
  op^3 |E>
  op^4 |E>
  op^5 |E>
  debug on
  how-many op^2 |A>
  count-sum op^5 |E>
  q

2016-03-15
  load network-1.sw
  matrix[op]
  merged-matrix[op,op]
  q

2016-03-15
  load network-1.sw
  dump
  op^2 |A>
  op^3 |A>
  op^4 |A>
  load network-2.sw
  dump
  op^2 |A>
  op^3 |A>
  op^6 |B>
  op^6 |C>
  op^3 |F>
  load network-1.sw
  dump
  op^4 |C>
  history
  op^6 |A>
  mbr(|A>,3|A>)
  mbr(|B>,|A>)
  is-mbr(|B>,|A>)
  is-mbr(|A>,7|A> +|B>)
  history
  has-3-cycle |*> #=> is-mbr(|_self>,op^3 |_self>)
  has-4-cycle |*> #=> is-mbr(|_self>,op^4 |_self>)
  has-5-cycle |*> #=> is-mbr(|_self>,op^5 |_self>)
  has-6-cycle |*> #=> is-mbr(|_self>,op^6 |_self>)
  has-7-cycle |*> #=> is-mbr(|_self>,op^7 |_self>)
  has-8-cycle |*> #=> is-mbr(|_self>,op^8 |_self>)
  has-9-cycle |*> #=> is-mbr(|_self>,op^9 |_self>)
  has-10-cycle |*> #=> is-mbr(|_self>,op^10 |_self>)
  
  dump
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  load network-2.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  load network-5.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  load network-6.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  load network-20.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  history
  save history

2016-03-15
  load network-1.sw
  has-3-cycle |*> #=> is-mbr(|_self>,op^3 |_self>)
  has-4-cycle |*> #=> is-mbr(|_self>,op^4 |_self>)
  has-5-cycle |*> #=> is-mbr(|_self>,op^5 |_self>)
  has-6-cycle |*> #=> is-mbr(|_self>,op^6 |_self>)
  has-7-cycle |*> #=> is-mbr(|_self>,op^7 |_self>)
  has-8-cycle |*> #=> is-mbr(|_self>,op^8 |_self>)
  has-9-cycle |*> #=> is-mbr(|_self>,op^9 |_self>)
  has-10-cycle |*> #=> is-mbr(|_self>,op^10 |_self>)
  
  dump
  history
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  reset
  load network-2.sw
  has-3-cycle |*> #=> is-mbr(|_self>,op^3 |_self>)
  has-4-cycle |*> #=> is-mbr(|_self>,op^4 |_self>)
  has-5-cycle |*> #=> is-mbr(|_self>,op^5 |_self>)
  has-6-cycle |*> #=> is-mbr(|_self>,op^6 |_self>)
  has-7-cycle |*> #=> is-mbr(|_self>,op^7 |_self>)
  has-8-cycle |*> #=> is-mbr(|_self>,op^8 |_self>)
  has-9-cycle |*> #=> is-mbr(|_self>,op^9 |_self>)
  has-10-cycle |*> #=> is-mbr(|_self>,op^10 |_self>)
  
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  q

2016-03-15
  load network-5.sw
  
  load has-k-cycle.sw
  
  dump
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  history
  reset
  load network-6.sw
  load has-k-cycle.sw
  
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  reset
  load network-7.sw
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  history
  reset
  load network-9.sw
  
  
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  history
  reset
  load network-11.sw
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  history
  reset
  load network-12.sw
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  reset
  history
  load network-13.sw
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  history
  reset
  load network-14.sw
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  reset
  history
  load network-15.sw
  load network-16.sw
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  history
  reset
  load network-17.sw
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  reset
  history
  load network-18.sw
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  history
  reset
  load network-19.sw
  load network-20.sw
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  history
  q

2016-03-16
  load network-1.sw
  dump
  op^2 |A>
  op^3 |A>
  op^4 |A>
  load network-2.sw
  dump
  op^2 |A>
  op^3 |A>
  op^6 |B>
  op^6 |C>
  op^3 |F>
  load network-1.sw
  dump
  op^4 |C>
  history
  op^6 |A>
  mbr(|A>,3|A>)
  mbr(|B>,|A>)
  is-mbr(|B>,|A>)
  is-mbr(|A>,7|A> +|B>)
  history
  has-3-cycle |*> #=> is-mbr(|_self>,op^3 |_self>)
  has-4-cycle |*> #=> is-mbr(|_self>,op^4 |_self>)
  has-5-cycle |*> #=> is-mbr(|_self>,op^5 |_self>)
  has-6-cycle |*> #=> is-mbr(|_self>,op^6 |_self>)
  has-7-cycle |*> #=> is-mbr(|_self>,op^7 |_self>)
  has-8-cycle |*> #=> is-mbr(|_self>,op^8 |_self>)
  has-9-cycle |*> #=> is-mbr(|_self>,op^9 |_self>)
  has-10-cycle |*> #=> is-mbr(|_self>,op^10 |_self>)
  
  dump
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  load network-2.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  load network-5.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  load network-6.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  load network-20.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  history
  save history
  q

2016-03-16
  op |a1> => |a2>
  op |a2> => |a3>
  op |a3> => |a4>
  op |a4> => |a5>
  op |a5> => |a6>
  op |a6> => |a7>
  op |a7> => |a8>
  op |a8> => |a9>
  op |a9> => |a10>
  op |a10> => |a1> + |b1>
  
  op |b1> => |b2>
  op |b2> => |b3>
  op |b3> => |b4>
  op |b4> => |b5>
  op |b5> => |b6>
  op |b6> => |b7>
  op |b7> => |b1>
  has-3-cycle |*> #=> is-mbr(|_self>,op^3 |_self>)
  has-4-cycle |*> #=> is-mbr(|_self>,op^4 |_self>)
  has-5-cycle |*> #=> is-mbr(|_self>,op^5 |_self>)
  has-6-cycle |*> #=> is-mbr(|_self>,op^6 |_self>)
  has-7-cycle |*> #=> is-mbr(|_self>,op^7 |_self>)
  has-8-cycle |*> #=> is-mbr(|_self>,op^8 |_self>)
  has-9-cycle |*> #=> is-mbr(|_self>,op^9 |_self>)
  has-10-cycle |*> #=> is-mbr(|_self>,op^10 |_self>)
  has-11-cycle |*> #=> is-mbr(|_self>,op^11 |_self>)
  has-12-cycle |*> #=> is-mbr(|_self>,op^12 |_self>)
  has-13-cycle |*> #=> is-mbr(|_self>,op^13 |_self>)
  
  dump
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle,has-11-cycle,has-12-cycle,has-13-cycle] rel-kets[op]
  q

2016-03-16
  op |1> => split |2 5 6>
  op |2> => split |1 3 6>
  op |3> => split |2 4>
  op |4> => split |3 5>
  op |5> => split |1 4 6>
  op |6> => split |1 2 5>
  
  matrix[op]
  op |1> => split |2 3>
  op |2> => split |1 3 4>
  op |3> => split |1 2 4 5>
  op |4> => split |2 3 6>
  op |5> => split |3 6>
  op |6> => split |4 5>
  
  matrix[op]
  q

2016-03-16
  
  op |a> => split |b>
  op |b> => split |a c f>
  op |c> => split |b d>
  op |d> => split |c e>
  op |e> => split |d>
  op |f> => split |b g>
  op |g> => split |f h>
  op |h> => split |g>
  dump
  reset
  op |a> => split |b>
  op |b> => split |a c d>
  op |c> => split |b>
  op |d> => split |b e>
  op |e> => split |d f>
  op |f> => split |e g>
  op |g> => split |f h>
  op |h> => split |g>
  dump
  q

2016-03-16
  load network-1.sw
  dump
  matrix[op]
  matrix[op,op]
  merged-matrix[op,op]
  op |A>
  op^2 |A>
  op^3 |A>
  q

2016-03-16
  op |1> => |2> + |3> + |5> + |9> + |10> + |14> + |16> + |17>
  
  op |2> => |1> + |3> + |4> + |6> + |10> + |11> + |15> + |17>
  
  op |3> => |1> + |2> + |4> + |5> + |7> + |11> + |12> + |16>
  
  op |5> => |1> + |3> + |4> + |6> + |7> + |9> + |13> + |14>
  
  op |9> => |1> + |5> + |7> + |8> + |10> + |11> + |13> + |17>
  
  op |10> => |1> + |2> + |6> + |8> + |9> + |11> + |12> + |14>
  
  op |14> => |1> + |5> + |6> + |10> + |12> + |13> + |15> + |16>
  
  op |16> => |1> + |3> + |7> + |8> + |12> + |14> + |15> + |17>
  
  op |17> => |1> + |2> + |4> + |8> + |9> + |13> + |15> + |16>
  
  op |4> => |2> + |3> + |5> + |6> + |8> + |12> + |13> + |17>
  
  op |6> => |2> + |4> + |5> + |7> + |8> + |10> + |14> + |15>
  
  op |11> => |2> + |3> + |7> + |9> + |10> + |12> + |13> + |15>
  
  op |15> => |2> + |6> + |7> + |11> + |13> + |14> + |16> + |17>
  
  op |7> => |3> + |5> + |6> + |8> + |9> + |11> + |15> + |16>
  
  op |12> => |3> + |4> + |8> + |10> + |11> + |13> + |14> + |16>
  
  op |8> => |4> + |6> + |7> + |9> + |10> + |12> + |16> + |17>
  
  op |13> => |4> + |5> + |9> + |11> + |12> + |14> + |15> + |17>
  
  dump
  matrix[op]
  q

2016-03-16
  op |1> => |2> + |3> + |5> + |9> + |10> + |14> + |16> + |17>
  
  op |2> => |1> + |3> + |4> + |6> + |10> + |11> + |15> + |17>
  
  op |3> => |1> + |2> + |4> + |5> + |7> + |11> + |12> + |16>
  
  op |5> => |1> + |3> + |4> + |6> + |7> + |9> + |13> + |14>
  
  op |9> => |1> + |5> + |7> + |8> + |10> + |11> + |13> + |17>
  
  op |10> => |1> + |2> + |6> + |8> + |9> + |11> + |12> + |14>
  
  op |14> => |1> + |5> + |6> + |10> + |12> + |13> + |15> + |16>
  
  op |16> => |1> + |3> + |7> + |8> + |12> + |14> + |15> + |17>
  
  op |17> => |1> + |2> + |4> + |8> + |9> + |13> + |15> + |16>
  
  op |4> => |2> + |3> + |5> + |6> + |8> + |12> + |13> + |17>
  
  op |6> => |2> + |4> + |5> + |7> + |8> + |10> + |14> + |15>
  
  op |11> => |2> + |3> + |7> + |9> + |10> + |12> + |13> + |15>
  
  op |15> => |2> + |6> + |7> + |11> + |13> + |14> + |16> + |17>
  
  op |7> => |3> + |5> + |6> + |8> + |9> + |11> + |15> + |16>
  
  op |12> => |3> + |4> + |8> + |10> + |11> + |13> + |14> + |16>
  
  op |8> => |4> + |6> + |7> + |9> + |10> + |12> + |16> + |17>
  
  op |13> => |4> + |5> + |9> + |11> + |12> + |14> + |15> + |17>
  
  dump
  save 
  save Ramsey-graph-1.sw
  q

2016-03-16
  op |1> => |6> + |8> + |9> + |11> + |13> + |14> + |15> + |16>
  
  op |6> => |1> + |3> + |4> + |7> + |8> + |10> + |14> + |15>
  
  op |8> => |1> + |2> + |4> + |6> + |7> + |9> + |12> + |16>
  
  op |9> => |1> + |4> + |5> + |8> + |11> + |12> + |14> + |17>
  
  op |11> => |1> + |3> + |5> + |7> + |9> + |15> + |16> + |17>
  
  op |13> => |1> + |2> + |10> + |12> + |14> + |15> + |16> + |17>
  
  op |14> => |1> + |3> + |5> + |6> + |9> + |10> + |12> + |13>
  
  op |15> => |1> + |2> + |3> + |4> + |6> + |11> + |13> + |17>
  
  op |16> => |1> + |2> + |5> + |7> + |8> + |10> + |11> + |13>
  
  op |2> => |3> + |4> + |5> + |8> + |12> + |13> + |15> + |16>
  
  op |3> => |2> + |5> + |6> + |7> + |11> + |12> + |14> + |15>
  
  op |4> => |2> + |5> + |6> + |8> + |9> + |10> + |15> + |17>
  
  op |5> => |2> + |3> + |4> + |9> + |10> + |11> + |14> + |16>
  
  op |12> => |2> + |3> + |7> + |8> + |9> + |13> + |14> + |17>
  
  op |7> => |3> + |6> + |8> + |10> + |11> + |12> + |16> + |17>
  
  op |10> => |4> + |5> + |6> + |7> + |13> + |14> + |16> + |17>
  
  op |17> => |4> + |7> + |9> + |10> + |11> + |12> + |13> + |15>
  
  dump
  matrix[op]
  q

2016-03-16
  
  op |1> => |6> + |8> + |9> + |11> + |13> + |14> + |15> + |16>
  
  op |6> => |1> + |3> + |4> + |7> + |8> + |10> + |14> + |15>
  
  op |8> => |1> + |2> + |4> + |6> + |7> + |9> + |12> + |16>
  
  op |9> => |1> + |4> + |5> + |8> + |11> + |12> + |14> + |17>
  
  op |11> => |1> + |3> + |5> + |7> + |9> + |15> + |16> + |17>
  
  op |13> => |1> + |2> + |10> + |12> + |14> + |15> + |16> + |17>
  
  op |14> => |1> + |3> + |5> + |6> + |9> + |10> + |12> + |13>
  
  op |15> => |1> + |2> + |3> + |4> + |6> + |11> + |13> + |17>
  
  op |16> => |1> + |2> + |5> + |7> + |8> + |10> + |11> + |13>
  
  op |2> => |3> + |4> + |5> + |8> + |12> + |13> + |15> + |16>
  
  op |3> => |2> + |5> + |6> + |7> + |11> + |12> + |14> + |15>
  
  op |4> => |2> + |5> + |6> + |8> + |9> + |10> + |15> + |17>
  
  op |5> => |2> + |3> + |4> + |9> + |10> + |11> + |14> + |16>
  
  op |12> => |2> + |3> + |7> + |8> + |9> + |13> + |14> + |17>
  
  op |7> => |3> + |6> + |8> + |10> + |11> + |12> + |16> + |17>
  
  op |10> => |4> + |5> + |6> + |7> + |13> + |14> + |16> + |17>
  
  op |17> => |4> + |7> + |9> + |10> + |11> + |12> + |13> + |15>
  
  dump
  matrix[op]
  save Ramsey-graph-2.sw
  q

2016-03-16
  load factorial.sw
  dump
  fact |*> !=> arithmetic(|_self>,|*>, fact minus[1] |_self>)
  fact |20>
  dump
  to-comma-number fact |17>
  q

2016-03-17
  load network-1.sw
  dump
  op 3|A>
  debug on
  op 3|A>
  q

2016-03-17
  q

2016-03-18
  ls
  cd networks
  files
  file
  h
  files
  q

2016-03-18
  cd
  ls
  cd networks
  files
  load network-1-a.sw
  dump
  matrix[op]
  q

2016-03-19
  
  cd networks
  files
  load network-6-a.sw
  dump
  product-2 |*> #=> product op^2 |_self>
  op-2 |*> #=> op^2 |1>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  op-2 |*> #=> op^2 |_self>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  reset
  history
  load network-6-b.sw
  product-2 |*> #=> product op^2 |_self>
  op-2 |*> #=> op^2 |_self>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  
  product-3 |*> #=> product op^3 |_self>
  op-3 |*> #=> op^3 |_self>
  table[node,product-3,op-3] sort-by[product-3] rel-kets[op]
  sum-3 |*> #=> count-sum op^3 |_self>
  product-3 |*> #=> product op^3 |_self>
  op-3 |*> #=> op^3 |_self>
  table[node,sum-3,product-3,op-3] sort-by[product-3] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  
  
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  history
  load network-6-a.sw
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  load has-k-cycle.sw
  cd sw-examples
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  cd networks
  history
  load network-6-b.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  clean-op-4 |*> #=> push-float coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  table[node,sum-4,product-4,clean-op-4] sort-by[product-4] rel-kets[op]
  op^2 |1>
  coeff-sort op^2 |1>
  coeff-sort op^2 |2>
  push-float coeff-sort op^2 |1>
  push-float coeff-sort op^4 |1>
  
  history
  save history

2016-03-19
  
  cd networks
  files
  load network-6-a.sw
  dump
  product-2 |*> #=> product op^2 |_self>
  op-2 |*> #=> op^2 |1>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  op-2 |*> #=> op^2 |_self>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  reset
  history
  load network-6-b.sw
  product-2 |*> #=> product op^2 |_self>
  op-2 |*> #=> op^2 |_self>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  
  product-3 |*> #=> product op^3 |_self>
  op-3 |*> #=> op^3 |_self>
  table[node,product-3,op-3] sort-by[product-3] rel-kets[op]
  sum-3 |*> #=> count-sum op^3 |_self>
  product-3 |*> #=> product op^3 |_self>
  op-3 |*> #=> op^3 |_self>
  table[node,sum-3,product-3,op-3] sort-by[product-3] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  
  
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  history
  load network-6-a.sw
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  load has-k-cycle.sw
  cd sw-examples
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  cd networks
  history
  load network-6-b.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  clean-op-4 |*> #=> push-float coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  table[node,sum-4,product-4,clean-op-4] sort-by[product-4] rel-kets[op]
  op^2 |1>
  coeff-sort op^2 |1>
  coeff-sort op^2 |2>
  push-float coeff-sort op^2 |1>
  push-float coeff-sort op^4 |1>
  
  history
  save history
  load network-6-a.sw
  sum-5 |*> #=> count-sum op^5 |_self>
  product-5 |*> #=> product op^5 |_self>
  clean-op- |*> #=> push-float coeff-sort op^5 |_self>
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  clean-op-5 |*> #=> push-float coeff-sort op^5 |_self>
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  load network-6-b.sw
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  load network-7-a.sw
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  load network-7-b.sw
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  history
  save history

2016-03-19
  
  cd networks
  files
  load network-6-a.sw
  dump
  product-2 |*> #=> product op^2 |_self>
  op-2 |*> #=> op^2 |1>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  op-2 |*> #=> op^2 |_self>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  reset
  history
  load network-6-b.sw
  product-2 |*> #=> product op^2 |_self>
  op-2 |*> #=> op^2 |_self>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  
  product-3 |*> #=> product op^3 |_self>
  op-3 |*> #=> op^3 |_self>
  table[node,product-3,op-3] sort-by[product-3] rel-kets[op]
  sum-3 |*> #=> count-sum op^3 |_self>
  product-3 |*> #=> product op^3 |_self>
  op-3 |*> #=> op^3 |_self>
  table[node,sum-3,product-3,op-3] sort-by[product-3] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  
  
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  history
  load network-6-a.sw
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  load has-k-cycle.sw
  cd sw-examples
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  cd networks
  history
  load network-6-b.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  clean-op-4 |*> #=> push-float coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  table[node,sum-4,product-4,clean-op-4] sort-by[product-4] rel-kets[op]
  op^2 |1>
  coeff-sort op^2 |1>
  coeff-sort op^2 |2>
  push-float coeff-sort op^2 |1>
  push-float coeff-sort op^4 |1>
  
  history
  save history
  load network-6-a.sw
  sum-5 |*> #=> count-sum op^5 |_self>
  product-5 |*> #=> product op^5 |_self>
  clean-op- |*> #=> push-float coeff-sort op^5 |_self>
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  clean-op-5 |*> #=> push-float coeff-sort op^5 |_self>
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  load network-6-b.sw
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  load network-7-a.sw
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  load network-7-b.sw
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  history
  save history
  load network-7-a.sw
  sum-10 |*> #=> count-sum op^10 |_self>
  product-10 |*> #=> product op^10 |_self>
  clean-op-10 |*> #=> push-float coeff-sort op^10 |_self>
  table[node,sum-10,product-10,clean-op-10] rel-kets[op]
  history
  network-7-b.sw
  load network-7-b.sw
  table[node,sum-10,product-10,clean-op-10] rel-kets[op]
  sum-100 |*> #=> count-sum op^100 |_self>
  product-100 |*> #=> product op^100 |_self>
  clean-op-100 |*> #=> push-float coeff-sort op^100 |_self>
  table[node,sum-100,product-100,clean-op-100] rel-kets[op]
  load network-7-a.sw
  table[node,sum-100,product-100,clean-op-100] rel-kets[op]
  clean-op-2000 |*> #=> push-float coeff-sort op^2000 |_self>
  table[node,clean-op-2000] rel-kets[op]
  clean-op-2000 |*> #=> push-float coeff-sort op^2000 |_self>
  table[node,clean-op-2000] rel-kets[op]
  clean-op-1000 |*> #=> push-float coeff-sort op^1000 |_self>
  table[node,clean-op-1000] rel-kets[op]
  clean-op-500 |*> #=> push-float coeff-sort op^500 |_self>
  table[node,clean-op-500] rel-kets[op]
  clean-op-200 |*> #=> push-float coeff-sort op^200 |_self>
  table[node,clean-op-200] rel-kets[op]
  history
  
  load network-7-b.sw
  table[node,clean-op-200] rel-kets[op]
  history
  save history

2016-03-20
  
  cd networks
  files
  load network-6-a.sw
  dump
  product-2 |*> #=> product op^2 |_self>
  op-2 |*> #=> op^2 |1>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  op-2 |*> #=> op^2 |_self>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  reset
  history
  load network-6-b.sw
  product-2 |*> #=> product op^2 |_self>
  op-2 |*> #=> op^2 |_self>
  table[node,product-2,op-2] sort-by[product-2] rel-kets[op]
  
  product-3 |*> #=> product op^3 |_self>
  op-3 |*> #=> op^3 |_self>
  table[node,product-3,op-3] sort-by[product-3] rel-kets[op]
  sum-3 |*> #=> count-sum op^3 |_self>
  product-3 |*> #=> product op^3 |_self>
  op-3 |*> #=> op^3 |_self>
  table[node,sum-3,product-3,op-3] sort-by[product-3] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  
  
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  history
  load network-6-a.sw
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  op-4 |*> #=> coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  load has-k-cycle.sw
  cd sw-examples
  load has-k-cycle.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  cd networks
  history
  load network-6-b.sw
  table[node,has-3-cycle,has-4-cycle,has-5-cycle,has-6-cycle,has-7-cycle,has-8-cycle,has-9-cycle,has-10-cycle] rel-kets[op]
  sum-4 |*> #=> count-sum op^4 |_self>
  product-4 |*> #=> product op^4 |_self>
  clean-op-4 |*> #=> push-float coeff-sort op^4 |_self>
  table[node,sum-4,product-4,op-4] sort-by[product-4] rel-kets[op]
  table[node,sum-4,product-4,clean-op-4] sort-by[product-4] rel-kets[op]
  op^2 |1>
  coeff-sort op^2 |1>
  coeff-sort op^2 |2>
  push-float coeff-sort op^2 |1>
  push-float coeff-sort op^4 |1>
  
  history
  save history
  load network-6-a.sw
  sum-5 |*> #=> count-sum op^5 |_self>
  product-5 |*> #=> product op^5 |_self>
  clean-op- |*> #=> push-float coeff-sort op^5 |_self>
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  clean-op-5 |*> #=> push-float coeff-sort op^5 |_self>
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  load network-6-b.sw
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  load network-7-a.sw
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  load network-7-b.sw
  table[node,sum-5,product-5,clean-op-5] sort-by[product-5] rel-kets[op]
  history
  save history
  load network-7-a.sw
  sum-10 |*> #=> count-sum op^10 |_self>
  product-10 |*> #=> product op^10 |_self>
  clean-op-10 |*> #=> push-float coeff-sort op^10 |_self>
  table[node,sum-10,product-10,clean-op-10] rel-kets[op]
  history
  network-7-b.sw
  load network-7-b.sw
  table[node,sum-10,product-10,clean-op-10] rel-kets[op]
  sum-100 |*> #=> count-sum op^100 |_self>
  product-100 |*> #=> product op^100 |_self>
  clean-op-100 |*> #=> push-float coeff-sort op^100 |_self>
  table[node,sum-100,product-100,clean-op-100] rel-kets[op]
  load network-7-a.sw
  table[node,sum-100,product-100,clean-op-100] rel-kets[op]
  clean-op-2000 |*> #=> push-float coeff-sort op^2000 |_self>
  table[node,clean-op-2000] rel-kets[op]
  clean-op-2000 |*> #=> push-float coeff-sort op^2000 |_self>
  table[node,clean-op-2000] rel-kets[op]
  clean-op-1000 |*> #=> push-float coeff-sort op^1000 |_self>
  table[node,clean-op-1000] rel-kets[op]
  clean-op-500 |*> #=> push-float coeff-sort op^500 |_self>
  table[node,clean-op-500] rel-kets[op]
  clean-op-200 |*> #=> push-float coeff-sort op^200 |_self>
  table[node,clean-op-200] rel-kets[op]
  history
  
  load network-7-b.sw
  table[node,clean-op-200] rel-kets[op]
  history
  save history
  exp[op,3] |1>
  exp-op-20 |*> #=> push-float coeff-sort exp[op,20] |_self>
  table[node,exp-op-20] rel-kets[op]
  history
  load network-7-a.sw
  table[node,exp-op-20] rel-kets[op]
  q

2016-03-20
  load network-7-a--as-result-sw.sw
  dump
  clean-op-0 |*> #=> push-float coeff-sort op-0 |_self>
  clean-op-1 |*> #=> push-float coeff-sort op-1 |_self>
  clean-op-2 |*> #=> push-float coeff-sort op-2 |_self>
  clean-op-3 |*> #=> push-float coeff-sort op-3 |_self>
  
  table[node,clean-op-0,clean-op-1,clean-op-2,clean-op-3] rel-kets[op-0]
  history
  load network-7-b--as-result-sw.sw
  table[node,clean-op-0,clean-op-1,clean-op-2,clean-op-3] rel-kets[op-0]
  history
  q

2016-03-20
  find-leading-category |a: b: c: d: e>
  debug on
  find-leading-category |a: b: c: d: e>
  remove-leading-catgory |a: b: c: d: e>
  remove-leading-category |a: b: c: d: e>
  q

2016-03-20
  load network-1--labeled.sw
  dump
  path-op[op] |B: 1>
  debug on
  path-op[op] |B: 1>
  q

2016-03-20
  load network-1--labeled.sw
  path-op[op] |B: 1>
  q

2016-03-20
  load network-1--labeled.sw
  path-op[op] |B: 1>
  q

2016-03-20
  load network-1--labeled.sw
  path-op[op] |B: 1>
  path-op[op] |A: 7: 3: 2: 5>
  q

2016-03-20
  load network-1--labeled.sw
  path-op[op] |B: 1>
  q

2016-03-20
  load network-1--labeled.sw
  path-op[op] |B: 1>
  path-op[op]^2 |B: 1>
  path-op[op] |A>
  q

2016-03-20
  load network-1--labeled.sw
  path-op[op] |B: 1>
  path-op[op] |A>
  q

2016-03-20
  load network-1--labeled.sw
  path-op[op] |B: 1>
  q

2016-03-20
  load network-1--labeled.sw
  path-op[op] |B: 1>
  path-op[op] |A>
  path-op[op]^2 |A>
  q

2016-03-20
  load network-1--labeled.sw
  
  p1 |*> #=> path-op[op] |_self>
  p2 |*> #=> path-op[op]^2 |_self>
  p3 |*> #=> path-op[op]^3 |_self>
  p4 |*> #=> path-op[op]^4 |_self>
  p5 |*> #=> path-op[op]^5 |_self>
  p6 |*> #=> path-op[op]^6 |_self>
  
  h1 |*> #=> how-many path-op[op] |_self>
  h2 |*> #=> how-many path-op[op]^2 |_self>
  h3 |*> #=> how-many path-op[op]^3 |_self>
  h4 |*> #=> how-many path-op[op]^4 |_self>
  h5 |*> #=> how-many path-op[op]^5 |_self>
  h6 |*> #=> how-many path-op[op]^6 |_self>
  
  table[node,p1,h1,p2,h2,p3,h3,p4,h4,p5,h5,p6,h6] rel-kets[op] |>
  table[node,p1,h1,p2,h2,h3,h4,h5,h6] rel-kets[op] |>
  is-A |*> #=> |no>
  is-B |*> #=> |no>
  is-C |*> #=> |no>
  is-D |*> #=> |no>
  is-E |*> #=> |no>
  is-F |*> #=> |no>
  is-G |*> #=> |no>
  is-H |*> #=> |no>
  
  is-A |A: *> #=> |yes>
  is-B |B: *> #=> |yes>
  is-C |C: *> #=> |yes>
  is-D |D: *> #=> |yes>
  is-E |E: *> #=> |yes>
  is-F |F: *> #=> |yes>
  is-G |G: *> #=> |yes>
  is-H |H: *> #=> |yes>
  
  no-A |*> #=> how-many such-that[is-A] path-op[op]^6 |_self>
  no-B |*> #=> how-many such-that[is-B] path-op[op]^6 |_self>
  no-C |*> #=> how-many such-that[is-C] path-op[op]^6 |_self>
  no-D |*> #=> how-many such-that[is-D] path-op[op]^6 |_self>
  no-E |*> #=> how-many such-that[is-E] path-op[op]^6 |_self>
  no-F |*> #=> how-many such-that[is-F] path-op[op]^6 |_self>
  no-G |*> #=> how-many such-that[is-G] path-op[op]^6 |_self>
  no-H |*> #=> how-many such-that[is-H] path-op[op]^6 |_self>
  
  
  
  dump
  path-op[op]^2 |A>
  such-that[is-A] path-op[op]^2 |A>
  table[node,no-A,no-B,no-C,no-D,no-E,no-F,no-G,no-H] rel-kets[op] |>
  path-op[op]^4 |A>
  history
  such-that[is-A] path-op[op]^5 |A>
  history
  such-that[is-A] path-op[op]^6 |A>
  save history

2016-03-20
  load network-1--labeled.sw
  
  p1 |*> #=> path-op[op] |_self>
  p2 |*> #=> path-op[op]^2 |_self>
  p3 |*> #=> path-op[op]^3 |_self>
  p4 |*> #=> path-op[op]^4 |_self>
  p5 |*> #=> path-op[op]^5 |_self>
  p6 |*> #=> path-op[op]^6 |_self>
  
  h1 |*> #=> how-many path-op[op] |_self>
  h2 |*> #=> how-many path-op[op]^2 |_self>
  h3 |*> #=> how-many path-op[op]^3 |_self>
  h4 |*> #=> how-many path-op[op]^4 |_self>
  h5 |*> #=> how-many path-op[op]^5 |_self>
  h6 |*> #=> how-many path-op[op]^6 |_self>
  
  table[node,p1,h1,p2,h2,p3,h3,p4,h4,p5,h5,p6,h6] rel-kets[op] |>
  table[node,p1,h1,p2,h2,h3,h4,h5,h6] rel-kets[op] |>
  is-A |*> #=> |no>
  is-B |*> #=> |no>
  is-C |*> #=> |no>
  is-D |*> #=> |no>
  is-E |*> #=> |no>
  is-F |*> #=> |no>
  is-G |*> #=> |no>
  is-H |*> #=> |no>
  
  is-A |A: *> #=> |yes>
  is-B |B: *> #=> |yes>
  is-C |C: *> #=> |yes>
  is-D |D: *> #=> |yes>
  is-E |E: *> #=> |yes>
  is-F |F: *> #=> |yes>
  is-G |G: *> #=> |yes>
  is-H |H: *> #=> |yes>
  
  no-A |*> #=> how-many such-that[is-A] path-op[op]^6 |_self>
  no-B |*> #=> how-many such-that[is-B] path-op[op]^6 |_self>
  no-C |*> #=> how-many such-that[is-C] path-op[op]^6 |_self>
  no-D |*> #=> how-many such-that[is-D] path-op[op]^6 |_self>
  no-E |*> #=> how-many such-that[is-E] path-op[op]^6 |_self>
  no-F |*> #=> how-many such-that[is-F] path-op[op]^6 |_self>
  no-G |*> #=> how-many such-that[is-G] path-op[op]^6 |_self>
  no-H |*> #=> how-many such-that[is-H] path-op[op]^6 |_self>
  
  
  
  dump
  path-op[op]^2 |A>
  such-that[is-A] path-op[op]^2 |A>
  table[node,no-A,no-B,no-C,no-D,no-E,no-F,no-G,no-H] rel-kets[op] |>
  path-op[op]^4 |A>
  history
  such-that[is-A] path-op[op]^5 |A>
  history
  such-that[is-A] path-op[op]^6 |A>
  save history
  q

2016-03-20
  load network-1.sw
  matrix[op]
  merged-matrix[op,op,op,op]
  merged-matrix[op,op,op,op,op,op]
  cd networks
  files
  load network-7-a.sw
  merged-matrix[op,op,op,op,op,op]
  .
  history
  load network-7-b.sw
  merged-matrix[op,op,op,op,op,op]
  reset
  load network-7-a.sw
  merged-matrix[op,op,op,op,op,op]
  load network-7-b.sw
  merged-matrix[op,op,op,op,op,op]
  matrix[op,op]
  q

2016-03-20
  load network-1.sw
  matrix[op]
   
  cd networks
  files
  q

2016-03-20
  q

2016-03-20
  load testing-networks.sw
  dump
  table[node,no-1,no-2,no-3,no-4,no-5,no-6,no-6,no-8] rel-kets[op] |>
  save history

2016-03-20
  load testing-networks.sw
  dump
  path-op[op]^3 |1>
  history
  such-that[is-1] path-op[op]^3 |1>
  history
  such-that[is-1] path-op[op]^2 |1>
  such-that[is-1-] path-op[op]^4 |1>
  history
  such-that[is-1] path-op[op]^4 |1>
  history
  how-many such-that[is-1] path-op[op]^4 |1>
  such-that[is-1] path-op[op]^4 |1>
  save history

2016-03-20
  load testing-networks.sw
  dump
  table[node,no-1,no-2,no-3,no-4,no-5,no-6,no-6,no-8] rel-kets[op] |>
  save history
  q

2016-03-21
  load network-1.sw
  dump
  matrix[op]
  merged-matrix[op,op]
  history
  |r1> => 2|A> + 3|B> + 5|C> + 7|D> + 11|E> + 13|F> + 17|G> + 19|H>
  op |A>
  op "" |r1>
  rel-kets[op]
  op rel-kets[op]
  op^2 "" |r1>
  q

2016-03-21
  load network-3.sw
  dump
  q

2016-03-21
  load network-4.sw
  dump
  q

2016-03-23
  load network-13.sw
  matrix[op]
  q

2016-03-24
  context permutation table
  Pab |X> => |0>
  Pac |X> => |0>
  Pab |X> => |O>
  dump
  Pbc |X> => |0>
  dump
  Pba |*> #=> Pab |_self>
  Pca |*> #=> Pac |_self>
  Pcb |*> #=> Pbc |_self>
  dump
  Pab |Y> => |Y>
  Pac |Y> => |Y>
  Pbc |Y> => |Y>
  dump
  Pab |X1> => |0>
  Pab |X2> => |X3>
  Pab |X3> => |X2>
  dump
  Pac |X1> => -|X3>
  Pac |X2> => |0>
  Pac |X3> => -|X1>
  dump
  Pbc |X1> => |X2>
  Pbc |X2> => |X1>
  Pbc |X3> => |0>
  dump
  Pac |Y1> => |Y1>
  Pac |Y2> => |Y3>
  Pac |Y3> => |Y2>
  Pac |Y1> => |Y3>
  Pac |Y2> => |Y2>
  Pac |Y3> => |Y1>
  dump
  
  
  dump
  Pab |Y1> => |Y1>
  Pab |Y2> => |Y3>
  Pab |Y3> => |Y2>
  Pbc |Y1> => |Y2>
  Pbc |Y2> => |Y1>
  Pbc |Y3> => |Y3>
  dump
  save simple-permutation-table.sw
  dump
  Pabc |*> #=> Pca Pbc Pab |_self>
  Pacb |*> #=> Pba Pcb Pac |_self>
  dump
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  dump
  Pacb |Y1>
  Pacb |Y2>
  Pacb |Y3>
  Pabc |X>
  dump
  Pacb |X>
  dump
  Pac |0> => |0>
  Pab |0> => |0>
  Pbc |0> => |0>
  dump
  Pabc |X>
  Pbc |0>
  dump
  history
  save simple-permutation-table.sw
  q

2016-03-25
  load simple-permutation-table.sw
  Pab |X> => |0>
  Pac |X> => |0>
  Pbc |X> => |0>
  
  Pba |*> #=> Pab |_self>
  Pca |*> #=> Pac |_self>
  Pcb |*> #=> Pbc |_self>
  
  -- I think these are broken!
  Pabc |*> #=> Pca Pbc Pab |_self>
  Pacb |*> #=> Pba Pcb Pac |_self>
  
  Pab |Y> => |Y>
  Pac |Y> => |Y>
  Pbc |Y> => |Y>
  
  Pab |X1> => |0>
  Pac |X1> => -1.0|X3>
  Pbc |X1> => |X2>
  
  Pab |X2> => |X3>
  Pac |X2> => |0>
  Pbc |X2> => |X1>
  
  Pab |X3> => |X2>
  Pac |X3> => -1.0|X1>
  Pbc |X3> => |0>
  
  Pac |Y1> => |Y3>
  Pab |Y1> => |Y1>
  Pbc |Y1> => |Y2>
  
  Pac |Y2> => |Y2>
  Pab |Y2> => |Y3>
  Pbc |Y2> => |Y1>
  
  Pac |Y3> => |Y1>
  Pab |Y3> => |Y2>
  Pbc |Y3> => |Y3>
  
  Pac |0> => |0>
  Pab |0> => |0>
  Pbc |0> => |0>
  dump
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  Pabc |X>
  Pacb |X>
  Pabc |Y>
  Pacb |Y>
  dump
  Pabc |*> #=> Pac Pab |_self>
  Pacb |*>  #=> Pbc Pab |_self>
  dump
  history 1000
  save simple-permutation-table.sw
  dump
  Pabc |X>
  Pacb |X>
  Pabc |Y>
  Pacb |Y>
  Pabc |X1>
  Pabc |X2>
  Pabc |X3>
  Pacb |X3>
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  Pacb |Y1>
  Pacb |Y2>\
  Pacb |Y3>
  Pabc^3 |Y1>
  Pabc^3 |Y2>
  Pabc^3 |Y3>
  Pacb^3 |Y1>
  Pacb^3 |Y2>
  Pacb^3 |Y3>
  dump
  Pabc^2 |X1>
  Pacb^2 |X1>
  Pabc^2 |X2>
  Pabc^2 |X2>
  Pacb^2 |X1>
  Pacb^2 |X1>
  Pabc |Y2>
  Pabc |Y3>
  Pacb |Y1>
  Pacb|Y2>
  Pabc^2 |Y1>
  Pabc^2 |Y2>
  Pabc^2 |Y3>
  Pabc^3 |Y2>
  Pacb^2 |Y1>
  Pacb^2 |Y2>
  Pacb^2 |Y3>
  Pac^2 |X3>
  Pac^2 |X1>
  Pac^2 |X2>
  Pbc^2 |X1>
  Pab^2 |Y1>
  Pab^2 |Y2>
  Pab^2 |Y3>
  context mod 5 operator group
  op |*> #=> mod[6] arithmetic(|_self>,|+>,|1>)
  op |0>
  op|1>
  op|2>
  op|5>
  op|6>
  op-4 |*> #=> op^4 |_self>
  op-4 |3>
  op-4^2 |3>
  history
  op-4^3 |3>
  op-4^3 |3>
  op-4^3 |2>
  op-4^3 |5>
  history
  op-5 |*> #=> op^5 |_self>
  op-5^6 |3>
  op-5^3 |4>
  op-5^6 |5>
  context algebra
  algebra(|a> + |1>,|^>,|2>)
  display-algebra algebra(|a> + |1>,|^>,|2>)
  debug on
  algebra(|a> + |1>,|^>,|2>)
  debug on
  display-algebra algebra(|a> + |1>,|^>,|2>)
  v |111> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c>
  
  v |112> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |a*b*b> + 2|Q223*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c>
  
  v |113> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |b*b*c> + 2|Q223*b*c*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c>
  
  v |122> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c>
  
  v |123> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*a*c*c> + |Q122*a*a*c> + 3|Q123*a*b*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q122*b*c*c> + |Q223*b*b*c> + |Q223*a*a*b> + |Q233*a*b*b> + |Q113*b*c*c> + |Q133*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q133*a*c*c> + |Q233*a*a*c>
  
  v |133> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c>
  
  v |211> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |Q133*c*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |a*b*b> + 2|Q223*a*b*c> + |Q233*a*c*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |b*c*c>
  
  v |212> => |a*c*c> + |Q112*b*c*c> + |Q113*c*c*c> + 2|Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + 2|Q113*a*b*c> + 2|Q123*b*b*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + |a*a*b> + |Q223*a*a*c> + 2|Q123*a*a*b> + 2|Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c>
  
  v |213> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q113*a*a*c> + 3|Q123*a*b*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + |Q122*a*a*c> + |Q223*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q133*a*a*b> + |Q233*a*b*b>
  
  v |222> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b>
  
  v |223> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |a*a*c> + 2|Q223*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b>
  
  v |233> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b>
  
  v |311> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |Q133*b*c*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |b*b*c> + 2|Q223*b*c*c> + |Q233*c*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |a*c*c>
  
  v |312> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + 3|Q123*a*b*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q122*a*a*c> + |Q223*a*c*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q133*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q133*a*a*b> + |Q233*a*b*b>
  
  v |313> => |a*b*b> + |Q112*b*b*b> + |Q113*b*b*c> + 2|Q112*a*b*c> + 2|Q122*b*b*c> + 2|Q123*b*c*c> + 2|Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*a*c*c> + |b*c*c> + |Q223*c*c*c> + 2|Q123*a*a*c> + 2|Q223*a*b*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c>
  
  v |322> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |Q133*b*b*b> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |a*a*c> + 2|Q223*a*b*c> + |Q233*b*b*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |a*b*b>
  
  v |323> => |b*b*c> + |Q112*a*b*b> + |Q113*b*b*b> + 2|Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + 2|Q113*a*b*c> + 2|Q123*a*a*b> + 2|Q133*a*b*b> + |Q122*c*c*c> + |a*c*c> + |Q223*b*c*c> + 2|Q123*a*c*c> + 2|Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b>
  
  v |333> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a>
  
  dump
  display |*> #=> display-algebra v |_self>
  dump
  history
  
  
  dump
  
  history
  display-v |*> #=> display-algebra v |_self>
  dump
  table[row,display-v] rel-kets[v]
  .
  history
  rank-table[row,display-v] rel-kets[v]
  .
  save history

2016-03-25
  load simple-permutation-table.sw
  Pab |X> => |0>
  Pac |X> => |0>
  Pbc |X> => |0>
  
  Pba |*> #=> Pab |_self>
  Pca |*> #=> Pac |_self>
  Pcb |*> #=> Pbc |_self>
  
  -- I think these are broken!
  Pabc |*> #=> Pca Pbc Pab |_self>
  Pacb |*> #=> Pba Pcb Pac |_self>
  
  Pab |Y> => |Y>
  Pac |Y> => |Y>
  Pbc |Y> => |Y>
  
  Pab |X1> => |0>
  Pac |X1> => -1.0|X3>
  Pbc |X1> => |X2>
  
  Pab |X2> => |X3>
  Pac |X2> => |0>
  Pbc |X2> => |X1>
  
  Pab |X3> => |X2>
  Pac |X3> => -1.0|X1>
  Pbc |X3> => |0>
  
  Pac |Y1> => |Y3>
  Pab |Y1> => |Y1>
  Pbc |Y1> => |Y2>
  
  Pac |Y2> => |Y2>
  Pab |Y2> => |Y3>
  Pbc |Y2> => |Y1>
  
  Pac |Y3> => |Y1>
  Pab |Y3> => |Y2>
  Pbc |Y3> => |Y3>
  
  Pac |0> => |0>
  Pab |0> => |0>
  Pbc |0> => |0>
  dump
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  Pabc |X>
  Pacb |X>
  Pabc |Y>
  Pacb |Y>
  dump
  Pabc |*> #=> Pac Pab |_self>
  Pacb |*>  #=> Pbc Pab |_self>
  dump
  history 1000
  save simple-permutation-table.sw
  dump
  Pabc |X>
  Pacb |X>
  Pabc |Y>
  Pacb |Y>
  Pabc |X1>
  Pabc |X2>
  Pabc |X3>
  Pacb |X3>
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  Pacb |Y1>
  Pacb |Y2>\
  Pacb |Y3>
  Pabc^3 |Y1>
  Pabc^3 |Y2>
  Pabc^3 |Y3>
  Pacb^3 |Y1>
  Pacb^3 |Y2>
  Pacb^3 |Y3>
  dump
  Pabc^2 |X1>
  Pacb^2 |X1>
  Pabc^2 |X2>
  Pabc^2 |X2>
  Pacb^2 |X1>
  Pacb^2 |X1>
  Pabc |Y2>
  Pabc |Y3>
  Pacb |Y1>
  Pacb|Y2>
  Pabc^2 |Y1>
  Pabc^2 |Y2>
  Pabc^2 |Y3>
  Pabc^3 |Y2>
  Pacb^2 |Y1>
  Pacb^2 |Y2>
  Pacb^2 |Y3>
  Pac^2 |X3>
  Pac^2 |X1>
  Pac^2 |X2>
  Pbc^2 |X1>
  Pab^2 |Y1>
  Pab^2 |Y2>
  Pab^2 |Y3>
  context mod 5 operator group
  op |*> #=> mod[6] arithmetic(|_self>,|+>,|1>)
  op |0>
  op|1>
  op|2>
  op|5>
  op|6>
  op-4 |*> #=> op^4 |_self>
  op-4 |3>
  op-4^2 |3>
  history
  op-4^3 |3>
  op-4^3 |3>
  op-4^3 |2>
  op-4^3 |5>
  history
  op-5 |*> #=> op^5 |_self>
  op-5^6 |3>
  op-5^3 |4>
  op-5^6 |5>
  context algebra
  algebra(|a> + |1>,|^>,|2>)
  display-algebra algebra(|a> + |1>,|^>,|2>)
  debug on
  algebra(|a> + |1>,|^>,|2>)
  debug on
  display-algebra algebra(|a> + |1>,|^>,|2>)
  v |111> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c>
  
  v |112> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |a*b*b> + 2|Q223*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c>
  
  v |113> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |b*b*c> + 2|Q223*b*c*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c>
  
  v |122> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c>
  
  v |123> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*a*c*c> + |Q122*a*a*c> + 3|Q123*a*b*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q122*b*c*c> + |Q223*b*b*c> + |Q223*a*a*b> + |Q233*a*b*b> + |Q113*b*c*c> + |Q133*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q133*a*c*c> + |Q233*a*a*c>
  
  v |133> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c>
  
  v |211> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |Q133*c*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |a*b*b> + 2|Q223*a*b*c> + |Q233*a*c*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |b*c*c>
  
  v |212> => |a*c*c> + |Q112*b*c*c> + |Q113*c*c*c> + 2|Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + 2|Q113*a*b*c> + 2|Q123*b*b*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + |a*a*b> + |Q223*a*a*c> + 2|Q123*a*a*b> + 2|Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c>
  
  v |213> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q113*a*a*c> + 3|Q123*a*b*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + |Q122*a*a*c> + |Q223*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q133*a*a*b> + |Q233*a*b*b>
  
  v |222> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b>
  
  v |223> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |a*a*c> + 2|Q223*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b>
  
  v |233> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b>
  
  v |311> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |Q133*b*c*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |b*b*c> + 2|Q223*b*c*c> + |Q233*c*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |a*c*c>
  
  v |312> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + 3|Q123*a*b*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q122*a*a*c> + |Q223*a*c*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q133*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q133*a*a*b> + |Q233*a*b*b>
  
  v |313> => |a*b*b> + |Q112*b*b*b> + |Q113*b*b*c> + 2|Q112*a*b*c> + 2|Q122*b*b*c> + 2|Q123*b*c*c> + 2|Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*a*c*c> + |b*c*c> + |Q223*c*c*c> + 2|Q123*a*a*c> + 2|Q223*a*b*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c>
  
  v |322> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |Q133*b*b*b> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |a*a*c> + 2|Q223*a*b*c> + |Q233*b*b*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |a*b*b>
  
  v |323> => |b*b*c> + |Q112*a*b*b> + |Q113*b*b*b> + 2|Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + 2|Q113*a*b*c> + 2|Q123*a*a*b> + 2|Q133*a*b*b> + |Q122*c*c*c> + |a*c*c> + |Q223*b*c*c> + 2|Q123*a*c*c> + 2|Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b>
  
  v |333> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a>
  
  dump
  display |*> #=> display-algebra v |_self>
  dump
  history
  
  
  dump
  
  history
  display-v |*> #=> display-algebra v |_self>
  dump
  table[row,display-v] rel-kets[v]
  .
  history
  rank-table[row,display-v] rel-kets[v]
  .
  save history
  context
  context ds3
  eqn |1> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c> + -1|1>
  
  eqn |2> => |a*a*c> + |Q112*a*a*a> + |Q113*a*a*b> + 2|Q112*a*b*c> + 2|Q122*a*a*b> + 2|Q123*a*b*b> + 2|Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*b*b*c> + |a*b*b> + |Q223*b*b*b> + 2|Q123*b*c*c> + 2|Q223*a*b*c> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |3> => |a*a*b> + |Q112*a*a*c> + |Q113*a*a*a> + 2|Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + 2|Q113*a*b*c> + 2|Q123*a*c*c> + 2|Q133*a*a*c> + |Q122*b*b*b> + |b*b*c> + |Q223*a*b*b> + 2|Q123*b*b*c> + 2|Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |4> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |a*b*b> + 2|Q223*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |5> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c> + -1|Q122>
  
  eqn |6> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q113*a*b*b> + 3|Q123*a*b*c> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*b*c*c> + |Q122*a*b*b> + |Q223*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q223*a*c*c> + |Q233*a*a*c> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |7> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |b*b*c> + 2|Q223*b*c*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |8> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*a*c*c> + |Q122*a*a*c> + 3|Q123*a*b*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q122*b*c*c> + |Q223*b*b*c> + |Q223*a*a*b> + |Q233*a*b*b> + |Q113*b*c*c> + |Q133*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q133*a*c*c> + |Q233*a*a*c> + -1|Q123>
  
  eqn |9> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c> + -1|Q133>
  
  eqn |10> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |Q133*c*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |a*b*b> + 2|Q223*a*b*c> + |Q233*a*c*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |b*c*c> + -1|Q112>
  
  eqn |11> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |a*a*b> + 2|Q223*a*b*b> + |Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c> + -1|Q122>
  
  eqn |12> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*b*b*c> + |Q122*b*c*c> + 3|Q123*a*b*c> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q122*a*b*b> + |Q223*a*a*b> + |Q223*a*c*c> + |Q233*a*a*c> + |Q113*a*b*b> + |Q133*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |13> => |a*c*c> + |Q112*b*c*c> + |Q113*c*c*c> + 2|Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + 2|Q113*a*b*c> + 2|Q123*b*b*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + |a*a*b> + |Q223*a*a*c> + 2|Q123*a*a*b> + 2|Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c> + -1|Q122>
  
  eqn |14> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b> + -1|1>
  
  eqn |15> => |b*c*c> + |Q112*c*c*c> + |Q113*a*c*c> + 2|Q112*a*b*c> + 2|Q122*a*c*c> + 2|Q123*a*a*c> + 2|Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + |a*a*c> + |Q223*a*a*a> + 2|Q123*a*b*b> + 2|Q223*a*b*c> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |16> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q113*a*a*c> + 3|Q123*a*b*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + |Q122*a*a*c> + |Q223*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q133*a*a*b> + |Q233*a*b*b> + -1|Q123>
  
  eqn |17> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |a*a*c> + 2|Q223*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |18> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b> + -1|Q233>
  
  eqn |19> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |Q133*b*c*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |b*b*c> + 2|Q223*b*c*c> + |Q233*c*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |a*c*c> + -1|Q113>
  
  eqn |20> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q113*b*c*c> + 3|Q123*a*b*c> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*a*a*c> + |Q122*b*c*c> + |Q223*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q223*a*a*b> + |Q233*a*b*b> + |Q133*a*c*c> + |Q233*a*a*c> + -1|Q123>
  
  eqn |21> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*c*c> + 2|Q123*a*a*c> + |b*c*c> + 2|Q223*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c> + -1|Q133>
  
  eqn |22> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + 3|Q123*a*b*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q122*a*a*c> + |Q223*a*c*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q133*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q133*a*a*b> + |Q233*a*b*b> + -1|Q123>
  
  eqn |23> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |Q133*b*b*b> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |a*a*c> + 2|Q223*a*b*c> + |Q233*b*b*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |a*b*b> + -1|Q223>
  
  eqn |24> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q122*c*c*c> + 2|Q123*a*c*c> + |a*c*c> + 2|Q223*a*a*c> + |Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b> + -1|Q233>
  
  eqn |25> => |a*b*b> + |Q112*b*b*b> + |Q113*b*b*c> + 2|Q112*a*b*c> + 2|Q122*b*b*c> + 2|Q123*b*c*c> + 2|Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*a*c*c> + |b*c*c> + |Q223*c*c*c> + 2|Q123*a*a*c> + 2|Q223*a*b*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c> + -1|Q133>
  
  eqn |26> => |b*b*c> + |Q112*a*b*b> + |Q113*b*b*b> + 2|Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + 2|Q113*a*b*c> + 2|Q123*a*a*b> + 2|Q133*a*b*b> + |Q122*c*c*c> + |a*c*c> + |Q223*b*c*c> + 2|Q123*a*c*c> + 2|Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b> + -1|Q233>
  
  eqn |27> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a> + -1|1>
  
  dump
  history
  history 1000
  display-v |*> #=> display-algebra v |_self>
  display-eqn |*> #=> display-algebra eqn |_self>
  table[eqn,display-eqn] rel-kets[eqn]
  save history

2016-03-25
  load simple-permutation-table.sw
  Pab |X> => |0>
  Pac |X> => |0>
  Pbc |X> => |0>
  
  Pba |*> #=> Pab |_self>
  Pca |*> #=> Pac |_self>
  Pcb |*> #=> Pbc |_self>
  
  -- I think these are broken!
  Pabc |*> #=> Pca Pbc Pab |_self>
  Pacb |*> #=> Pba Pcb Pac |_self>
  
  Pab |Y> => |Y>
  Pac |Y> => |Y>
  Pbc |Y> => |Y>
  
  Pab |X1> => |0>
  Pac |X1> => -1.0|X3>
  Pbc |X1> => |X2>
  
  Pab |X2> => |X3>
  Pac |X2> => |0>
  Pbc |X2> => |X1>
  
  Pab |X3> => |X2>
  Pac |X3> => -1.0|X1>
  Pbc |X3> => |0>
  
  Pac |Y1> => |Y3>
  Pab |Y1> => |Y1>
  Pbc |Y1> => |Y2>
  
  Pac |Y2> => |Y2>
  Pab |Y2> => |Y3>
  Pbc |Y2> => |Y1>
  
  Pac |Y3> => |Y1>
  Pab |Y3> => |Y2>
  Pbc |Y3> => |Y3>
  
  Pac |0> => |0>
  Pab |0> => |0>
  Pbc |0> => |0>
  dump
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  Pabc |X>
  Pacb |X>
  Pabc |Y>
  Pacb |Y>
  dump
  Pabc |*> #=> Pac Pab |_self>
  Pacb |*>  #=> Pbc Pab |_self>
  dump
  history 1000
  save simple-permutation-table.sw
  dump
  Pabc |X>
  Pacb |X>
  Pabc |Y>
  Pacb |Y>
  Pabc |X1>
  Pabc |X2>
  Pabc |X3>
  Pacb |X3>
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  Pacb |Y1>
  Pacb |Y2>\
  Pacb |Y3>
  Pabc^3 |Y1>
  Pabc^3 |Y2>
  Pabc^3 |Y3>
  Pacb^3 |Y1>
  Pacb^3 |Y2>
  Pacb^3 |Y3>
  dump
  Pabc^2 |X1>
  Pacb^2 |X1>
  Pabc^2 |X2>
  Pabc^2 |X2>
  Pacb^2 |X1>
  Pacb^2 |X1>
  Pabc |Y2>
  Pabc |Y3>
  Pacb |Y1>
  Pacb|Y2>
  Pabc^2 |Y1>
  Pabc^2 |Y2>
  Pabc^2 |Y3>
  Pabc^3 |Y2>
  Pacb^2 |Y1>
  Pacb^2 |Y2>
  Pacb^2 |Y3>
  Pac^2 |X3>
  Pac^2 |X1>
  Pac^2 |X2>
  Pbc^2 |X1>
  Pab^2 |Y1>
  Pab^2 |Y2>
  Pab^2 |Y3>
  context mod 5 operator group
  op |*> #=> mod[6] arithmetic(|_self>,|+>,|1>)
  op |0>
  op|1>
  op|2>
  op|5>
  op|6>
  op-4 |*> #=> op^4 |_self>
  op-4 |3>
  op-4^2 |3>
  history
  op-4^3 |3>
  op-4^3 |3>
  op-4^3 |2>
  op-4^3 |5>
  history
  op-5 |*> #=> op^5 |_self>
  op-5^6 |3>
  op-5^3 |4>
  op-5^6 |5>
  context algebra
  algebra(|a> + |1>,|^>,|2>)
  display-algebra algebra(|a> + |1>,|^>,|2>)
  debug on
  algebra(|a> + |1>,|^>,|2>)
  debug on
  display-algebra algebra(|a> + |1>,|^>,|2>)
  v |111> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c>
  
  v |112> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |a*b*b> + 2|Q223*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c>
  
  v |113> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |b*b*c> + 2|Q223*b*c*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c>
  
  v |122> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c>
  
  v |123> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*a*c*c> + |Q122*a*a*c> + 3|Q123*a*b*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q122*b*c*c> + |Q223*b*b*c> + |Q223*a*a*b> + |Q233*a*b*b> + |Q113*b*c*c> + |Q133*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q133*a*c*c> + |Q233*a*a*c>
  
  v |133> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c>
  
  v |211> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |Q133*c*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |a*b*b> + 2|Q223*a*b*c> + |Q233*a*c*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |b*c*c>
  
  v |212> => |a*c*c> + |Q112*b*c*c> + |Q113*c*c*c> + 2|Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + 2|Q113*a*b*c> + 2|Q123*b*b*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + |a*a*b> + |Q223*a*a*c> + 2|Q123*a*a*b> + 2|Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c>
  
  v |213> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q113*a*a*c> + 3|Q123*a*b*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + |Q122*a*a*c> + |Q223*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q133*a*a*b> + |Q233*a*b*b>
  
  v |222> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b>
  
  v |223> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |a*a*c> + 2|Q223*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b>
  
  v |233> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b>
  
  v |311> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |Q133*b*c*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |b*b*c> + 2|Q223*b*c*c> + |Q233*c*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |a*c*c>
  
  v |312> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + 3|Q123*a*b*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q122*a*a*c> + |Q223*a*c*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q133*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q133*a*a*b> + |Q233*a*b*b>
  
  v |313> => |a*b*b> + |Q112*b*b*b> + |Q113*b*b*c> + 2|Q112*a*b*c> + 2|Q122*b*b*c> + 2|Q123*b*c*c> + 2|Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*a*c*c> + |b*c*c> + |Q223*c*c*c> + 2|Q123*a*a*c> + 2|Q223*a*b*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c>
  
  v |322> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |Q133*b*b*b> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |a*a*c> + 2|Q223*a*b*c> + |Q233*b*b*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |a*b*b>
  
  v |323> => |b*b*c> + |Q112*a*b*b> + |Q113*b*b*b> + 2|Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + 2|Q113*a*b*c> + 2|Q123*a*a*b> + 2|Q133*a*b*b> + |Q122*c*c*c> + |a*c*c> + |Q223*b*c*c> + 2|Q123*a*c*c> + 2|Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b>
  
  v |333> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a>
  
  dump
  display |*> #=> display-algebra v |_self>
  dump
  history
  
  
  dump
  
  history
  display-v |*> #=> display-algebra v |_self>
  dump
  table[row,display-v] rel-kets[v]
  .
  history
  rank-table[row,display-v] rel-kets[v]
  .
  save history
  context
  context ds3
  eqn |1> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c> + -1|1>
  
  eqn |2> => |a*a*c> + |Q112*a*a*a> + |Q113*a*a*b> + 2|Q112*a*b*c> + 2|Q122*a*a*b> + 2|Q123*a*b*b> + 2|Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*b*b*c> + |a*b*b> + |Q223*b*b*b> + 2|Q123*b*c*c> + 2|Q223*a*b*c> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |3> => |a*a*b> + |Q112*a*a*c> + |Q113*a*a*a> + 2|Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + 2|Q113*a*b*c> + 2|Q123*a*c*c> + 2|Q133*a*a*c> + |Q122*b*b*b> + |b*b*c> + |Q223*a*b*b> + 2|Q123*b*b*c> + 2|Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |4> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |a*b*b> + 2|Q223*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |5> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c> + -1|Q122>
  
  eqn |6> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q113*a*b*b> + 3|Q123*a*b*c> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*b*c*c> + |Q122*a*b*b> + |Q223*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q223*a*c*c> + |Q233*a*a*c> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |7> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |b*b*c> + 2|Q223*b*c*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |8> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*a*c*c> + |Q122*a*a*c> + 3|Q123*a*b*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q122*b*c*c> + |Q223*b*b*c> + |Q223*a*a*b> + |Q233*a*b*b> + |Q113*b*c*c> + |Q133*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q133*a*c*c> + |Q233*a*a*c> + -1|Q123>
  
  eqn |9> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c> + -1|Q133>
  
  eqn |10> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |Q133*c*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |a*b*b> + 2|Q223*a*b*c> + |Q233*a*c*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |b*c*c> + -1|Q112>
  
  eqn |11> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |a*a*b> + 2|Q223*a*b*b> + |Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c> + -1|Q122>
  
  eqn |12> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*b*b*c> + |Q122*b*c*c> + 3|Q123*a*b*c> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q122*a*b*b> + |Q223*a*a*b> + |Q223*a*c*c> + |Q233*a*a*c> + |Q113*a*b*b> + |Q133*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |13> => |a*c*c> + |Q112*b*c*c> + |Q113*c*c*c> + 2|Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + 2|Q113*a*b*c> + 2|Q123*b*b*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + |a*a*b> + |Q223*a*a*c> + 2|Q123*a*a*b> + 2|Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c> + -1|Q122>
  
  eqn |14> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b> + -1|1>
  
  eqn |15> => |b*c*c> + |Q112*c*c*c> + |Q113*a*c*c> + 2|Q112*a*b*c> + 2|Q122*a*c*c> + 2|Q123*a*a*c> + 2|Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + |a*a*c> + |Q223*a*a*a> + 2|Q123*a*b*b> + 2|Q223*a*b*c> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |16> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q113*a*a*c> + 3|Q123*a*b*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + |Q122*a*a*c> + |Q223*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q133*a*a*b> + |Q233*a*b*b> + -1|Q123>
  
  eqn |17> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |a*a*c> + 2|Q223*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |18> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b> + -1|Q233>
  
  eqn |19> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |Q133*b*c*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |b*b*c> + 2|Q223*b*c*c> + |Q233*c*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |a*c*c> + -1|Q113>
  
  eqn |20> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q113*b*c*c> + 3|Q123*a*b*c> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*a*a*c> + |Q122*b*c*c> + |Q223*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q223*a*a*b> + |Q233*a*b*b> + |Q133*a*c*c> + |Q233*a*a*c> + -1|Q123>
  
  eqn |21> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*c*c> + 2|Q123*a*a*c> + |b*c*c> + 2|Q223*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c> + -1|Q133>
  
  eqn |22> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + 3|Q123*a*b*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q122*a*a*c> + |Q223*a*c*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q133*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q133*a*a*b> + |Q233*a*b*b> + -1|Q123>
  
  eqn |23> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |Q133*b*b*b> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |a*a*c> + 2|Q223*a*b*c> + |Q233*b*b*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |a*b*b> + -1|Q223>
  
  eqn |24> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q122*c*c*c> + 2|Q123*a*c*c> + |a*c*c> + 2|Q223*a*a*c> + |Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b> + -1|Q233>
  
  eqn |25> => |a*b*b> + |Q112*b*b*b> + |Q113*b*b*c> + 2|Q112*a*b*c> + 2|Q122*b*b*c> + 2|Q123*b*c*c> + 2|Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*a*c*c> + |b*c*c> + |Q223*c*c*c> + 2|Q123*a*a*c> + 2|Q223*a*b*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c> + -1|Q133>
  
  eqn |26> => |b*b*c> + |Q112*a*b*b> + |Q113*b*b*b> + 2|Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + 2|Q113*a*b*c> + 2|Q123*a*a*b> + 2|Q133*a*b*b> + |Q122*c*c*c> + |a*c*c> + |Q223*b*c*c> + 2|Q123*a*c*c> + 2|Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b> + -1|Q233>
  
  eqn |27> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a> + -1|1>
  
  dump
  history
  history 1000
  display-v |*> #=> display-algebra v |_self>
  display-eqn |*> #=> display-algebra eqn |_self>
  table[eqn,display-eqn] rel-kets[eqn]
  save history
  display-algebra -2|1>
  display-algebra -2| >
  display-algebra 2|1>
  display-algebra 2| >
  context
  context improved ds3
  eqn |1> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c> + -1|1>
  
  eqn |2> => |a*a*c> + |Q112*a*a*a> + |Q113*a*a*b> + 2|Q112*a*b*c> + 2|Q122*a*a*b> + 2|Q123*a*b*b> + 2|Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*b*b*c> + |a*b*b> + |Q223*b*b*b> + 2|Q123*b*c*c> + 2|Q223*a*b*c> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |3> => |a*a*b> + |Q112*a*a*c> + |Q113*a*a*a> + 2|Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + 2|Q113*a*b*c> + 2|Q123*a*c*c> + 2|Q133*a*a*c> + |Q122*b*b*b> + |b*b*c> + |Q223*a*b*b> + 2|Q123*b*b*c> + 2|Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |4> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c> + -1|Q122>
  
  eqn |5> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q113*a*b*b> + 3|Q123*a*b*c> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*b*c*c> + |Q122*a*b*b> + |Q223*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q223*a*c*c> + |Q233*a*a*c> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |6> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c> + -1|Q133>
  
  eqn |7> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b> + -1|1>
  
  eqn |8> => |b*c*c> + |Q112*c*c*c> + |Q113*a*c*c> + 2|Q112*a*b*c> + 2|Q122*a*c*c> + 2|Q123*a*a*c> + 2|Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + |a*a*c> + |Q223*a*a*a> + 2|Q123*a*b*b> + 2|Q223*a*b*c> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |9> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b> + -1|Q233>
  
  eqn |10> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a> + -1|1>
  
  dump
  history
  table[eqn,display-eqn] rel-kets[eqn]
  save history

2016-03-25
  load simple-permutation-table.sw
  Pab |X> => |0>
  Pac |X> => |0>
  Pbc |X> => |0>
  
  Pba |*> #=> Pab |_self>
  Pca |*> #=> Pac |_self>
  Pcb |*> #=> Pbc |_self>
  
  -- I think these are broken!
  Pabc |*> #=> Pca Pbc Pab |_self>
  Pacb |*> #=> Pba Pcb Pac |_self>
  
  Pab |Y> => |Y>
  Pac |Y> => |Y>
  Pbc |Y> => |Y>
  
  Pab |X1> => |0>
  Pac |X1> => -1.0|X3>
  Pbc |X1> => |X2>
  
  Pab |X2> => |X3>
  Pac |X2> => |0>
  Pbc |X2> => |X1>
  
  Pab |X3> => |X2>
  Pac |X3> => -1.0|X1>
  Pbc |X3> => |0>
  
  Pac |Y1> => |Y3>
  Pab |Y1> => |Y1>
  Pbc |Y1> => |Y2>
  
  Pac |Y2> => |Y2>
  Pab |Y2> => |Y3>
  Pbc |Y2> => |Y1>
  
  Pac |Y3> => |Y1>
  Pab |Y3> => |Y2>
  Pbc |Y3> => |Y3>
  
  Pac |0> => |0>
  Pab |0> => |0>
  Pbc |0> => |0>
  dump
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  Pabc |X>
  Pacb |X>
  Pabc |Y>
  Pacb |Y>
  dump
  Pabc |*> #=> Pac Pab |_self>
  Pacb |*>  #=> Pbc Pab |_self>
  dump
  history 1000
  save simple-permutation-table.sw
  dump
  Pabc |X>
  Pacb |X>
  Pabc |Y>
  Pacb |Y>
  Pabc |X1>
  Pabc |X2>
  Pabc |X3>
  Pacb |X3>
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  Pacb |Y1>
  Pacb |Y2>\
  Pacb |Y3>
  Pabc^3 |Y1>
  Pabc^3 |Y2>
  Pabc^3 |Y3>
  Pacb^3 |Y1>
  Pacb^3 |Y2>
  Pacb^3 |Y3>
  dump
  Pabc^2 |X1>
  Pacb^2 |X1>
  Pabc^2 |X2>
  Pabc^2 |X2>
  Pacb^2 |X1>
  Pacb^2 |X1>
  Pabc |Y2>
  Pabc |Y3>
  Pacb |Y1>
  Pacb|Y2>
  Pabc^2 |Y1>
  Pabc^2 |Y2>
  Pabc^2 |Y3>
  Pabc^3 |Y2>
  Pacb^2 |Y1>
  Pacb^2 |Y2>
  Pacb^2 |Y3>
  Pac^2 |X3>
  Pac^2 |X1>
  Pac^2 |X2>
  Pbc^2 |X1>
  Pab^2 |Y1>
  Pab^2 |Y2>
  Pab^2 |Y3>
  context mod 5 operator group
  op |*> #=> mod[6] arithmetic(|_self>,|+>,|1>)
  op |0>
  op|1>
  op|2>
  op|5>
  op|6>
  op-4 |*> #=> op^4 |_self>
  op-4 |3>
  op-4^2 |3>
  history
  op-4^3 |3>
  op-4^3 |3>
  op-4^3 |2>
  op-4^3 |5>
  history
  op-5 |*> #=> op^5 |_self>
  op-5^6 |3>
  op-5^3 |4>
  op-5^6 |5>
  context algebra
  algebra(|a> + |1>,|^>,|2>)
  display-algebra algebra(|a> + |1>,|^>,|2>)
  debug on
  algebra(|a> + |1>,|^>,|2>)
  debug on
  display-algebra algebra(|a> + |1>,|^>,|2>)
  v |111> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c>
  
  v |112> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |a*b*b> + 2|Q223*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c>
  
  v |113> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |b*b*c> + 2|Q223*b*c*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c>
  
  v |122> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c>
  
  v |123> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*a*c*c> + |Q122*a*a*c> + 3|Q123*a*b*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q122*b*c*c> + |Q223*b*b*c> + |Q223*a*a*b> + |Q233*a*b*b> + |Q113*b*c*c> + |Q133*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q133*a*c*c> + |Q233*a*a*c>
  
  v |133> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c>
  
  v |211> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |Q133*c*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |a*b*b> + 2|Q223*a*b*c> + |Q233*a*c*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |b*c*c>
  
  v |212> => |a*c*c> + |Q112*b*c*c> + |Q113*c*c*c> + 2|Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + 2|Q113*a*b*c> + 2|Q123*b*b*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + |a*a*b> + |Q223*a*a*c> + 2|Q123*a*a*b> + 2|Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c>
  
  v |213> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q113*a*a*c> + 3|Q123*a*b*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + |Q122*a*a*c> + |Q223*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q133*a*a*b> + |Q233*a*b*b>
  
  v |222> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b>
  
  v |223> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |a*a*c> + 2|Q223*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b>
  
  v |233> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b>
  
  v |311> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |Q133*b*c*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |b*b*c> + 2|Q223*b*c*c> + |Q233*c*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |a*c*c>
  
  v |312> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + 3|Q123*a*b*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q122*a*a*c> + |Q223*a*c*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q133*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q133*a*a*b> + |Q233*a*b*b>
  
  v |313> => |a*b*b> + |Q112*b*b*b> + |Q113*b*b*c> + 2|Q112*a*b*c> + 2|Q122*b*b*c> + 2|Q123*b*c*c> + 2|Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*a*c*c> + |b*c*c> + |Q223*c*c*c> + 2|Q123*a*a*c> + 2|Q223*a*b*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c>
  
  v |322> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |Q133*b*b*b> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |a*a*c> + 2|Q223*a*b*c> + |Q233*b*b*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |a*b*b>
  
  v |323> => |b*b*c> + |Q112*a*b*b> + |Q113*b*b*b> + 2|Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + 2|Q113*a*b*c> + 2|Q123*a*a*b> + 2|Q133*a*b*b> + |Q122*c*c*c> + |a*c*c> + |Q223*b*c*c> + 2|Q123*a*c*c> + 2|Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b>
  
  v |333> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a>
  
  dump
  display |*> #=> display-algebra v |_self>
  dump
  history
  
  
  dump
  
  history
  display-v |*> #=> display-algebra v |_self>
  dump
  table[row,display-v] rel-kets[v]
  .
  history
  rank-table[row,display-v] rel-kets[v]
  .
  save history
  context
  context ds3
  eqn |1> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c> + -1|1>
  
  eqn |2> => |a*a*c> + |Q112*a*a*a> + |Q113*a*a*b> + 2|Q112*a*b*c> + 2|Q122*a*a*b> + 2|Q123*a*b*b> + 2|Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*b*b*c> + |a*b*b> + |Q223*b*b*b> + 2|Q123*b*c*c> + 2|Q223*a*b*c> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |3> => |a*a*b> + |Q112*a*a*c> + |Q113*a*a*a> + 2|Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + 2|Q113*a*b*c> + 2|Q123*a*c*c> + 2|Q133*a*a*c> + |Q122*b*b*b> + |b*b*c> + |Q223*a*b*b> + 2|Q123*b*b*c> + 2|Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |4> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |a*b*b> + 2|Q223*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |5> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c> + -1|Q122>
  
  eqn |6> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q113*a*b*b> + 3|Q123*a*b*c> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*b*c*c> + |Q122*a*b*b> + |Q223*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q223*a*c*c> + |Q233*a*a*c> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |7> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |b*b*c> + 2|Q223*b*c*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |8> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*a*c*c> + |Q122*a*a*c> + 3|Q123*a*b*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q122*b*c*c> + |Q223*b*b*c> + |Q223*a*a*b> + |Q233*a*b*b> + |Q113*b*c*c> + |Q133*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q133*a*c*c> + |Q233*a*a*c> + -1|Q123>
  
  eqn |9> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c> + -1|Q133>
  
  eqn |10> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |Q133*c*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |a*b*b> + 2|Q223*a*b*c> + |Q233*a*c*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |b*c*c> + -1|Q112>
  
  eqn |11> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |a*a*b> + 2|Q223*a*b*b> + |Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c> + -1|Q122>
  
  eqn |12> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*b*b*c> + |Q122*b*c*c> + 3|Q123*a*b*c> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q122*a*b*b> + |Q223*a*a*b> + |Q223*a*c*c> + |Q233*a*a*c> + |Q113*a*b*b> + |Q133*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |13> => |a*c*c> + |Q112*b*c*c> + |Q113*c*c*c> + 2|Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + 2|Q113*a*b*c> + 2|Q123*b*b*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + |a*a*b> + |Q223*a*a*c> + 2|Q123*a*a*b> + 2|Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c> + -1|Q122>
  
  eqn |14> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b> + -1|1>
  
  eqn |15> => |b*c*c> + |Q112*c*c*c> + |Q113*a*c*c> + 2|Q112*a*b*c> + 2|Q122*a*c*c> + 2|Q123*a*a*c> + 2|Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + |a*a*c> + |Q223*a*a*a> + 2|Q123*a*b*b> + 2|Q223*a*b*c> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |16> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q113*a*a*c> + 3|Q123*a*b*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + |Q122*a*a*c> + |Q223*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q133*a*a*b> + |Q233*a*b*b> + -1|Q123>
  
  eqn |17> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |a*a*c> + 2|Q223*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |18> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b> + -1|Q233>
  
  eqn |19> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |Q133*b*c*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |b*b*c> + 2|Q223*b*c*c> + |Q233*c*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |a*c*c> + -1|Q113>
  
  eqn |20> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q113*b*c*c> + 3|Q123*a*b*c> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*a*a*c> + |Q122*b*c*c> + |Q223*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q223*a*a*b> + |Q233*a*b*b> + |Q133*a*c*c> + |Q233*a*a*c> + -1|Q123>
  
  eqn |21> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*c*c> + 2|Q123*a*a*c> + |b*c*c> + 2|Q223*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c> + -1|Q133>
  
  eqn |22> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + 3|Q123*a*b*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q122*a*a*c> + |Q223*a*c*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q133*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q133*a*a*b> + |Q233*a*b*b> + -1|Q123>
  
  eqn |23> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |Q133*b*b*b> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |a*a*c> + 2|Q223*a*b*c> + |Q233*b*b*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |a*b*b> + -1|Q223>
  
  eqn |24> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q122*c*c*c> + 2|Q123*a*c*c> + |a*c*c> + 2|Q223*a*a*c> + |Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b> + -1|Q233>
  
  eqn |25> => |a*b*b> + |Q112*b*b*b> + |Q113*b*b*c> + 2|Q112*a*b*c> + 2|Q122*b*b*c> + 2|Q123*b*c*c> + 2|Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*a*c*c> + |b*c*c> + |Q223*c*c*c> + 2|Q123*a*a*c> + 2|Q223*a*b*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c> + -1|Q133>
  
  eqn |26> => |b*b*c> + |Q112*a*b*b> + |Q113*b*b*b> + 2|Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + 2|Q113*a*b*c> + 2|Q123*a*a*b> + 2|Q133*a*b*b> + |Q122*c*c*c> + |a*c*c> + |Q223*b*c*c> + 2|Q123*a*c*c> + 2|Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b> + -1|Q233>
  
  eqn |27> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a> + -1|1>
  
  dump
  history
  history 1000
  display-v |*> #=> display-algebra v |_self>
  display-eqn |*> #=> display-algebra eqn |_self>
  table[eqn,display-eqn] rel-kets[eqn]
  save history
  display-algebra -2|1>
  display-algebra -2| >
  display-algebra 2|1>
  display-algebra 2| >
  context
  context improved ds3
  eqn |1> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c> + -1|1>
  
  eqn |2> => |a*a*c> + |Q112*a*a*a> + |Q113*a*a*b> + 2|Q112*a*b*c> + 2|Q122*a*a*b> + 2|Q123*a*b*b> + 2|Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*b*b*c> + |a*b*b> + |Q223*b*b*b> + 2|Q123*b*c*c> + 2|Q223*a*b*c> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |3> => |a*a*b> + |Q112*a*a*c> + |Q113*a*a*a> + 2|Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + 2|Q113*a*b*c> + 2|Q123*a*c*c> + 2|Q133*a*a*c> + |Q122*b*b*b> + |b*b*c> + |Q223*a*b*b> + 2|Q123*b*b*c> + 2|Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |4> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c> + -1|Q122>
  
  eqn |5> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q113*a*b*b> + 3|Q123*a*b*c> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*b*c*c> + |Q122*a*b*b> + |Q223*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q223*a*c*c> + |Q233*a*a*c> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |6> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c> + -1|Q133>
  
  eqn |7> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b> + -1|1>
  
  eqn |8> => |b*c*c> + |Q112*c*c*c> + |Q113*a*c*c> + 2|Q112*a*b*c> + 2|Q122*a*c*c> + 2|Q123*a*a*c> + 2|Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + |a*a*c> + |Q223*a*a*a> + 2|Q123*a*b*b> + 2|Q223*a*b*c> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |9> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b> + -1|Q233>
  
  eqn |10> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a> + -1|1>
  
  dump
  history
  table[eqn,display-eqn] rel-kets[eqn]
  save history
  history
  [A
  history 1000
  display-eqn |*> #=> display-algebra eqn |_self>
  table[eqn,display-eqn] rel-kets[eqn]
  save history

2016-03-26
  algebra(|a>,|*>,|-1/2>)
  algebra(2|a>,|*>,|-1/2>)
  algebra(|a>,|*>,|2>)
  to-number 3|5>
  to-number |-1/2>
  q

2016-03-26
  to-number |-1/2>
  
  
   algebra(2|a>,|*>,|-1/2>)
  q

2016-03-26
  to-number 3|5>
  to-number 3|0>
  to-number -3|0>
  to-number -1|0>
  to-number -1|-1/2>
  algebra(|0>,|*>,|-1>)
  algebra(-|1>,|*>,|-1/2>)
  q

2016-03-26
  algebra(|-1/2>,|*>,-1|1>)
  q[A
  
  q

2016-03-26
  algebra(|x>,|->,|2>)
  algebra(|x>,|->,|x>)
  q

2016-03-27
  load simple-permutation-table.sw
  Pab |X> => |0>
  Pac |X> => |0>
  Pbc |X> => |0>
  
  Pba |*> #=> Pab |_self>
  Pca |*> #=> Pac |_self>
  Pcb |*> #=> Pbc |_self>
  
  -- I think these are broken!
  Pabc |*> #=> Pca Pbc Pab |_self>
  Pacb |*> #=> Pba Pcb Pac |_self>
  
  Pab |Y> => |Y>
  Pac |Y> => |Y>
  Pbc |Y> => |Y>
  
  Pab |X1> => |0>
  Pac |X1> => -1.0|X3>
  Pbc |X1> => |X2>
  
  Pab |X2> => |X3>
  Pac |X2> => |0>
  Pbc |X2> => |X1>
  
  Pab |X3> => |X2>
  Pac |X3> => -1.0|X1>
  Pbc |X3> => |0>
  
  Pac |Y1> => |Y3>
  Pab |Y1> => |Y1>
  Pbc |Y1> => |Y2>
  
  Pac |Y2> => |Y2>
  Pab |Y2> => |Y3>
  Pbc |Y2> => |Y1>
  
  Pac |Y3> => |Y1>
  Pab |Y3> => |Y2>
  Pbc |Y3> => |Y3>
  
  Pac |0> => |0>
  Pab |0> => |0>
  Pbc |0> => |0>
  dump
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  Pabc |X>
  Pacb |X>
  Pabc |Y>
  Pacb |Y>
  dump
  Pabc |*> #=> Pac Pab |_self>
  Pacb |*>  #=> Pbc Pab |_self>
  dump
  history 1000
  save simple-permutation-table.sw
  dump
  Pabc |X>
  Pacb |X>
  Pabc |Y>
  Pacb |Y>
  Pabc |X1>
  Pabc |X2>
  Pabc |X3>
  Pacb |X3>
  Pabc |Y1>
  Pabc |Y2>
  Pabc |Y3>
  Pacb |Y1>
  Pacb |Y2>\
  Pacb |Y3>
  Pabc^3 |Y1>
  Pabc^3 |Y2>
  Pabc^3 |Y3>
  Pacb^3 |Y1>
  Pacb^3 |Y2>
  Pacb^3 |Y3>
  dump
  Pabc^2 |X1>
  Pacb^2 |X1>
  Pabc^2 |X2>
  Pabc^2 |X2>
  Pacb^2 |X1>
  Pacb^2 |X1>
  Pabc |Y2>
  Pabc |Y3>
  Pacb |Y1>
  Pacb|Y2>
  Pabc^2 |Y1>
  Pabc^2 |Y2>
  Pabc^2 |Y3>
  Pabc^3 |Y2>
  Pacb^2 |Y1>
  Pacb^2 |Y2>
  Pacb^2 |Y3>
  Pac^2 |X3>
  Pac^2 |X1>
  Pac^2 |X2>
  Pbc^2 |X1>
  Pab^2 |Y1>
  Pab^2 |Y2>
  Pab^2 |Y3>
  context mod 5 operator group
  op |*> #=> mod[6] arithmetic(|_self>,|+>,|1>)
  op |0>
  op|1>
  op|2>
  op|5>
  op|6>
  op-4 |*> #=> op^4 |_self>
  op-4 |3>
  op-4^2 |3>
  history
  op-4^3 |3>
  op-4^3 |3>
  op-4^3 |2>
  op-4^3 |5>
  history
  op-5 |*> #=> op^5 |_self>
  op-5^6 |3>
  op-5^3 |4>
  op-5^6 |5>
  context algebra
  algebra(|a> + |1>,|^>,|2>)
  display-algebra algebra(|a> + |1>,|^>,|2>)
  debug on
  algebra(|a> + |1>,|^>,|2>)
  debug on
  display-algebra algebra(|a> + |1>,|^>,|2>)
  v |111> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c>
  
  v |112> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |a*b*b> + 2|Q223*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c>
  
  v |113> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |b*b*c> + 2|Q223*b*c*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c>
  
  v |122> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c>
  
  v |123> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*a*c*c> + |Q122*a*a*c> + 3|Q123*a*b*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q122*b*c*c> + |Q223*b*b*c> + |Q223*a*a*b> + |Q233*a*b*b> + |Q113*b*c*c> + |Q133*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q133*a*c*c> + |Q233*a*a*c>
  
  v |133> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c>
  
  v |211> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |Q133*c*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |a*b*b> + 2|Q223*a*b*c> + |Q233*a*c*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |b*c*c>
  
  v |212> => |a*c*c> + |Q112*b*c*c> + |Q113*c*c*c> + 2|Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + 2|Q113*a*b*c> + 2|Q123*b*b*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + |a*a*b> + |Q223*a*a*c> + 2|Q123*a*a*b> + 2|Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c>
  
  v |213> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q113*a*a*c> + 3|Q123*a*b*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + |Q122*a*a*c> + |Q223*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q133*a*a*b> + |Q233*a*b*b>
  
  v |222> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b>
  
  v |223> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |a*a*c> + 2|Q223*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b>
  
  v |233> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b>
  
  v |311> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |Q133*b*c*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |b*b*c> + 2|Q223*b*c*c> + |Q233*c*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |a*c*c>
  
  v |312> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + 3|Q123*a*b*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q122*a*a*c> + |Q223*a*c*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q133*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q133*a*a*b> + |Q233*a*b*b>
  
  v |313> => |a*b*b> + |Q112*b*b*b> + |Q113*b*b*c> + 2|Q112*a*b*c> + 2|Q122*b*b*c> + 2|Q123*b*c*c> + 2|Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*a*c*c> + |b*c*c> + |Q223*c*c*c> + 2|Q123*a*a*c> + 2|Q223*a*b*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c>
  
  v |322> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |Q133*b*b*b> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |a*a*c> + 2|Q223*a*b*c> + |Q233*b*b*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |a*b*b>
  
  v |323> => |b*b*c> + |Q112*a*b*b> + |Q113*b*b*b> + 2|Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + 2|Q113*a*b*c> + 2|Q123*a*a*b> + 2|Q133*a*b*b> + |Q122*c*c*c> + |a*c*c> + |Q223*b*c*c> + 2|Q123*a*c*c> + 2|Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b>
  
  v |333> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a>
  
  dump
  display |*> #=> display-algebra v |_self>
  dump
  history
  
  
  dump
  
  history
  display-v |*> #=> display-algebra v |_self>
  dump
  table[row,display-v] rel-kets[v]
  .
  history
  rank-table[row,display-v] rel-kets[v]
  .
  save history
  context
  context ds3
  eqn |1> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c> + -1|1>
  
  eqn |2> => |a*a*c> + |Q112*a*a*a> + |Q113*a*a*b> + 2|Q112*a*b*c> + 2|Q122*a*a*b> + 2|Q123*a*b*b> + 2|Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*b*b*c> + |a*b*b> + |Q223*b*b*b> + 2|Q123*b*c*c> + 2|Q223*a*b*c> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |3> => |a*a*b> + |Q112*a*a*c> + |Q113*a*a*a> + 2|Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + 2|Q113*a*b*c> + 2|Q123*a*c*c> + 2|Q133*a*a*c> + |Q122*b*b*b> + |b*b*c> + |Q223*a*b*b> + 2|Q123*b*b*c> + 2|Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |4> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |a*b*b> + 2|Q223*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |5> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c> + -1|Q122>
  
  eqn |6> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q113*a*b*b> + 3|Q123*a*b*c> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*b*c*c> + |Q122*a*b*b> + |Q223*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q223*a*c*c> + |Q233*a*a*c> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |7> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |b*b*c> + 2|Q223*b*c*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |8> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*a*c*c> + |Q122*a*a*c> + 3|Q123*a*b*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q122*b*c*c> + |Q223*b*b*c> + |Q223*a*a*b> + |Q233*a*b*b> + |Q113*b*c*c> + |Q133*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q133*a*c*c> + |Q233*a*a*c> + -1|Q123>
  
  eqn |9> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c> + -1|Q133>
  
  eqn |10> => |a*a*c> + 2|Q112*a*b*c> + 2|Q113*a*c*c> + |Q122*b*b*c> + 2|Q123*b*c*c> + |Q133*c*c*c> + |Q112*a*a*a> + 2|Q122*a*a*b> + 2|Q123*a*a*c> + |a*b*b> + 2|Q223*a*b*c> + |Q233*a*c*c> + |Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q223*b*b*b> + 2|Q233*b*b*c> + |b*c*c> + -1|Q112>
  
  eqn |11> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |a*a*b> + 2|Q223*a*b*b> + |Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c> + -1|Q122>
  
  eqn |12> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*b*b*c> + |Q122*b*c*c> + 3|Q123*a*b*c> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q122*a*b*b> + |Q223*a*a*b> + |Q223*a*c*c> + |Q233*a*a*c> + |Q113*a*b*b> + |Q133*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |13> => |a*c*c> + |Q112*b*c*c> + |Q113*c*c*c> + 2|Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + 2|Q113*a*b*c> + 2|Q123*b*b*c> + 2|Q133*b*c*c> + |Q122*a*a*a> + |a*a*b> + |Q223*a*a*c> + 2|Q123*a*a*b> + 2|Q223*a*b*b> + 2|Q233*a*b*c> + |Q133*a*b*b> + |Q233*b*b*b> + |b*b*c> + -1|Q122>
  
  eqn |14> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b> + -1|1>
  
  eqn |15> => |b*c*c> + |Q112*c*c*c> + |Q113*a*c*c> + 2|Q112*a*b*c> + 2|Q122*a*c*c> + 2|Q123*a*a*c> + 2|Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + |a*a*c> + |Q223*a*a*a> + 2|Q123*a*b*b> + 2|Q223*a*b*c> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |16> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q113*a*a*c> + 3|Q123*a*b*c> + |Q133*a*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + |Q122*a*a*c> + |Q223*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q133*a*a*b> + |Q233*a*b*b> + -1|Q123>
  
  eqn |17> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |a*a*c> + 2|Q223*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |18> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b> + -1|Q233>
  
  eqn |19> => |a*a*b> + 2|Q112*a*b*b> + 2|Q113*a*b*c> + |Q122*b*b*b> + 2|Q123*b*b*c> + |Q133*b*c*c> + |Q112*a*a*c> + 2|Q122*a*b*c> + 2|Q123*a*c*c> + |b*b*c> + 2|Q223*b*c*c> + |Q233*c*c*c> + |Q113*a*a*a> + 2|Q123*a*a*b> + 2|Q133*a*a*c> + |Q223*a*b*b> + 2|Q233*a*b*c> + |a*c*c> + -1|Q113>
  
  eqn |20> => 3|a*b*c> + |Q112*a*a*b> + |Q113*a*b*b> + |Q112*b*b*c> + |Q122*a*b*b> + |Q123*b*b*b> + |Q113*b*c*c> + 3|Q123*a*b*c> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*a*a*c> + |Q122*b*c*c> + |Q223*b*b*c> + |Q123*c*c*c> + |Q223*a*c*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q123*a*a*a> + |Q133*a*a*b> + |Q223*a*a*b> + |Q233*a*b*b> + |Q133*a*c*c> + |Q233*a*a*c> + -1|Q123>
  
  eqn |21> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*c*c> + 2|Q123*a*a*c> + |b*c*c> + 2|Q223*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c> + -1|Q133>
  
  eqn |22> => 3|a*b*c> + |Q112*b*b*c> + |Q113*b*c*c> + |Q112*a*a*b> + |Q122*a*b*b> + 3|Q123*a*b*c> + |Q113*a*b*b> + |Q123*b*b*b> + |Q133*b*b*c> + |Q112*a*c*c> + |Q122*b*c*c> + |Q123*c*c*c> + |Q122*a*a*c> + |Q223*a*c*c> + |Q223*b*b*c> + |Q233*b*c*c> + |Q113*a*a*c> + |Q133*a*c*c> + |Q123*a*a*a> + |Q223*a*a*b> + |Q233*a*a*c> + |Q133*a*a*b> + |Q233*a*b*b> + -1|Q123>
  
  eqn |23> => |b*c*c> + 2|Q112*a*b*c> + 2|Q113*b*b*c> + |Q122*a*a*b> + 2|Q123*a*b*b> + |Q133*b*b*b> + |Q112*c*c*c> + 2|Q122*a*c*c> + 2|Q123*b*c*c> + |a*a*c> + 2|Q223*a*b*c> + |Q233*b*b*c> + |Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q223*a*a*a> + 2|Q233*a*a*b> + |a*b*b> + -1|Q223>
  
  eqn |24> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q122*c*c*c> + 2|Q123*a*c*c> + |a*c*c> + 2|Q223*a*a*c> + |Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b> + -1|Q233>
  
  eqn |25> => |a*b*b> + |Q112*b*b*b> + |Q113*b*b*c> + 2|Q112*a*b*c> + 2|Q122*b*b*c> + 2|Q123*b*c*c> + 2|Q113*a*a*b> + 2|Q123*a*b*b> + 2|Q133*a*b*c> + |Q122*a*c*c> + |b*c*c> + |Q223*c*c*c> + 2|Q123*a*a*c> + 2|Q223*a*b*c> + 2|Q233*a*c*c> + |Q133*a*a*a> + |Q233*a*a*b> + |a*a*c> + -1|Q133>
  
  eqn |26> => |b*b*c> + |Q112*a*b*b> + |Q113*b*b*b> + 2|Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + 2|Q113*a*b*c> + 2|Q123*a*a*b> + 2|Q133*a*b*b> + |Q122*c*c*c> + |a*c*c> + |Q223*b*c*c> + 2|Q123*a*c*c> + 2|Q223*a*a*c> + 2|Q233*a*b*c> + |Q133*a*a*c> + |Q233*a*a*a> + |a*a*b> + -1|Q233>
  
  eqn |27> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a> + -1|1>
  
  dump
  history
  history 1000
  display-v |*> #=> display-algebra v |_self>
  display-eqn |*> #=> display-algebra eqn |_self>
  table[eqn,display-eqn] rel-kets[eqn]
  save history
  display-algebra -2|1>
  display-algebra -2| >
  display-algebra 2|1>
  display-algebra 2| >
  context
  context improved ds3
  eqn |1> => |a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |c*c*c> + -1|1>
  
  eqn |2> => |a*a*c> + |Q112*a*a*a> + |Q113*a*a*b> + 2|Q112*a*b*c> + 2|Q122*a*a*b> + 2|Q123*a*b*b> + 2|Q113*a*c*c> + 2|Q123*a*a*c> + 2|Q133*a*b*c> + |Q122*b*b*c> + |a*b*b> + |Q223*b*b*b> + 2|Q123*b*c*c> + 2|Q223*a*b*c> + 2|Q233*b*b*c> + |Q133*c*c*c> + |Q233*a*c*c> + |b*c*c> + -1|Q112>
  
  eqn |3> => |a*a*b> + |Q112*a*a*c> + |Q113*a*a*a> + 2|Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + 2|Q113*a*b*c> + 2|Q123*a*c*c> + 2|Q133*a*a*c> + |Q122*b*b*b> + |b*b*c> + |Q223*a*b*b> + 2|Q123*b*b*c> + 2|Q223*b*c*c> + 2|Q233*a*b*c> + |Q133*b*c*c> + |Q233*c*c*c> + |a*c*c> + -1|Q113>
  
  eqn |4> => |a*c*c> + 2|Q112*a*a*c> + 2|Q113*a*b*c> + |Q122*a*a*a> + 2|Q123*a*a*b> + |Q133*a*b*b> + |Q112*b*c*c> + 2|Q122*a*b*c> + 2|Q123*b*b*c> + |a*a*b> + 2|Q223*a*b*b> + |Q233*b*b*b> + |Q113*c*c*c> + 2|Q123*a*c*c> + 2|Q133*b*c*c> + |Q223*a*a*c> + 2|Q233*a*b*c> + |b*b*c> + -1|Q122>
  
  eqn |5> => 3|a*b*c> + |Q112*a*c*c> + |Q113*a*a*c> + |Q112*a*a*b> + |Q122*a*a*c> + |Q123*a*a*a> + |Q113*a*b*b> + 3|Q123*a*b*c> + |Q133*a*a*b> + |Q112*b*b*c> + |Q122*b*c*c> + |Q122*a*b*b> + |Q223*a*a*b> + |Q123*b*b*b> + |Q223*b*b*c> + |Q233*a*b*b> + |Q113*b*c*c> + |Q123*c*c*c> + |Q133*a*c*c> + |Q223*a*c*c> + |Q233*a*a*c> + |Q133*b*b*c> + |Q233*b*c*c> + -1|Q123>
  
  eqn |6> => |a*b*b> + 2|Q112*a*b*c> + 2|Q113*a*a*b> + |Q122*a*c*c> + 2|Q123*a*a*c> + |Q133*a*a*a> + |Q112*b*b*b> + 2|Q122*b*b*c> + 2|Q123*a*b*b> + |b*c*c> + 2|Q223*a*b*c> + |Q233*a*a*b> + |Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q223*c*c*c> + 2|Q233*a*c*c> + |a*a*c> + -1|Q133>
  
  eqn |7> => |c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + |a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |b*b*b> + -1|1>
  
  eqn |8> => |b*c*c> + |Q112*c*c*c> + |Q113*a*c*c> + 2|Q112*a*b*c> + 2|Q122*a*c*c> + 2|Q123*a*a*c> + 2|Q113*b*b*c> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q122*a*a*b> + |a*a*c> + |Q223*a*a*a> + 2|Q123*a*b*b> + 2|Q223*a*b*c> + 2|Q233*a*a*b> + |Q133*b*b*b> + |Q233*b*b*c> + |a*b*b> + -1|Q223>
  
  eqn |9> => |b*b*c> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q122*c*c*c> + 2|Q123*a*c*c> + |Q133*a*a*c> + |Q112*a*b*b> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + |a*c*c> + 2|Q223*a*a*c> + |Q233*a*a*a> + |Q113*b*b*b> + 2|Q123*b*b*c> + 2|Q133*a*b*b> + |Q223*b*c*c> + 2|Q233*a*b*c> + |a*a*b> + -1|Q233>
  
  eqn |10> => |b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + |a*a*a> + -1|1>
  
  dump
  history
  table[eqn,display-eqn] rel-kets[eqn]
  save history
  history
  [A
  history 1000
  display-eqn |*> #=> display-algebra eqn |_self>
  table[eqn,display-eqn] rel-kets[eqn]
  save history
  debug on
  ket-sort split |x a c>
  eqn |1> => -1|Q111> + |Q111*a*a*a> + 3|Q112*a*a*b> + 3|Q113*a*a*c> + 3|Q122*a*b*b> + 6|Q123*a*b*c> + 3|Q133*a*c*c> + |Q222*b*b*b> + 3|Q223*b*b*c> + 3|Q233*b*c*c> + |Q333*c*c*c>
  
  eqn |2> => |Q111*a*a*c> + -1|Q112> + |Q112*a*a*a> + 2|Q112*a*b*c> + |Q113*a*a*b> + 2|Q113*a*c*c> + 2|Q122*a*a*b> + |Q122*b*b*c> + 2|Q123*a*a*c> + 2|Q123*a*b*b> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q133*c*c*c> + |Q222*a*b*b> + 2|Q223*a*b*c> + |Q223*b*b*b> + |Q233*a*c*c> + 2|Q233*b*b*c> + |Q333*b*c*c>
  
  eqn |3> => |Q111*a*a*b> + |Q112*a*a*c> + 2|Q112*a*b*b> + -1|Q113> + |Q113*a*a*a> + 2|Q113*a*b*c> + 2|Q122*a*b*c> + |Q122*b*b*b> + 2|Q123*a*a*b> + 2|Q123*a*c*c> + 2|Q123*b*b*c> + 2|Q133*a*a*c> + |Q133*b*c*c> + |Q222*b*b*c> + |Q223*a*b*b> + 2|Q223*b*c*c> + 2|Q233*a*b*c> + |Q233*c*c*c> + |Q333*a*c*c>
  
  eqn |4> => |Q111*a*c*c> + 2|Q112*a*a*c> + |Q112*b*c*c> + 2|Q113*a*b*c> + |Q113*c*c*c> + -1|Q122> + |Q122*a*a*a> + 2|Q122*a*b*c> + 2|Q123*a*a*b> + 2|Q123*a*c*c> + 2|Q123*b*b*c> + |Q133*a*b*b> + 2|Q133*b*c*c> + |Q222*a*a*b> + |Q223*a*a*c> + 2|Q223*a*b*b> + 2|Q233*a*b*c> + |Q233*b*b*b> + |Q333*b*b*c>
  
  eqn |5> => |Q111*a*b*c> + |Q112*a*a*b> + |Q112*a*c*c> + |Q112*b*b*c> + |Q113*a*a*c> + |Q113*a*b*b> + |Q113*b*c*c> + |Q122*a*a*c> + |Q122*a*b*b> + |Q122*b*c*c> + -1|Q123> + |Q123*a*a*a> + 3|Q123*a*b*c> + |Q123*b*b*b> + |Q123*c*c*c> + |Q133*a*a*b> + |Q133*a*c*c> + |Q133*b*b*c> + |Q222*a*b*c> + |Q223*a*a*b> + |Q223*a*c*c> + |Q223*b*b*c> + |Q233*a*a*c> + |Q233*a*b*b> + |Q233*b*c*c> + |Q333*a*b*c>
  
  eqn |6> => |Q111*a*b*b> + 2|Q112*a*b*c> + |Q112*b*b*b> + 2|Q113*a*a*b> + |Q113*b*b*c> + |Q122*a*c*c> + 2|Q122*b*b*c> + 2|Q123*a*a*c> + 2|Q123*a*b*b> + 2|Q123*b*c*c> + -1|Q133> + |Q133*a*a*a> + 2|Q133*a*b*c> + |Q222*b*c*c> + 2|Q223*a*b*c> + |Q223*c*c*c> + |Q233*a*a*b> + 2|Q233*a*c*c> + |Q333*a*a*c>
  
  eqn |7> => |Q111*c*c*c> + 3|Q112*a*c*c> + 3|Q113*b*c*c> + 3|Q122*a*a*c> + 6|Q123*a*b*c> + 3|Q133*b*b*c> + -1|Q222> + |Q222*a*a*a> + 3|Q223*a*a*b> + 3|Q233*a*b*b> + |Q333*b*b*b>
  
  eqn |8> => |Q111*b*c*c> + 2|Q112*a*b*c> + |Q112*c*c*c> + |Q113*a*c*c> + 2|Q113*b*b*c> + |Q122*a*a*b> + 2|Q122*a*c*c> + 2|Q123*a*a*c> + 2|Q123*a*b*b> + 2|Q123*b*c*c> + 2|Q133*a*b*c> + |Q133*b*b*b> + |Q222*a*a*c> + -1|Q223> + |Q223*a*a*a> + 2|Q223*a*b*c> + 2|Q233*a*a*b> + |Q233*b*b*c> + |Q333*a*b*b>
  
  eqn |9> => |Q111*b*b*c> + |Q112*a*b*b> + 2|Q112*b*c*c> + 2|Q113*a*b*c> + |Q113*b*b*b> + 2|Q122*a*b*c> + |Q122*c*c*c> + 2|Q123*a*a*b> + 2|Q123*a*c*c> + 2|Q123*b*b*c> + |Q133*a*a*c> + 2|Q133*a*b*b> + |Q222*a*c*c> + 2|Q223*a*a*c> + |Q223*b*c*c> + -1|Q233> + |Q233*a*a*a> + 2|Q233*a*b*c> + |Q333*a*a*b>
  
  eqn |10> => |Q111*b*b*b> + 3|Q112*b*b*c> + 3|Q113*a*b*b> + 3|Q122*b*c*c> + 6|Q123*a*b*c> + 3|Q133*a*a*b> + |Q222*c*c*c> + 3|Q223*a*c*c> + 3|Q233*a*a*c> + -1|Q333> + |Q333*a*a*a>
  
  table[eqn,display-eqn] rel-kets[eqn]
  .
  q

2016-03-27
  display-eqn |*> #=> display-algebra eqn |_self>
  table[eqn,display-eqn] rel-kets[eqn]
  eqn |1> => -1|1> + |a*a*a*a> + -1|b*b*b*b> + |c*c*c*c> + -1|d*d*d*d> + 4|Q1112*a*a*a*b> + 4|Q1113*a*a*a*c> + 4|Q1114*a*a*a*d> + 6|Q1122*a*a*b*b> + 12|Q1123*a*a*b*c> + 12|Q1124*a*a*b*d> + 6|Q1133*a*a*c*c> + 12|Q1134*a*a*c*d> + 6|Q1144*a*a*d*d> + 4|Q1222*a*b*b*b> + 12|Q1223*a*b*b*c> + 12|Q1224*a*b*b*d> + 12|Q1233*a*b*c*c> + 24|Q1234*a*b*c*d> + 12|Q1244*a*b*d*d> + 4|Q1333*a*c*c*c> + 12|Q1334*a*c*c*d> + 12|Q1344*a*c*d*d> + 4|Q1444*a*d*d*d> + 4|Q2223*b*b*b*c> + 4|Q2224*b*b*b*d> + 6|Q2233*b*b*c*c> + 12|Q2234*b*b*c*d> + 6|Q2244*b*b*d*d> + 4|Q2333*b*c*c*c> + 12|Q2334*b*c*c*d> + 12|Q2344*b*c*d*d> + 4|Q2444*b*d*d*d> + 4|Q3334*c*c*c*d> + 6|Q3344*c*c*d*d> + 4|Q3444*c*d*d*d>
  table[eqn,display-eqn] rel-kets[eqn]
  .
  .
  q

2016-03-27
  op |a> => split |b c d>
  op |b> => split |a c d>
  op |c> => split |a b d>
  op |d> => split |a b c>
  matrix[op]
  q

2016-03-27
  cd
  ls
  cd networks
  files
  load network-6-a.sw
  dump
  merged-matrix[op,op,op,op,op,op]
  files
  load network-6-b.sw
  merged-matrix[op,op,op,op,op,op]
  q

2016-03-27
  op |a> => split |b d e c>
  op |b> => split |a c d e>
  op |c> => split |a b d e>
  op |d> => split |a b c>
  op |e> => split |b a c>
  matrix[op]
  op |a> => split |b c d>
  op |b> => split |a c d e>
  op |c> => split |a b d>
  op |d> => split |a b c e>
  op |e> => split |b d>
  matrix[op]
  q

2016-03-27
  load network-13.sw
  matrix[op]
  load network-14.sw
  matrix[op]
  q

2016-03-28
  is-a |Socrates> => |human>
  is-a |human> => |mortal>
  exp-max[is-a] |Socrates>
  q

2016-03-29
  factor |number: 120>
  factor |number: 48>
  factor |number: 90>
  q

2016-04-03
  is-a |Jane> => |mother>
  is-a |mother> => |female>
  is-a |mother> => |female> + |has children>
  exp-max[is-a] |Jane>
  save history

2016-04-04
  is-a |Jane> => |mother>
  is-a |mother> => |female>
  is-a |mother> => |female> + |has children>
  exp-max[is-a] |Jane>
  save history
  q

2016-04-04
  load fred-sam-friends.sw
  dump
  find-inverse[friends]
  dump
  all-friends |*> #=> friends |_self> + inverse-friends |_self>
  dump
  exp-max[all-friends] |Fred>
  dump
  clean exp-max[all-friends] |Sam>
  clean exp-max[all-friends] |Rober>
  clean exp-max[all-friends] |Emma>
  q

2016-04-08
  ket-simm(letter-ngrams[1,2,3] |thank you for not smoking>,letter-ngrams[1,2,3] |thank you for smoking>)
  q

2016-04-08
  non-Abelian-algebra(|A> + |B> + |C>,|^>,|3>)
  q

2016-04-08
  load mnist-train-images.sw
  load mnist-test-images.sw
  simm-op |*> #=> select[1,20] similar[layer-0] |_self>
  q

2016-04-10
  load mnist-1--image-ngram-superpositions-10.sw
  dump
  average-categorize[layer-0,0.9,phi,layer-1]
  dump
  how-many rel-kets[layer-0]
  how-many rel-kets[layer-1]
  save history

2016-04-10
  load mnist-1--image-ngram-superpositions-10.sw
  dump
  average-categorize[layer-0,0.9,phi,layer-1]
  dump
  how-many rel-kets[layer-0]
  how-many rel-kets[layer-1]
  save history
  history
  save mnist-1--save-average-categorize--0_9.sw
  dump
  rescale[255] layer-1 |phi: 140>
  debug on
  rescale[255] layer-1 |phi: 140>
  rescale-op |*> #=> rescale[255] layer-1 |_self>
  map[rescale-op,rescaled-layer-1] rel-kets[layer-1]
  dump
  history
  rel-kets[rescaled-layer-1]
  history
  save mnist-1--save-average-categorize--0_9--rescaled-layer-1.sw
  dump
  q

2016-04-10
  load mnist-1--image-ngram-superpositions-10.sw
  dump
  average-categorize[layer-0,0.8,phi,layer-1]
  dump
  how-many rel-kets[layer-0]
  how-many rel-kets[layer-1]
  rescale-op |*> #=> rescale[255] layer-1 |_self>
  map[rescale-op,rescaled-layer-1] rel-kets[layer-1]
  dump
  save mnist-1--save-average-categorize--0_8--rescaled-layer-1.sw
  q

2016-04-12
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.8,phi,layer-1]
  save mnist-100--save-average-categorize--0_8.sw
  how-many rel-kets[layer-0]
  how-many rel-kets[layer-1]
  history
  q

2016-04-12
  load mnist-100--save-average-categorize--0_8.sw
  how-many rel-kets[layer-1]
  how-many-pixels |*> #=> how-many layer-1 |_self>
  table[node,how-many-pixels] reverse sort-by[how-many-pixels] rel-kets[layer-1]
  q

2016-04-12
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.5,phi,layer-1]
  how-many rel-kets[layer-0]
  how-many rel-kets[layer-1]
  q

2016-04-12
  
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.5,phi,layer-1]
  history
  save mnist-100--save-average-categorize--0_5.sw
  q

2016-04-12
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.6,phi,layer-1]
  how-many rel-kets[layer-1]
  save mnist-100--save-average-categorize--0_6.sw
  q

2016-04-13
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.7,phi,layer-1]
  history
  save mnist-100--save-average-categorize--0_7.sw
  how-many rel-kets[layer-1]
  history
  q

2016-04-13
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.65,phi,layer-1]
  history
  save mnist-100--save-average-categorize--0_65.sw
  how-many rel-kets[layer-1]
  q

2016-04-14
  load mnist-test-1--image-ngram-superpositions-10.sw
  mnist-100--layer-1--0_5.sw
  load mnist-100--layer-1--0_5.sw
  dump
  simm-op |*> #=> select[1,25] similar[layer-0,layer-1] |_self>
  save history

2016-04-14
  load mnist-test-1--image-ngram-superpositions-10.sw
  mnist-100--layer-1--0_5.sw
  load mnist-100--layer-1--0_5.sw
  dump
  simm-op |*> #=> select[1,25] similar[layer-0,layer-1] |_self>
  save history
  map[simm-op,similarity] rel-kets[layer-0] |>
  rel-kets[layer-0]
  similarity |mnist-image-4: 10: 8: 7>
  history
  select[1,1][
  
  
  
  
  
  
  
  
  
  history
  debug on
  history
  select[1,1] similarity |mnist-image-4: 10: 8: 7>
  save mnist-test-1--0_5-similarity.sw
  history
  q

2016-04-14
  load mnist-test-1--0_5-similarity.sw
  debug on
  select[1,1] similar-input[layer-1] layer-0 |mnist-image-4: 10: 0: 16>
  layer-1 |phi: 2>
  q

2016-04-14
  debug on
  subtraction-invert[255] 3.7 subtraction-invert[255] 3|x>
  q

2016-04-21
  load small-lenna-edge-40--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.7,phi,layer-1]
  history
  save small-lenna-edge-40--save-average-categorize--0_7.sw
  save history

2016-04-22
  load small-lenna-edge-40--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.7,phi,layer-1]
  history
  save small-lenna-edge-40--save-average-categorize--0_7.sw
  save history
  history
  how-many rel-kets[layer-0]
  how-many rel-kets[layer-1]
  reset
  load small-lenna-edge-40--image-ngram-superpositions-10.sw
  average-categorize[layer-0,0.4,phi,layer-1]
  history
  save small-lenna-edge-40--save-average-categorize--0_4.sw
  how-many rel-kets[layer-1]
  history
  q

2016-04-27
  load diary-index--full-k5.sw
  q

2016-04-28
  is-diary |*> => |no>
  is-dairy |diary: *> => |yes>
  is-comment |*> => |no>
  is-comment |comment: *> => |yes>
  dump
  is-diary |x>
  is-diary |diary: x>
  is-diary |diary: fish>
  q

2016-04-28
  the |list> => |a: fish> + |a: cat> + |b: rat> + |a: dog> + |b: horse> + |c: house>
  the |list>
  is-a |*> => |no>
  is-a |a: *> => |yes>
  is-b |*> => |no>
  is-b |b: *> => |yes>
  dump
  such-that[is-a] the |list>
  such-that[is-b] the |list>
  q

2016-05-01
  encode |A> => pick[20] range(|1>,|400>)
  dump
  history
  encode |B> => pick[20] range(|1>,|400>)
  dump
  ket-simm(split|a b>,split|a c>)
  ket-simm(encode|A>,encode|B>)
  history
  the |range> => range(|1>,|2000>)
  ket-simm(pick[40] the |range>,pick[40] the |range>)
  .
  .
  .
  .
  .
  .
  save history

2016-05-03
  encode |A> => pick[20] range(|1>,|400>)
  dump
  history
  encode |B> => pick[20] range(|1>,|400>)
  dump
  ket-simm(split|a b>,split|a c>)
  ket-simm(encode|A>,encode|B>)
  history
  the |range> => range(|1>,|2000>)
  ket-simm(pick[40] the |range>,pick[40] the |range>)
  .
  .
  .
  .
  .
  .
  save history
  history
  do-you-know encode |A>
  do-you-know encode |C>
  extract-category |a: b: c: d>
  pattern |node: 1> => |fish>
  pattern |node: 2> => |cat>
  pattern |node: 3> => |dog>
  pattern |node: 4> => |horse>
  pattern |node: 5> => |mouse>
  dump
  rel-kets[pattern] |>
  pattern rel-kets[pattern] |>
  handle-miss |*> #=> if (do-you-know clean |_self>,|_self>,rel-kets[pattern] |>)
  handlie-miss |>
  handle-miss |>
  handle-miss |node: 3>
  handle-miss 0.2 |node: 4>
  history
  save history

2016-05-03
  encode |A> => pick[20] range(|1>,|400>)
  dump
  history
  encode |B> => pick[20] range(|1>,|400>)
  dump
  ket-simm(split|a b>,split|a c>)
  ket-simm(encode|A>,encode|B>)
  history
  the |range> => range(|1>,|2000>)
  ket-simm(pick[40] the |range>,pick[40] the |range>)
  .
  .
  .
  .
  .
  .
  save history
  history
  do-you-know encode |A>
  do-you-know encode |C>
  extract-category |a: b: c: d>
  pattern |node: 1> => |fish>
  pattern |node: 2> => |cat>
  pattern |node: 3> => |dog>
  pattern |node: 4> => |horse>
  pattern |node: 5> => |mouse>
  dump
  rel-kets[pattern] |>
  pattern rel-kets[pattern] |>
  handle-miss |*> #=> if (do-you-know clean |_self>,|_self>,rel-kets[pattern] |>)
  handlie-miss |>
  handle-miss |>
  handle-miss |node: 3>
  handle-miss 0.2 |node: 4>
  history
  save history
  handle-miss |>
  pattern handle-miss |>
  pattern handle-miss |node: 2>
  save history

2016-05-04
  encode |A> => pick[20] range(|1>,|400>)
  dump
  history
  encode |B> => pick[20] range(|1>,|400>)
  dump
  ket-simm(split|a b>,split|a c>)
  ket-simm(encode|A>,encode|B>)
  history
  the |range> => range(|1>,|2000>)
  ket-simm(pick[40] the |range>,pick[40] the |range>)
  .
  .
  .
  .
  .
  .
  save history
  history
  do-you-know encode |A>
  do-you-know encode |C>
  extract-category |a: b: c: d>
  pattern |node: 1> => |fish>
  pattern |node: 2> => |cat>
  pattern |node: 3> => |dog>
  pattern |node: 4> => |horse>
  pattern |node: 5> => |mouse>
  dump
  rel-kets[pattern] |>
  pattern rel-kets[pattern] |>
  handle-miss |*> #=> if (do-you-know clean |_self>,|_self>,rel-kets[pattern] |>)
  handlie-miss |>
  handle-miss |>
  handle-miss |node: 3>
  handle-miss 0.2 |node: 4>
  history
  save history
  handle-miss |>
  pattern handle-miss |>
  pattern handle-miss |node: 2>
  save history
  q

2016-05-05
  load mnist-1000--image-ngram-superpositions-4.sw
  history
  average-categorize[layer-0,0.5,phi,layer-1]
  history
  how-many rel-kets[layer-0]
  how-many rel-kets[layer-1]
  save mnist-1000--k_4--save-average-categorize--0_5.sw
  history
  q

2016-05-05
  load mnist-1000--k_4--layer-1--0_5.sw
  dump
  ket-simm (layer-1 |phi: 96>,layer-1 |phi: 95>)
  simm |*> #=> 100 ket-simm(layer-1 |phi: 1>,layer-1 |_self>)
  simm |phi: 2>
  table[node,simm] rel-kets[layer-1]
  history
  load small-lenna-edge-40--layer-1--0_4.sw
  table[node,simm] rel-kets[layer-1]
  
  history
  simm-1 |*> #=> 100 ket-simm(layer-1 |phi: 1>,layer-1 |_self>)
  simm-2 |*> #=> 100 ket-simm(layer-1 |phi: 2>,layer-1 |_self>)
  simm-3 |*> #=> 100 ket-simm(layer-1 |phi: 3>,layer-1 |_self>)
  simm-4 |*> #=> 100 ket-simm(layer-1 |phi: 4>,layer-1 |_self>)
  simm-5 |*> #=> 100 ket-simm(layer-1 |phi: 5>,layer-1 |_self>)
  simm-6 |*> #=> 100 ket-simm(layer-1 |phi: 6>,layer-1 |_self>)
  dump |*>
  history
  table[node,simm-1,simm-2,simm-3,simm-4,simm-5,simm-6] rel-kets[layer-1]
  
  history
  save history

2016-05-05
  load mnist-1000--image-ngram-superpositions-4.sw
  average-categorize[layer-0,0.4,phi,layer-1]
  save mnist-1000--k_4--save-average-categorize--0_4.sw
  how-many rel-kets[layer-0]
  q

2016-05-05
  load mnist-1000--k_4--layer-1--0_5.sw
  dump
  ket-simm (layer-1 |phi: 96>,layer-1 |phi: 95>)
  simm |*> #=> 100 ket-simm(layer-1 |phi: 1>,layer-1 |_self>)
  simm |phi: 2>
  table[node,simm] rel-kets[layer-1]
  history
  load small-lenna-edge-40--layer-1--0_4.sw
  table[node,simm] rel-kets[layer-1]
  
  history
  simm-1 |*> #=> 100 ket-simm(layer-1 |phi: 1>,layer-1 |_self>)
  simm-2 |*> #=> 100 ket-simm(layer-1 |phi: 2>,layer-1 |_self>)
  simm-3 |*> #=> 100 ket-simm(layer-1 |phi: 3>,layer-1 |_self>)
  simm-4 |*> #=> 100 ket-simm(layer-1 |phi: 4>,layer-1 |_self>)
  simm-5 |*> #=> 100 ket-simm(layer-1 |phi: 5>,layer-1 |_self>)
  simm-6 |*> #=> 100 ket-simm(layer-1 |phi: 6>,layer-1 |_self>)
  dump |*>
  history
  table[node,simm-1,simm-2,simm-3,simm-4,simm-5,simm-6] rel-kets[layer-1]
  
  history
  save history
  q

2016-05-06
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  q

2016-05-06
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  history
  save mnist-100--k_10--ave-cat-suppress--0_4.sw
  q

2016-05-07
  load mnist-1000--image-ngram-superpositions-4.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  clean (-2|x> + 0|y> + 3|z>)
  debug on
  clean (-2|x> + 0|y> + 3|z>)
  history
  q

2016-05-07
  load mnist-1000--image-ngram-superpositions-4.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  history
  save mnist-1000--k_4--ave-cat-suppress--0_4.sw
  history
  how-many rel-kets[layer-0]
  how-many rel-kets[layer-1]
  q

2016-05-08
  debug on
  pos (-3|x> + 0|y> + 7|z>)
  reset
  load mnist-1000--image-ngram-superpositions-4.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  history
  save mnist-1000--k_4--ave-cat-suppress--0_4.sw
  q

2016-05-08
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  layer-1 |phi: 1>
  layer-1 |phi: 2>
  history
  save mnist-100--k_10--ave-cat-suppress--0_4.sw
  q

2016-05-08
  load mnist-100--image-ngram-superpositions-10.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  save mnist-100--k_10--ave-cat-rescale--0_4.sw
  how-many rel-kets[layer-0]
  q

2016-05-08
  load mnist-1000--image-ngram-superpositions-4.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  save mnist-1000--k_4--ave-cat-rescale--0_4.sw
  how-many rel-kets[layer-0]
  layer-1 |phi: 81>
  q

2016-05-08
  load mnist-1000--image-ngram-superpositions-4.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  save mnist-1000--k_4--ave-cat-rescale--0_4.sw
  history
  how-many rel-kets[layer-0]
  q

2016-05-08
  load mnist-1000--image-ngram-superpositions-4.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  history
  save mnist-1000--k_4--ave-cat-final-rescale--0_4.sw
  how-many rel-kets[layer-0]
  q

2016-05-08
  load mnist-1000--image-ngram-superpositions-5.sw
  average-categorize-suppress[layer-0,0.4,phi,layer-1]
  save mnist-1000--k_5--ave-cat-final-rescale--0_4.sw
  how-many rel-kets[layer-0]
  q

2016-05-08
  0 split |a b c>
  ket-simm(0 split |a b c>,0 split |a b c>)
  q

2016-05-10
  the |pattern> => absolute-noise[10] 0 range(|1>,|20>)
  dump
  noise-1 |sample> => absolute-noise[7] the |pattern>
  dump
  history
  context adding patterns
    the |pattern> => absolute-noise[10] 0 range(|1>,|20>)
    noise-1 |sample> => absolute-noise[7] the |pattern>
    noise-2 |sample> => absolute-noise[7] the |pattern>
    noise-3 |sample> => absolute-noise[7] the |pattern>
    noise-4 |sample> => absolute-noise[7] the |pattern>
    noise-5 |sample> => absolute-noise[7] the |pattern>
    noise-6 |sample> => absolute-noise[7] the |pattern>
    noise-7 |sample> => absolute-noise[7] the |pattern>
    noise-8 |sample> => absolute-noise[7] the |pattern>
    noise-9 |sample> => absolute-noise[7] the |pattern>
    noise-10 |sample> => absolute-noise[7] the |pattern>
    noise-11 |sample> => absolute-noise[7] the |pattern>
    noise-12 |sample> => absolute-noise[7] the |pattern>
    noise-13 |sample> => absolute-noise[7] the |pattern>
    noise-14 |sample> => absolute-noise[7] the |pattern>
    noise-15 |sample> => absolute-noise[7] the |pattern>
    noise-16 |sample> => absolute-noise[7] the |pattern>
    noise-17 |sample> => absolute-noise[7] the |pattern>
    noise-18 |sample> => absolute-noise[7] the |pattern>
    noise-19 |sample> => absolute-noise[7] the |pattern>
    noise-20 |sample> => absolute-noise[7] the |pattern>
  
  dump
  reset
  context adding noisy patterns
    the |pattern> => absolute-noise[10] 0 range(|1>,|20>)
    noise |sample 1> => absolute-noise[7] the |pattern>
    noise |sample 2> => absolute-noise[7] the |pattern>
    noise |sample 3> => absolute-noise[7] the |pattern>
    noise |sample 4> => absolute-noise[7] the |pattern>
    noise |sample 5> => absolute-noise[7] the |pattern>
    noise |sample 6> => absolute-noise[7] the |pattern>
    noise |sample 7> => absolute-noise[7] the |pattern>
    noise |sample 8> => absolute-noise[7] the |pattern>
    noise |sample 9> => absolute-noise[7] the |pattern>
    noise |sample 10> => absolute-noise[7] the |pattern>
    noise |sample 11> => absolute-noise[7] the |pattern>
    noise |sample 12> => absolute-noise[7] the |pattern>
    noise |sample 13> => absolute-noise[7] the |pattern>
    noise |sample 14> => absolute-noise[7] the |pattern>
    noise |sample 15> => absolute-noise[7] the |pattern>
    noise |sample 16> => absolute-noise[7] the |pattern>
    noise |sample 17> => absolute-noise[7] the |pattern>
    noise |sample 18> => absolute-noise[7] the |pattern>
    noise |sample 19> => absolute-noise[7] the |pattern>
    noise |sample 20> => absolute-noise[7] the |pattern>
  
  dump
  ket-simm(noise |sample 20>,the |pattern>)
  ket-simm(noise |sample 19>,the |pattern>)
  similarity |*> #=> push-float 100 ket-simm(the |pattern>,noise |_self>)
  rel-kets[noise]
  table[node,similarity] rel-kets[noise]
  history
  
  
  ave |result 1> => noise select[1,1] rel-kets[noise]
  ave |result 2> => noise select[1,2] rel-kets[noise]
  ave |result 3> => noise select[1,3] rel-kets[noise]
  ave |result 4> => noise select[1,4] rel-kets[noise]
  ave |result 5> => noise select[1,5] rel-kets[noise]
  ave |result 6> => noise select[1,6] rel-kets[noise]
  ave |result 7> => noise select[1,7] rel-kets[noise]
  ave |result 8> => noise select[1,8] rel-kets[noise]
  ave |result 9> => noise select[1,9] rel-kets[noise]
  ave |result 10> => noise select[1,10] rel-kets[noise]
  ave |result 11> => noise select[1,11] rel-kets[noise]
  ave |result 12> => noise select[1,12] rel-kets[noise]
  ave |result 13> => noise select[1,13] rel-kets[noise]
  ave |result 14> => noise select[1,14] rel-kets[noise]
  ave |result 15> => noise select[1,15] rel-kets[noise]
  ave |result 16> => noise select[1,16] rel-kets[noise]
  ave |result 17> => noise select[1,17] rel-kets[noise]
  ave |result 18> => noise select[1,18] rel-kets[noise]
  ave |result 19> => noise select[1,19] rel-kets[noise]
  ave |result 20> => noise select[1,20] rel-kets[noise]
  
  averaged-similarity |*> #=> push-float 100 ket-simm(the |pattern>,ave |_self>)
  dump
  ave |result 1> => noise select[1,1] rel-kets[noise] |>
  ave |result 2> => noise select[1,2] rel-kets[noise] |>
  ave |result 3> => noise select[1,3] rel-kets[noise] |>
  ave |result 4> => noise select[1,4] rel-kets[noise] |>
  ave |result 5> => noise select[1,5] rel-kets[noise] |>
  ave |result 6> => noise select[1,6] rel-kets[noise] |>
  ave |result 7> => noise select[1,7] rel-kets[noise] |>
  ave |result 8> => noise select[1,8] rel-kets[noise] |>
  ave |result 9> => noise select[1,9] rel-kets[noise] |>
  ave |result 10> => noise select[1,10] rel-kets[noise] |>
  ave |result 11> => noise select[1,11] rel-kets[noise] |>
  ave |result 12> => noise select[1,12] rel-kets[noise] |>
  ave |result 13> => noise select[1,13] rel-kets[noise] |>
  ave |result 14> => noise select[1,14] rel-kets[noise] |>
  ave |result 15> => noise select[1,15] rel-kets[noise] |>
  ave |result 16> => noise select[1,16] rel-kets[noise] |>
  ave |result 17> => noise select[1,17] rel-kets[noise] |>
  ave |result 18> => noise select[1,18] rel-kets[noise] |>
  ave |result 19> => noise select[1,19] rel-kets[noise] |>
  ave |result 20> => noise select[1,20] rel-kets[noise] |>
  
  dump
  table[node,averaged-similarity] rel-kets[ave]
  context adding noisy patterns v2
    the |pattern> => absolute-noise[10] 0 range(|1>,|20>)
    noise |sample 1> => absolute-noise[7] the |pattern>
    noise |sample 2> => absolute-noise[7] the |pattern>
    noise |sample 3> => absolute-noise[7] the |pattern>
    noise |sample 4> => absolute-noise[7] the |pattern>
    noise |sample 5> => absolute-noise[7] the |pattern>
    noise |sample 6> => absolute-noise[7] the |pattern>
    noise |sample 7> => absolute-noise[7] the |pattern>
    noise |sample 8> => absolute-noise[7] the |pattern>
    noise |sample 9> => absolute-noise[7] the |pattern>
    noise |sample 10> => absolute-noise[7] the |pattern>
    noise |sample 11> => absolute-noise[7] the |pattern>
    noise |sample 12> => absolute-noise[7] the |pattern>
    noise |sample 13> => absolute-noise[7] the |pattern>
    noise |sample 14> => absolute-noise[7] the |pattern>
    noise |sample 15> => absolute-noise[7] the |pattern>
    noise |sample 16> => absolute-noise[7] the |pattern>
    noise |sample 17> => absolute-noise[7] the |pattern>
    noise |sample 18> => absolute-noise[7] the |pattern>
    noise |sample 19> => absolute-noise[7] the |pattern>
    noise |sample 20> => absolute-noise[7] the |pattern>
  
    noise |sample 21> => absolute-noise[7] the |pattern>
    noise |sample 22> => absolute-noise[7] the |pattern>
    noise |sample 23> => absolute-noise[7] the |pattern>
    noise |sample 24> => absolute-noise[7] the |pattern>
    noise |sample 25> => absolute-noise[7] the |pattern>
    noise |sample 26> => absolute-noise[7] the |pattern>
    noise |sample 27> => absolute-noise[7] the |pattern>
    noise |sample 28> => absolute-noise[7] the |pattern>
    noise |sample 29> => absolute-noise[7] the |pattern>
    noise |sample 30> => absolute-noise[7] the |pattern>
    noise |sample 31> => absolute-noise[7] the |pattern>
    noise |sample 32> => absolute-noise[7] the |pattern>
    noise |sample 33> => absolute-noise[7] the |pattern>
    noise |sample 34> => absolute-noise[7] the |pattern>
    noise |sample 35> => absolute-noise[7] the |pattern>
    noise |sample 36> => absolute-noise[7] the |pattern>
    noise |sample 37> => absolute-noise[7] the |pattern>
    noise |sample 38> => absolute-noise[7] the |pattern>
    noise |sample 39> => absolute-noise[7] the |pattern>
    noise |sample 40> => absolute-noise[7] the |pattern>
  dump
  similarity |*> #=> push-float 100 ket-simm(the |pattern>,noise |_self>)
  table[node,similarity] rel-kets[noise]
  ave |result 1> => noise select[1,1] rel-kets[noise] |>
  ave |result 2> => noise select[1,2] rel-kets[noise] |>
  ave |result 3> => noise select[1,3] rel-kets[noise] |>
  ave |result 4> => noise select[1,4] rel-kets[noise] |>
  ave |result 5> => noise select[1,5] rel-kets[noise] |>
  ave |result 6> => noise select[1,6] rel-kets[noise] |>
  ave |result 7> => noise select[1,7] rel-kets[noise] |>
  ave |result 8> => noise select[1,8] rel-kets[noise] |>
  ave |result 9> => noise select[1,9] rel-kets[noise] |>
  ave |result 10> => noise select[1,10] rel-kets[noise] |>
  ave |result 11> => noise select[1,11] rel-kets[noise] |>
  ave |result 12> => noise select[1,12] rel-kets[noise] |>
  ave |result 13> => noise select[1,13] rel-kets[noise] |>
  ave |result 14> => noise select[1,14] rel-kets[noise] |>
  ave |result 15> => noise select[1,15] rel-kets[noise] |>
  ave |result 16> => noise select[1,16] rel-kets[noise] |>
  ave |result 17> => noise select[1,17] rel-kets[noise] |>
  ave |result 18> => noise select[1,18] rel-kets[noise] |>
  ave |result 19> => noise select[1,19] rel-kets[noise] |>
  ave |result 20> => noise select[1,20] rel-kets[noise] |>
  
  ave |result 21> => noise select[1,21] rel-kets[noise] |>
  ave |result 22> => noise select[1,22] rel-kets[noise] |>
  ave |result 23> => noise select[1,23] rel-kets[noise] |>
  ave |result 24> => noise select[1,24] rel-kets[noise] |>
  ave |result 25> => noise select[1,25] rel-kets[noise] |>
  ave |result 26> => noise select[1,26] rel-kets[noise] |>
  ave |result 27> => noise select[1,27] rel-kets[noise] |>
  ave |result 28> => noise select[1,28] rel-kets[noise] |>
  ave |result 29> => noise select[1,29] rel-kets[noise] |>
  ave |result 30> => noise select[1,30] rel-kets[noise] |>
  ave |result 31> => noise select[1,31] rel-kets[noise] |>
  ave |result 32> => noise select[1,32] rel-kets[noise] |>
  ave |result 33> => noise select[1,33] rel-kets[noise] |>
  ave |result 34> => noise select[1,34] rel-kets[noise] |>
  ave |result 35> => noise select[1,35] rel-kets[noise] |>
  ave |result 36> => noise select[1,36] rel-kets[noise] |>
  ave |result 37> => noise select[1,37] rel-kets[noise] |>
  ave |result 38> => noise select[1,38] rel-kets[noise] |>
  ave |result 39> => noise select[1,39] rel-kets[noise] |>
  ave |result 40> => noise select[1,40] rel-kets[noise] |>
  
  dump
  averaged-similarity |*> #=> push-float 100 ket-simm(the |pattern>,ave |_self>)
  table[node,averaged-similarity] rel-kets[ave]
  the |pattern>
  similarity |*> #=> round[3] push-float 100 ket-simm(the |pattern>,noise |_self>)
  table[node,similarity] rel-kets[noise]
  averaged-similarity |*> #=> round[3] push-float 100 ket-simm(the |pattern>,ave |_self>)
  table[node,averaged-similarity] rel-kets[ave]
  intersection |result 1> => intn[noise] select[1,1] rel-kets[noise] |>
  intersection |result 2> => intn[noise] select[1,2] rel-kets[noise] |>
  intersection |result 3> => intn[noise] select[1,3] rel-kets[noise] |>
  intersection |result 4> => intn[noise] select[1,4] rel-kets[noise] |>
  intersection |result 5> => intn[noise] select[1,5] rel-kets[noise] |>
  intersection |result 6> => intn[noise] select[1,6] rel-kets[noise] |>
  intersection |result 7> => intn[noise] select[1,7] rel-kets[noise] |>
  intersection |result 8> => intn[noise] select[1,8] rel-kets[noise] |>
  intersection |result 9> => intn[noise] select[1,9] rel-kets[noise] |>
  intersection |result 10> => intn[noise] select[1,10] rel-kets[noise] |>
  intersection |result 11> => intn[noise] select[1,11] rel-kets[noise] |>
  intersection |result 12> => intn[noise] select[1,12] rel-kets[noise] |>
  intersection |result 13> => intn[noise] select[1,13] rel-kets[noise] |>
  intersection |result 14> => intn[noise] select[1,14] rel-kets[noise] |>
  intersection |result 15> => intn[noise] select[1,15] rel-kets[noise] |>
  intersection |result 16> => intn[noise] select[1,16] rel-kets[noise] |>
  intersection |result 17> => intn[noise] select[1,17] rel-kets[noise] |>
  intersection |result 18> => intn[noise] select[1,18] rel-kets[noise] |>
  intersection |result 19> => intn[noise] select[1,19] rel-kets[noise] |>
  intersection |result 20> => intn[noise] select[1,20] rel-kets[noise] |>
  intersection |result 21> => intn[noise] select[1,21] rel-kets[noise] |>
  intersection |result 22> => intn[noise] select[1,22] rel-kets[noise] |>
  intersection |result 23> => intn[noise] select[1,23] rel-kets[noise] |>
  intersection |result 24> => intn[noise] select[1,24] rel-kets[noise] |>
  intersection |result 25> => intn[noise] select[1,25] rel-kets[noise] |>
  intersection |result 26> => intn[noise] select[1,26] rel-kets[noise] |>
  intersection |result 27> => intn[noise] select[1,27] rel-kets[noise] |>
  intersection |result 28> => intn[noise] select[1,28] rel-kets[noise] |>
  intersection |result 29> => intn[noise] select[1,29] rel-kets[noise] |>
  intersection |result 30> => intn[noise] select[1,30] rel-kets[noise] |>
  intersection |result 31> => intn[noise] select[1,31] rel-kets[noise] |>
  intersection |result 32> => intn[noise] select[1,32] rel-kets[noise] |>
  intersection |result 33> => intn[noise] select[1,33] rel-kets[noise] |>
  intersection |result 34> => intn[noise] select[1,34] rel-kets[noise] |>
  intersection |result 35> => intn[noise] select[1,35] rel-kets[noise] |>
  intersection |result 36> => intn[noise] select[1,36] rel-kets[noise] |>
  intersection |result 37> => intn[noise] select[1,37] rel-kets[noise] |>
  intersection |result 38> => intn[noise] select[1,38] rel-kets[noise] |>
  intersection |result 39> => intn[noise] select[1,39] rel-kets[noise] |>
  intersection |result 40> => intn[noise] select[1,40] rel-kets[noise] |>
  
  intersection-similarity |*> #=> round[3] push-float 100 ket-simm(the |pattern>,ave |_self>)
  
  table[node,intersection-similarity] rel-kets[intersection]
  intersection-similarity |*> #=> round[3] push-float 100 ket-simm(the |pattern>,intersection |_self>)
  
  table[node,intersection-similarity] rel-kets[intersection]
  dump
  union |result 1> => union[noise] select[1,1] rel-kets[noise] |>
  union |result 2> => union[noise] select[1,2] rel-kets[noise] |>
  union |result 3> => union[noise] select[1,3] rel-kets[noise] |>
  union |result 4> => union[noise] select[1,4] rel-kets[noise] |>
  union |result 5> => union[noise] select[1,5] rel-kets[noise] |>
  union |result 6> => union[noise] select[1,6] rel-kets[noise] |>
  union |result 7> => union[noise] select[1,7] rel-kets[noise] |>
  union |result 8> => union[noise] select[1,8] rel-kets[noise] |>
  union |result 9> => union[noise] select[1,9] rel-kets[noise] |>
  union |result 10> => union[noise] select[1,10] rel-kets[noise] |>
  union |result 11> => union[noise] select[1,11] rel-kets[noise] |>
  union |result 12> => union[noise] select[1,12] rel-kets[noise] |>
  union |result 13> => union[noise] select[1,13] rel-kets[noise] |>
  union |result 14> => union[noise] select[1,14] rel-kets[noise] |>
  union |result 15> => union[noise] select[1,15] rel-kets[noise] |>
  union |result 16> => union[noise] select[1,16] rel-kets[noise] |>
  union |result 17> => union[noise] select[1,17] rel-kets[noise] |>
  union |result 18> => union[noise] select[1,18] rel-kets[noise] |>
  union |result 19> => union[noise] select[1,19] rel-kets[noise] |>
  union |result 20> => union[noise] select[1,20] rel-kets[noise] |>
  union |result 21> => union[noise] select[1,21] rel-kets[noise] |>
  union |result 22> => union[noise] select[1,22] rel-kets[noise] |>
  union |result 23> => union[noise] select[1,23] rel-kets[noise] |>
  union |result 24> => union[noise] select[1,24] rel-kets[noise] |>
  union |result 25> => union[noise] select[1,25] rel-kets[noise] |>
  union |result 26> => union[noise] select[1,26] rel-kets[noise] |>
  union |result 27> => union[noise] select[1,27] rel-kets[noise] |>
  union |result 28> => union[noise] select[1,28] rel-kets[noise] |>
  union |result 29> => union[noise] select[1,29] rel-kets[noise] |>
  union |result 30> => union[noise] select[1,30] rel-kets[noise] |>
  union |result 31> => union[noise] select[1,31] rel-kets[noise] |>
  union |result 32> => union[noise] select[1,32] rel-kets[noise] |>
  union |result 33> => union[noise] select[1,33] rel-kets[noise] |>
  union |result 34> => union[noise] select[1,34] rel-kets[noise] |>
  union |result 35> => union[noise] select[1,35] rel-kets[noise] |>
  union |result 36> => union[noise] select[1,36] rel-kets[noise] |>
  union |result 37> => union[noise] select[1,37] rel-kets[noise] |>
  union |result 38> => union[noise] select[1,38] rel-kets[noise] |>
  union |result 39> => union[noise] select[1,39] rel-kets[noise] |>
  union |result 40> => union[noise] select[1,40] rel-kets[noise] |>
  
  union-similarity |*> #=> round[3] push-float 100 ket-simm(the |pattern>,union |_self>)
  
  table[node,union-similarity] rel-kets[union]
  dump
  intersection |result 1> => common[noise] select[1,1] rel-kets[noise] |>
  intersection |result 2> => common[noise] select[1,2] rel-kets[noise] |>
  intersection |result 3> => common[noise] select[1,3] rel-kets[noise] |>
  intersection |result 4> => common[noise] select[1,4] rel-kets[noise] |>
  intersection |result 5> => common[noise] select[1,5] rel-kets[noise] |>
  intersection |result 6> => common[noise] select[1,6] rel-kets[noise] |>
  intersection |result 7> => common[noise] select[1,7] rel-kets[noise] |>
  intersection |result 8> => common[noise] select[1,8] rel-kets[noise] |>
  intersection |result 9> => common[noise] select[1,9] rel-kets[noise] |>
  intersection |result 10> => common[noise] select[1,10] rel-kets[noise] |>
  intersection |result 11> => common[noise] select[1,11] rel-kets[noise] |>
  intersection |result 12> => common[noise] select[1,12] rel-kets[noise] |>
  intersection |result 13> => common[noise] select[1,13] rel-kets[noise] |>
  intersection |result 14> => common[noise] select[1,14] rel-kets[noise] |>
  intersection |result 15> => common[noise] select[1,15] rel-kets[noise] |>
  intersection |result 16> => common[noise] select[1,16] rel-kets[noise] |>
  intersection |result 17> => common[noise] select[1,17] rel-kets[noise] |>
  intersection |result 18> => common[noise] select[1,18] rel-kets[noise] |>
  intersection |result 19> => common[noise] select[1,19] rel-kets[noise] |>
  intersection |result 20> => common[noise] select[1,20] rel-kets[noise] |>
  intersection |result 21> => common[noise] select[1,21] rel-kets[noise] |>
  intersection |result 22> => common[noise] select[1,22] rel-kets[noise] |>
  intersection |result 23> => common[noise] select[1,23] rel-kets[noise] |>
  intersection |result 24> => common[noise] select[1,24] rel-kets[noise] |>
  intersection |result 25> => common[noise] select[1,25] rel-kets[noise] |>
  intersection |result 26> => common[noise] select[1,26] rel-kets[noise] |>
  intersection |result 27> => common[noise] select[1,27] rel-kets[noise] |>
  intersection |result 28> => common[noise] select[1,28] rel-kets[noise] |>
  intersection |result 29> => common[noise] select[1,29] rel-kets[noise] |>
  intersection |result 30> => common[noise] select[1,30] rel-kets[noise] |>
  intersection |result 31> => common[noise] select[1,31] rel-kets[noise] |>
  intersection |result 32> => common[noise] select[1,32] rel-kets[noise] |>
  intersection |result 33> => common[noise] select[1,33] rel-kets[noise] |>
  intersection |result 34> => common[noise] select[1,34] rel-kets[noise] |>
  intersection |result 35> => common[noise] select[1,35] rel-kets[noise] |>
  intersection |result 36> => common[noise] select[1,36] rel-kets[noise] |>
  intersection |result 37> => common[noise] select[1,37] rel-kets[noise] |>
  intersection |result 38> => common[noise] select[1,38] rel-kets[noise] |>
  intersection |result 39> => common[noise] select[1,39] rel-kets[noise] |>
  intersection |result 40> => common[noise] select[1,40] rel-kets[noise] |>
  dump
  table[node,intersection-similarity] rel-kets[intersection]
  table[node,averaged-similarity,union-similarity,intersection-similarity] rel-kets[ave]
  history
  save noise-cancellation-examples.sw
  dump
  save history

2016-05-10
  noise |sample 1> => 8.061|1> + 2.144|2> + 3.749|3> + 11.656|4> + 2.335|5> + 6.679|6> + 5.458|7> + 14.955|8> + 6.734|9> + 9.639|10> + 11.801|11> + 9.762|12> + 15.098|13> + 8.657|14> + 8.411|15> + 7.55|16> + 9.24|17> + 4.531|18> + 4.42|19> + 7.876|20>
  
  noise |sample 2> => 12.197|1> + 6.465|2> + 5.672|3> + 7.038|4> + 4.493|5> + 3.716|6> + 1.93|7> + 15.524|8> + 10.011|9> + 9.177|10> + 7.496|11> + 6.823|12> + 13.817|13> + 11.266|14> + 9.228|15> + 5.334|16> + 9.559|17> + 7.922|18> + 5.391|19> + 10.906|20>
  
  noise |sample 3> => 7.932|1> + 5.21|2> + 8.998|3> + 8.669|4> + 2.358|5> + 5.696|6> + 7.614|7> + 10.174|8> + 3.875|9> + 6.975|10> + 5.189|11> + 11.149|12> + 15.103|13> + 8.615|14> + 3.841|15> + 7.22|16> + 6.21|17> + 4.176|18> + 6.28|19> + 12.215|20>
  
  dump
  simm-add[noise,1] rel-kets[noise]
  load noise-cancellation-examples.sw
  dump
  sadd |result 40> => simm-add[noise,1] select[1,40] rel-kets[noise] |>
  sadd-similarity |*> #=> round[3] push-float 100 ket-simm(the |pattern>,sadd |_self>)
  sadd-similarity |result 40>
  dump |*>
  sadd |result 1> => simm-add[noise,1] select[1,1] rel-kets[noise] |>
  sadd |result 2> => simm-add[noise,1] select[1,2] rel-kets[noise] |>
  sadd |result 3> => simm-add[noise,1] select[1,3] rel-kets[noise] |>
  sadd |result 4> => simm-add[noise,1] select[1,4] rel-kets[noise] |>
  sadd |result 5> => simm-add[noise,1] select[1,5] rel-kets[noise] |>
  sadd |result 6> => simm-add[noise,1] select[1,6] rel-kets[noise] |>
  sadd |result 7> => simm-add[noise,1] select[1,7] rel-kets[noise] |>
  sadd |result 8> => simm-add[noise,1] select[1,8] rel-kets[noise] |>
  sadd |result 9> => simm-add[noise,1] select[1,9] rel-kets[noise] |>
  sadd |result 10> => simm-add[noise,1] select[1,10] rel-kets[noise] |>
  sadd |result 11> => simm-add[noise,1] select[1,11] rel-kets[noise] |>
  sadd |result 12> => simm-add[noise,1] select[1,12] rel-kets[noise] |>
  sadd |result 13> => simm-add[noise,1] select[1,13] rel-kets[noise] |>
  sadd |result 14> => simm-add[noise,1] select[1,14] rel-kets[noise] |>
  sadd |result 15> => simm-add[noise,1] select[1,15] rel-kets[noise] |>
  sadd |result 16> => simm-add[noise,1] select[1,16] rel-kets[noise] |>
  sadd |result 17> => simm-add[noise,1] select[1,17] rel-kets[noise] |>
  sadd |result 18> => simm-add[noise,1] select[1,18] rel-kets[noise] |>
  sadd |result 19> => simm-add[noise,1] select[1,19] rel-kets[noise] |>
  sadd |result 20> => simm-add[noise,1] select[1,20] rel-kets[noise] |>
  sadd |result 21> => simm-add[noise,1] select[1,21] rel-kets[noise] |>
  sadd |result 22> => simm-add[noise,1] select[1,22] rel-kets[noise] |>
  sadd |result 23> => simm-add[noise,1] select[1,23] rel-kets[noise] |>
  sadd |result 24> => simm-add[noise,1] select[1,24] rel-kets[noise] |>
  sadd |result 25> => simm-add[noise,1] select[1,25] rel-kets[noise] |>
  sadd |result 26> => simm-add[noise,1] select[1,26] rel-kets[noise] |>
  sadd |result 27> => simm-add[noise,1] select[1,27] rel-kets[noise] |>
  sadd |result 28> => simm-add[noise,1] select[1,28] rel-kets[noise] |>
  sadd |result 29> => simm-add[noise,1] select[1,29] rel-kets[noise] |>
  sadd |result 30> => simm-add[noise,1] select[1,30] rel-kets[noise] |>
  sadd |result 31> => simm-add[noise,1] select[1,31] rel-kets[noise] |>
  sadd |result 32> => simm-add[noise,1] select[1,32] rel-kets[noise] |>
  sadd |result 33> => simm-add[noise,1] select[1,33] rel-kets[noise] |>
  sadd |result 34> => simm-add[noise,1] select[1,34] rel-kets[noise] |>
  sadd |result 35> => simm-add[noise,1] select[1,35] rel-kets[noise] |>
  sadd |result 36> => simm-add[noise,1] select[1,36] rel-kets[noise] |>
  sadd |result 37> => simm-add[noise,1] select[1,37] rel-kets[noise] |>
  sadd |result 38> => simm-add[noise,1] select[1,38] rel-kets[noise] |>
  sadd |result 39> => simm-add[noise,1] select[1,39] rel-kets[noise] |>
  sadd |result 40> => simm-add[noise,1] select[1,40] rel-kets[noise] |>
  
  sadd-similarity |*> #=> round[3] push-float 100 ket-simm(the |pattern>,sadd |_self>)
  table[node,sadd-similarity] rel-kets[sadd] 
  sadd-2 |result 1> => simm-add[noise,2] select[1,1] rel-kets[noise] |>
  sadd-2 |result 2> => simm-add[noise,2] select[1,2] rel-kets[noise] |>
  sadd-2 |result 3> => simm-add[noise,2] select[1,3] rel-kets[noise] |>
  sadd-2 |result 4> => simm-add[noise,2] select[1,4] rel-kets[noise] |>
  sadd-2 |result 5> => simm-add[noise,2] select[1,5] rel-kets[noise] |>
  sadd-2 |result 6> => simm-add[noise,2] select[1,6] rel-kets[noise] |>
  sadd-2 |result 7> => simm-add[noise,2] select[1,7] rel-kets[noise] |>
  sadd-2 |result 8> => simm-add[noise,2] select[1,8] rel-kets[noise] |>
  sadd-2 |result 9> => simm-add[noise,2] select[1,9] rel-kets[noise] |>
  sadd-2 |result 10> => simm-add[noise,2] select[1,10] rel-kets[noise] |>
  sadd-2 |result 11> => simm-add[noise,2] select[1,11] rel-kets[noise] |>
  sadd-2 |result 12> => simm-add[noise,2] select[1,12] rel-kets[noise] |>
  sadd-2 |result 13> => simm-add[noise,2] select[1,13] rel-kets[noise] |>
  sadd-2 |result 14> => simm-add[noise,2] select[1,14] rel-kets[noise] |>
  sadd-2 |result 15> => simm-add[noise,2] select[1,15] rel-kets[noise] |>
  sadd-2 |result 16> => simm-add[noise,2] select[1,16] rel-kets[noise] |>
  sadd-2 |result 17> => simm-add[noise,2] select[1,17] rel-kets[noise] |>
  sadd-2 |result 18> => simm-add[noise,2] select[1,18] rel-kets[noise] |>
  sadd-2 |result 19> => simm-add[noise,2] select[1,19] rel-kets[noise] |>
  sadd-2 |result 20> => simm-add[noise,2] select[1,20] rel-kets[noise] |>
  sadd-2 |result 21> => simm-add[noise,2] select[1,21] rel-kets[noise] |>
  sadd-2 |result 22> => simm-add[noise,2] select[1,22] rel-kets[noise] |>
  sadd-2 |result 23> => simm-add[noise,2] select[1,23] rel-kets[noise] |>
  sadd-2 |result 24> => simm-add[noise,2] select[1,24] rel-kets[noise] |>
  sadd-2 |result 25> => simm-add[noise,2] select[1,25] rel-kets[noise] |>
  sadd-2 |result 26> => simm-add[noise,2] select[1,26] rel-kets[noise] |>
  sadd-2 |result 27> => simm-add[noise,2] select[1,27] rel-kets[noise] |>
  sadd-2 |result 28> => simm-add[noise,2] select[1,28] rel-kets[noise] |>
  sadd-2 |result 29> => simm-add[noise,2] select[1,29] rel-kets[noise] |>
  sadd-2 |result 30> => simm-add[noise,2] select[1,30] rel-kets[noise] |>
  sadd-2 |result 31> => simm-add[noise,2] select[1,31] rel-kets[noise] |>
  sadd-2 |result 32> => simm-add[noise,2] select[1,32] rel-kets[noise] |>
  sadd-2 |result 33> => simm-add[noise,2] select[1,33] rel-kets[noise] |>
  sadd-2 |result 34> => simm-add[noise,2] select[1,34] rel-kets[noise] |>
  sadd-2 |result 35> => simm-add[noise,2] select[1,35] rel-kets[noise] |>
  sadd-2 |result 36> => simm-add[noise,2] select[1,36] rel-kets[noise] |>
  sadd-2 |result 37> => simm-add[noise,2] select[1,37] rel-kets[noise] |>
  sadd-2 |result 38> => simm-add[noise,2] select[1,38] rel-kets[noise] |>
  sadd-2 |result 39> => simm-add[noise,2] select[1,39] rel-kets[noise] |>
  sadd-2 |result 40> => simm-add[noise,2] select[1,40] rel-kets[noise] |>
  
  sadd-2-similarity |*> #=> round[3] push-float 100 ket-simm(the |pattern>,sadd-2 |_self>)
  table[node,sadd-2-similarity] rel-kets[sadd] 
  sadd-100 |result 1> => simm-add[noise,100] select[1,1] rel-kets[noise] |>
  sadd-100 |result 2> => simm-add[noise,100] select[1,2] rel-kets[noise] |>
  sadd-100 |result 3> => simm-add[noise,100] select[1,3] rel-kets[noise] |>
  sadd-100 |result 4> => simm-add[noise,100] select[1,4] rel-kets[noise] |>
  sadd-100 |result 5> => simm-add[noise,100] select[1,5] rel-kets[noise] |>
  sadd-100 |result 6> => simm-add[noise,100] select[1,6] rel-kets[noise] |>
  sadd-100 |result 7> => simm-add[noise,100] select[1,7] rel-kets[noise] |>
  sadd-100 |result 8> => simm-add[noise,100] select[1,8] rel-kets[noise] |>
  sadd-100 |result 9> => simm-add[noise,100] select[1,9] rel-kets[noise] |>
  sadd-100 |result 10> => simm-add[noise,100] select[1,10] rel-kets[noise] |>
  sadd-100 |result 11> => simm-add[noise,100] select[1,11] rel-kets[noise] |>
  sadd-100 |result 12> => simm-add[noise,100] select[1,12] rel-kets[noise] |>
  sadd-100 |result 13> => simm-add[noise,100] select[1,13] rel-kets[noise] |>
  sadd-100 |result 14> => simm-add[noise,100] select[1,14] rel-kets[noise] |>
  sadd-100 |result 15> => simm-add[noise,100] select[1,15] rel-kets[noise] |>
  sadd-100 |result 16> => simm-add[noise,100] select[1,16] rel-kets[noise] |>
  sadd-100 |result 17> => simm-add[noise,100] select[1,17] rel-kets[noise] |>
  sadd-100 |result 18> => simm-add[noise,100] select[1,18] rel-kets[noise] |>
  sadd-100 |result 19> => simm-add[noise,100] select[1,19] rel-kets[noise] |>
  sadd-100 |result 20> => simm-add[noise,100] select[1,20] rel-kets[noise] |>
  sadd-100 |result 21> => simm-add[noise,100] select[1,21] rel-kets[noise] |>
  sadd-100 |result 22> => simm-add[noise,100] select[1,22] rel-kets[noise] |>
  sadd-100 |result 23> => simm-add[noise,100] select[1,23] rel-kets[noise] |>
  sadd-100 |result 24> => simm-add[noise,100] select[1,24] rel-kets[noise] |>
  sadd-100 |result 25> => simm-add[noise,100] select[1,25] rel-kets[noise] |>
  sadd-100 |result 26> => simm-add[noise,100] select[1,26] rel-kets[noise] |>
  sadd-100 |result 27> => simm-add[noise,100] select[1,27] rel-kets[noise] |>
  sadd-100 |result 28> => simm-add[noise,100] select[1,28] rel-kets[noise] |>
  sadd-100 |result 29> => simm-add[noise,100] select[1,29] rel-kets[noise] |>
  sadd-100 |result 30> => simm-add[noise,100] select[1,30] rel-kets[noise] |>
  sadd-100 |result 31> => simm-add[noise,100] select[1,31] rel-kets[noise] |>
  sadd-100 |result 32> => simm-add[noise,100] select[1,32] rel-kets[noise] |>
  sadd-100 |result 33> => simm-add[noise,100] select[1,33] rel-kets[noise] |>
  sadd-100 |result 34> => simm-add[noise,100] select[1,34] rel-kets[noise] |>
  sadd-100 |result 35> => simm-add[noise,100] select[1,35] rel-kets[noise] |>
  sadd-100 |result 36> => simm-add[noise,100] select[1,36] rel-kets[noise] |>
  sadd-100 |result 37> => simm-add[noise,100] select[1,37] rel-kets[noise] |>
  sadd-100 |result 38> => simm-add[noise,100] select[1,38] rel-kets[noise] |>
  sadd-100 |result 39> => simm-add[noise,100] select[1,39] rel-kets[noise] |>
  sadd-100 |result 40> => simm-add[noise,100] select[1,40] rel-kets[noise] |>
  
  sadd-100-similarity |*> #=> round[3] push-float 100 ket-simm(the |pattern>,sadd-100 |_self>)
  table[node,sadd-100-similarity] rel-kets[sadd
  
  table[node,sadd-100-similarity] rel-kets[sadd]
  q

2016-05-11
  debug on
  0 range(|1>,|5>)
  q

2016-05-11
  debug on
  phi-sp |image: mnist-test-image-33> => 274.2242602026149|phi: 1> + 10.023392558063827|phi: 6> + 18.364081328902156|phi: 5> + 9.98451419180241|phi: 69> + 5.388183023494694|phi: 23> + 17.359842115442987|phi: 9> + 3.5817068213754593|phi: 84> + 4.345734236165881|phi: 50> + 6.168430882224693|phi: 22> + 0.8635518964584704|phi: 8> + 0.8342072150969733|phi: 211> + 1.768412542917417|phi: 178> + 3.4838102585982598|phi: 34> + 0.8491931825048336|phi: 132> + 0.8419640432769833|phi: 121> + 2.565686751075665|phi: 83> + 1.729108844130595|phi: 13> + 6.143046022843365|phi: 159> + 1.6879646600904588|phi: 112> + 1.6797578671212627|phi: 124> + 7.95630819084308|phi: 48> + 2.5696712058696685|phi: 57> + 3.352443055773|phi: 182> + 0.8312079550038919|phi: 107> + 2.5435514283652645|phi: 54> + 12.018053865285557|phi: 7> + 10.818357000492986|phi: 25> + 0.8714126223905118|phi: 197> + 0.8789831674205739|phi: 99> + 1.6093499435327026|phi: 131> + 0.8536141222010697|phi: 82> + 4.419457018454986|phi: 19> + 2.755170401925519|phi: 2> + 8.32148633607945|phi: 98> + 2.5922562438115957|phi: 59> + 1.6646610443279388|phi: 120> + 0.8667546110711745|phi: 102> + 1.741833051726027|phi: 39> + 9.384647856867085|phi: 3> + 3.5085782968696355|phi: 123> + 0.842573299152136|phi: 20> + 0.8557498871038385|phi: 16> + 1.736053971764289|phi: 201> + 0.8102253856057448|phi: 128> + 0.7961742183795157|phi: 110> + 0.8559644516983974|phi: 46> + 0.9017947092945502|phi: 31> + 1.692105035985009|phi: 44> + 0.8128190792218243|phi: 104> + 0.7734277154087124|phi: 227> + 0.7998331558599493|phi: 142> + 0.8486740530462976|phi: 100> + 2.5955498878632666|phi: 47> + 0.8368997209965123|phi: 49> + 0.7908068848130088|phi: 141> + 1.5964644313799934|phi: 220> + 0.7253727583643346|phi: 192> + 1.6078143248719345|phi: 210> + 0.8473364244445404|phi: 133> + 2.555053528562038|phi: 145> + 0.8320636256426158|phi: 66> + 0.8087271283916094|phi: 80> + 1.6936221986110034|phi: 160> + 0.854846845414471|phi: 11> + 1.7093379280902252|phi: 42> + 0.8533500063159861|phi: 90> + 0.8386340531938433|phi: 32> + 0.7775930811127942|phi: 195> + 0.8320024209966846|phi: 95> + 0.8004648492244383|phi: 38> + 0.8882670063132561|phi: 93> + 1.6849973653191403|phi: 21> + 1.7663899847821978|phi: 85> + 2.6766150060094867|phi: 56> + 2.5708015259097694|phi: 24> + 0.8659924976604293|phi: 30> + 0.8574949115260628|phi: 17>
  dump
  log phi-sp |image: mnist-test-image-33>
  log plus[1] phi-sp |image: mnist-test-image-33>
  q

2016-05-12
  load image-phi-superpositions-5.sw
  dump
  rel-kets[phi-sp]
  select[1,10] rel-kets[phi-sp]
  simm-op |*> #=> 100 self-similar[phi-sp] |_self>
  simm-op |image: mnist-test-image-1>
  map[simm-op,similarity] select[1,10] rel-kets[phi-sp]
  matrix[similarity]
  history
  rel-kets[log-phi-sp]
  save history

2016-05-12
  load image-phi-superpositions-5.sw
  dump
  rel-kets[phi-sp]
  select[1,10] rel-kets[phi-sp]
  simm-op |*> #=> 100 self-similar[phi-sp] |_self>
  simm-op |image: mnist-test-image-1>
  map[simm-op,similarity] select[1,10] rel-kets[phi-sp]
  matrix[similarity]
  history
  rel-kets[log-phi-sp]
  save history
  log-simm-op |*> #=> 100 self-similar[log-phi-sp] |_self>
  map[log-simm-op,log-similarity] select[1,10] rel-kets[log-phi-sp]
  matrix[log-similarity]
  save history

2016-05-12
  load image-phi-superpositions-5.sw
  dump
  rel-kets[phi-sp]
  select[1,10] rel-kets[phi-sp]
  simm-op |*> #=> 100 self-similar[phi-sp] |_self>
  simm-op |image: mnist-test-image-1>
  map[simm-op,similarity] select[1,10] rel-kets[phi-sp]
  matrix[similarity]
  history
  rel-kets[log-phi-sp]
  save history
  log-simm-op |*> #=> 100 self-similar[log-phi-sp] |_self>
  map[log-simm-op,log-similarity] select[1,10] rel-kets[log-phi-sp]
  matrix[log-similarity]
  save history
  history
  map[log-simm-op,log-similarity] rel-kets[log-phi-sp]
  history
  match-1 |*> #=> select[1,1] log-similarity |_self>
  match-2 |*> #=> select[2,2] log-similarity |_self>
  match-3 |*> #=> select[3,3] log-similarity |_self>
  match-4 |*> #=> select[4,4] log-similarity |_self>
  match-5 |*> #=> select[5,5] log-similarity |_self>
  
  table[image,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  history
  log-simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[log-simm-op,log-similarity] rel-kets[log-phi-sp]
  table[image,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  save history

2016-05-12
  load image-phi-superpositions-5.sw
  dump
  rel-kets[phi-sp]
  select[1,10] rel-kets[phi-sp]
  simm-op |*> #=> 100 self-similar[phi-sp] |_self>
  simm-op |image: mnist-test-image-1>
  map[simm-op,similarity] select[1,10] rel-kets[phi-sp]
  matrix[similarity]
  history
  rel-kets[log-phi-sp]
  save history
  log-simm-op |*> #=> 100 self-similar[log-phi-sp] |_self>
  map[log-simm-op,log-similarity] select[1,10] rel-kets[log-phi-sp]
  matrix[log-similarity]
  save history
  history
  map[log-simm-op,log-similarity] rel-kets[log-phi-sp]
  history
  match-1 |*> #=> select[1,1] log-similarity |_self>
  match-2 |*> #=> select[2,2] log-similarity |_self>
  match-3 |*> #=> select[3,3] log-similarity |_self>
  match-4 |*> #=> select[4,4] log-similarity |_self>
  match-5 |*> #=> select[5,5] log-similarity |_self>
  
  table[image,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  history
  log-simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[log-simm-op,log-similarity] rel-kets[log-phi-sp]
  table[image,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  save history
  history
  load mnist-test-labels.sw
  dump
  test-label |image: mnist-test-image-1>
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] log-similarity |_self>
    match-2 |*> #=> test-label select[2,2] log-similarity |_self>
    match-3 |*> #=> test-label select[3,3] log-similarity |_self>
    match-4 |*> #=> test-label select[4,4] log-similarity |_self>
  table[image,match-0,match-1,match-2,match-3,match-4] rel-kets[log-similarity]
  
  context
  icontext
  load mnist-test-labels.sw
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] log-similarity |_self>
    match-2 |*> #=> test-label select[2,2] log-similarity |_self>
    match-3 |*> #=> test-label select[3,3] log-similarity |_self>
    match-4 |*> #=> test-label select[4,4] log-similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4] rel-kets[log-similarity]
    match-5 |*> #=> test-label select[5,5] log-similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  save history

2016-05-12
  load image-phi-superpositions-5.sw
  dump
  rel-kets[phi-sp]
  select[1,10] rel-kets[phi-sp]
  simm-op |*> #=> 100 self-similar[phi-sp] |_self>
  simm-op |image: mnist-test-image-1>
  map[simm-op,similarity] select[1,10] rel-kets[phi-sp]
  matrix[similarity]
  history
  rel-kets[log-phi-sp]
  save history
  log-simm-op |*> #=> 100 self-similar[log-phi-sp] |_self>
  map[log-simm-op,log-similarity] select[1,10] rel-kets[log-phi-sp]
  matrix[log-similarity]
  save history
  history
  map[log-simm-op,log-similarity] rel-kets[log-phi-sp]
  history
  match-1 |*> #=> select[1,1] log-similarity |_self>
  match-2 |*> #=> select[2,2] log-similarity |_self>
  match-3 |*> #=> select[3,3] log-similarity |_self>
  match-4 |*> #=> select[4,4] log-similarity |_self>
  match-5 |*> #=> select[5,5] log-similarity |_self>
  
  table[image,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  history
  log-simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[log-simm-op,log-similarity] rel-kets[log-phi-sp]
  table[image,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  save history
  history
  load mnist-test-labels.sw
  dump
  test-label |image: mnist-test-image-1>
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] log-similarity |_self>
    match-2 |*> #=> test-label select[2,2] log-similarity |_self>
    match-3 |*> #=> test-label select[3,3] log-similarity |_self>
    match-4 |*> #=> test-label select[4,4] log-similarity |_self>
  table[image,match-0,match-1,match-2,match-3,match-4] rel-kets[log-similarity]
  
  context
  icontext
  load mnist-test-labels.sw
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] log-similarity |_self>
    match-2 |*> #=> test-label select[2,2] log-similarity |_self>
    match-3 |*> #=> test-label select[3,3] log-similarity |_self>
    match-4 |*> #=> test-label select[4,4] log-similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4] rel-kets[log-similarity]
    match-5 |*> #=> test-label select[5,5] log-similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  save history
  history
  history 1000
  
  equal(|a>,|a> + |b>)
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  equal? |image: mnist-test-image-1>
  table[image,match-0,match-1,match-2,match-3,match-4,equal?] rel-kets[log-similarity]
  
  is-equal? |*> #=> if(is-greater-equal-than[0.5] push-float equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[log-similarity]
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[log-similarity]
  save history

2016-05-12
  load raw-mnist-test-100-superpositions.sw
  simm-op |*> #=> 100 similar[pixels] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  map[simm-op,similarity] rel-kets[pixels]
    match-1 |*> #=> select[1,1] similarity |_self>
    match-2 |*> #=> select[2,2] similarity |_self>
    match-3 |*> #=> select[3,3] similarity |_self>
    match-4 |*> #=> select[4,4] similarity |_self>
    match-5 |*> #=> select[5,5] similarity |_self>
  
    table[image,match-1,match-2,match-3,match-4,match-5] rel-kets[similarity]
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4,match-5] rel-kets[similarity]
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  save history

2016-05-12
  load image-phi-superpositions-5--t_0_4.sw
  history
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  save history

2016-05-14
  load image-phi-superpositions-5--t_0_4.sw
  history
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  save history
  factor |number: 313>
  q

2016-05-14
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  history
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  history
  save history

2016-05-15
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  history
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  history
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  history
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
  table[image,match-0] rel-kets[log-phi-sp]
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  phi-sp |image: mnist-test-image-999>
  phi-simm-op |*> #=> 100 similar[phi-sp] |_self>
  map[phi-simm-op,phi-similarity] rel-kets[phi-sp]
  dump |*>
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[phi-similarity]
  save history

2016-05-15
  load image-phi-superpositions-5.sw
  dump
  rel-kets[phi-sp]
  select[1,10] rel-kets[phi-sp]
  simm-op |*> #=> 100 self-similar[phi-sp] |_self>
  simm-op |image: mnist-test-image-1>
  map[simm-op,similarity] select[1,10] rel-kets[phi-sp]
  matrix[similarity]
  history
  rel-kets[log-phi-sp]
  save history
  log-simm-op |*> #=> 100 self-similar[log-phi-sp] |_self>
  map[log-simm-op,log-similarity] select[1,10] rel-kets[log-phi-sp]
  matrix[log-similarity]
  save history
  history
  map[log-simm-op,log-similarity] rel-kets[log-phi-sp]
  history
  match-1 |*> #=> select[1,1] log-similarity |_self>
  match-2 |*> #=> select[2,2] log-similarity |_self>
  match-3 |*> #=> select[3,3] log-similarity |_self>
  match-4 |*> #=> select[4,4] log-similarity |_self>
  match-5 |*> #=> select[5,5] log-similarity |_self>
  
  table[image,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  history
  log-simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[log-simm-op,log-similarity] rel-kets[log-phi-sp]
  table[image,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  save history
  history
  load mnist-test-labels.sw
  dump
  test-label |image: mnist-test-image-1>
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] log-similarity |_self>
    match-2 |*> #=> test-label select[2,2] log-similarity |_self>
    match-3 |*> #=> test-label select[3,3] log-similarity |_self>
    match-4 |*> #=> test-label select[4,4] log-similarity |_self>
  table[image,match-0,match-1,match-2,match-3,match-4] rel-kets[log-similarity]
  
  context
  icontext
  load mnist-test-labels.sw
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] log-similarity |_self>
    match-2 |*> #=> test-label select[2,2] log-similarity |_self>
    match-3 |*> #=> test-label select[3,3] log-similarity |_self>
    match-4 |*> #=> test-label select[4,4] log-similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4] rel-kets[log-similarity]
    match-5 |*> #=> test-label select[5,5] log-similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4,match-5] rel-kets[log-similarity]
  save history
  history
  history 1000
  
  equal(|a>,|a> + |b>)
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  equal? |image: mnist-test-image-1>
  table[image,match-0,match-1,match-2,match-3,match-4,equal?] rel-kets[log-similarity]
  
  is-equal? |*> #=> if(is-greater-equal-than[0.5] push-float equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[log-similarity]
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[log-similarity]
  save history
  history
  q

2016-05-15
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  history
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  history
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  history
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
  table[image,match-0] rel-kets[log-phi-sp]
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  phi-sp |image: mnist-test-image-999>
  phi-simm-op |*> #=> 100 similar[phi-sp] |_self>
  map[phi-simm-op,phi-similarity] rel-kets[phi-sp]
  dump |*>
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[phi-similarity]
  save history
  debug on
  clean |x>
  debug off
  q

2016-05-15
  load fred-sam-friends.sw
  dump
  learn-ket-norms[friends,norm-ket,1]
  dump
  friends split |Fred Sam>
  norm-ket friends split |Fred Sam>
  history
  learn-ket-norms[friends,norm-ket,10]
  dump
  norm-ket friends split |Fred Sam>
  history
  save history

2016-05-15
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history

2016-05-15
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history
  history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history

2016-05-15
  load fred-sam-friends.sw
  dump
  learn-ket-norms[friends,norm-ket,1]
  dump
  friends split |Fred Sam>
  norm-ket friends split |Fred Sam>
  history
  learn-ket-norms[friends,norm-ket,10]
  dump
  norm-ket friends split |Fred Sam>
  history
  save history
  q

2016-05-15
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history
  history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  load mnist-test-labels.sw
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  dump |phi: 156>
  
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  norm-sp-op |*> #=> norm-ket log-phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[log-phi-sp]
  dump
  
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  save history

2016-05-15
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history
  history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  load mnist-test-labels.sw
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  dump |phi: 156>
  
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  norm-sp-op |*> #=> norm-ket log-phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[log-phi-sp]
  dump
  
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  save history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  load mnist-test-labels.sw
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history

2016-05-15
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  average-categorize[log-phi-sp,0.7,rho,layer-2]
  history
  dump
  save history

2016-05-16
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history
  history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  load mnist-test-labels.sw
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  dump |phi: 156>
  
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  norm-sp-op |*> #=> norm-ket log-phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[log-phi-sp]
  dump
  
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  save history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  load mnist-test-labels.sw
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  history
  h |*> #=> normalize[100] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,match-1,h,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  save history

2016-05-16
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history
  history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  load mnist-test-labels.sw
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  dump |phi: 156>
  
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  norm-sp-op |*> #=> norm-ket log-phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[log-phi-sp]
  dump
  
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  save history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  load mnist-test-labels.sw
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  history
  h |*> #=> normalize[100] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,match-1,h,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  save history

2016-05-16
  coeff-sort rank split |a b c d>
  quit

2016-05-16
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history
  history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  load mnist-test-labels.sw
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  dump |phi: 156>
  
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  norm-sp-op |*> #=> norm-ket log-phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[log-phi-sp]
  dump
  
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  save history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  load mnist-test-labels.sw
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  history
  h |*> #=> normalize[100] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,match-1,h,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  save history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  .
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  test-label |image: mnist-test-image-999>
  norm |1> => .007936507936507|_self>
  norm |2> => .008620689655172|_self>
  norm |3> => .009345794392523|_self>
  norm |4> => .009090909090909|_self>
  norm |5> => .011494252873563|_self>
  norm |6> => .011494252873563|_self>
  norm |7> => .010101010101010|_self>
  norm |8> => .011235955056179|_self>
  norm |9> => .010638297872340|_self>
  norm |0> => .011764705882352|_self>
  
  
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,10] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  save history

2016-05-16
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history
  history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  load mnist-test-labels.sw
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  dump |phi: 156>
  
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  norm-sp-op |*> #=> norm-ket log-phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[log-phi-sp]
  dump
  
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  save history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  load mnist-test-labels.sw
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  history
  h |*> #=> normalize[100] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,match-1,h,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  save history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  .
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  test-label |image: mnist-test-image-999>
  norm |1> => .007936507936507|_self>
  norm |2> => .008620689655172|_self>
  norm |3> => .009345794392523|_self>
  norm |4> => .009090909090909|_self>
  norm |5> => .011494252873563|_self>
  norm |6> => .011494252873563|_self>
  norm |7> => .010101010101010|_self>
  norm |8> => .011235955056179|_self>
  norm |9> => .010638297872340|_self>
  norm |0> => .011764705882352|_self>
  
  
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,10] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  save history
  history
  is-equal? rel-kets[similarity]
  save history

2016-05-16
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history
  history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  load mnist-test-labels.sw
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  dump |phi: 156>
  
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  norm-sp-op |*> #=> norm-ket log-phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[log-phi-sp]
  dump
  
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  save history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  load mnist-test-labels.sw
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  history
  h |*> #=> normalize[100] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,match-1,h,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  save history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  .
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  test-label |image: mnist-test-image-999>
  norm |1> => .007936507936507|_self>
  norm |2> => .008620689655172|_self>
  norm |3> => .009345794392523|_self>
  norm |4> => .009090909090909|_self>
  norm |5> => .011494252873563|_self>
  norm |6> => .011494252873563|_self>
  norm |7> => .010101010101010|_self>
  norm |8> => .011235955056179|_self>
  norm |9> => .010638297872340|_self>
  norm |0> => .011764705882352|_self>
  
  
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,10] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  save history
  history
  is-equal? rel-kets[similarity]
  save history
  history
  test-label rel-kets[similarity]
  ket-sort test-labels rel-kets[similarity]
  history
  ket-sort test-label rel-kets[similarity]
  save history

2016-05-16
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history
  history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  load mnist-test-labels.sw
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  dump |phi: 156>
  
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  norm-sp-op |*> #=> norm-ket log-phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[log-phi-sp]
  dump
  
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  save history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  load mnist-test-labels.sw
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  history
  h |*> #=> normalize[100] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,match-1,h,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  save history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  .
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  test-label |image: mnist-test-image-999>
  norm |1> => .007936507936507|_self>
  norm |2> => .008620689655172|_self>
  norm |3> => .009345794392523|_self>
  norm |4> => .009090909090909|_self>
  norm |5> => .011494252873563|_self>
  norm |6> => .011494252873563|_self>
  norm |7> => .010101010101010|_self>
  norm |8> => .011235955056179|_self>
  norm |9> => .010638297872340|_self>
  norm |0> => .011764705882352|_self>
  
  
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,10] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  save history
  history
  is-equal? rel-kets[similarity]
  save history
  history
  test-label rel-kets[similarity]
  ket-sort test-labels rel-kets[similarity]
  history
  ket-sort test-label rel-kets[similarity]
  save history
  history
  is-equal? rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] drop-below[60] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] drop-below[70] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  ---------------------------------------------------------------
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] drop-below[65] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] drop-below[65] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] drop-below[60] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] drop-below[70] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  save history

2016-05-17
  load raw-mnist-test-100-superpositions.sw
  simm-op |*> #=> 100 similar[pixels] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  map[simm-op,similarity] rel-kets[pixels]
    match-1 |*> #=> select[1,1] similarity |_self>
    match-2 |*> #=> select[2,2] similarity |_self>
    match-3 |*> #=> select[3,3] similarity |_self>
    match-4 |*> #=> select[4,4] similarity |_self>
    match-5 |*> #=> select[5,5] similarity |_self>
  
    table[image,match-1,match-2,match-3,match-4,match-5] rel-kets[similarity]
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4,match-5] rel-kets[similarity]
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  save history
  history
  q

2016-05-17
  log+1 split |a b c d>
  log+1 9 split |a b c d>
  log+1[10] 9 split |a b c d>
  q

2016-05-17
  log_1[10] 9 |x>
  debug on
  log_1[10] 9 |x>
  q

2016-05-17
  log+1[10] |x>
  log+1 |x>
  log+1 0|x>
  log+1 2|x>
  q

2016-05-17
  log+1[10] 9|x>
  log+1[10] 99|x>
  q

2016-05-20
  load image-phi-superpositions-test-1000--5--t_0_4--v2.sw
  dump
  how-many rel-kets[log-phi-sp]
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  history
  ket-sort test-label rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  is-equal? rel-kets[similarity]
  0.5 1547 |x>
  save history

2016-05-21
  load image-phi-superpositions-test-1000--5--t_0_4--v2.sw
  dump
  how-many rel-kets[log-phi-sp]
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  history
  ket-sort test-label rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  is-equal? rel-kets[similarity]
  0.5 1547 |x>
  save history
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  is-equal? rel-kets[similarity]
  0.5 1587 |x>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  0.5 is-equal? rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.5 is-equal? ket-sort rel-kets[similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.5 is-equal? ket-sort rel-kets[similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.5 is-equal? ket-sort rel-kets[similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.5 is-equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.5 is-equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.5 is-equal? ket-sort rel-kets[similarity] |>
  
  rel-kets[score]
  table[top-k,score] rel-kets[score]
  0.05 equal? ket-sort rel-kets[similarity] |>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  table[top-k,score] rel-kets[score]
  equal(|a>,|b>)
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  save history

2016-05-21
  load image-phi-superpositions-test-1000--5--t_0_4--v2.sw
  dump
  how-many rel-kets[log-phi-sp]
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  history
  ket-sort test-label rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  is-equal? rel-kets[similarity]
  0.5 1547 |x>
  save history
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  is-equal? rel-kets[similarity]
  0.5 1587 |x>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  0.5 is-equal? rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.5 is-equal? ket-sort rel-kets[similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.5 is-equal? ket-sort rel-kets[similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.5 is-equal? ket-sort rel-kets[similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.5 is-equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.5 is-equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.5 is-equal? ket-sort rel-kets[similarity] |>
  
  rel-kets[score]
  table[top-k,score] rel-kets[score]
  0.05 equal? ket-sort rel-kets[similarity] |>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  table[top-k,score] rel-kets[score]
  equal(|a>,|b>)
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  save history
  q

2016-05-22
  load image-phi-superpositions--60k-train-label-averaged--5--t_0_8.sw
  how-many rel-kets[log-phi-sp]
  simm-op |*> #=> 100 select[1,50] similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
  ket-sort test-label rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  save history

2016-05-22
  load image-phi-superpositions--60k-train-label-averaged--5--t_0_8.sw
  how-many rel-kets[log-phi-sp]
  simm-op |*> #=> 100 select[1,50] similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
  ket-sort test-label rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  save history
  history
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  simm-op |*> #=> 100 select[1,50] similar[phi-sp] |_self>
  map[simm-op,similarity] rel-kets[phi-sp]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  history
  q

2016-05-23
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[phi-sp,norm-ket,100]
  history
  dump
  
  norm-sp-op |*> #=> norm-ket phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[phi-sp]
  dump
  
  load mnist-test-labels.sw
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  
  select[1,10] normed-phi-simm-op |image: mnist-test-image-1000>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  normed-phi-similarity |image: mnist-test-image-1>
  save history
  history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  load mnist-test-labels.sw
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  dump |phi: 156>
  
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  learn-ket-norms[log-phi-sp,norm-ket,100]
  dump
  norm-sp-op |*> #=> norm-ket log-phi-sp |_self>
  map[norm-sp-op,normed-phi-sp] rel-kets[log-phi-sp]
  dump
  
  normed-phi-simm-op |*> #=> 100 similar[normed-phi-sp] |_self>
  map[normed-phi-simm-op,normed-phi-similarity] rel-kets[normed-phi-sp]
  save history
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] normed-phi-similarity |_self>
    match-2 |*> #=> test-label select[2,2] normed-phi-similarity |_self>
    match-3 |*> #=> test-label select[3,3] normed-phi-similarity |_self>
    match-4 |*> #=> test-label select[4,4] normed-phi-similarity |_self>
    match-5 |*> #=> test-label select[5,5] normed-phi-similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  load mnist-test-labels.sw
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[normed-phi-similarity]
  save history
  history
  h |*> #=> normalize[100] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,match-1,h,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] normed-phi-similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,is-equal?] rel-kets[normed-phi-similarity]
  save history
  reset
  load image-phi-superpositions-test-1000--5--t_0_4.sw
  dump
  simm-op |*> #=> 100 similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
  equal? |*> #=> equal(100 match-0 |_self>,match-1 |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  equal? |*> #=> equal(100 match-0 |_self>,h |_self>)
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  save history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  .
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  history
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  test-label |image: mnist-test-image-999>
  norm |1> => .007936507936507|_self>
  norm |2> => .008620689655172|_self>
  norm |3> => .009345794392523|_self>
  norm |4> => .009090909090909|_self>
  norm |5> => .011494252873563|_self>
  norm |6> => .011494252873563|_self>
  norm |7> => .010101010101010|_self>
  norm |8> => .011235955056179|_self>
  norm |9> => .010638297872340|_self>
  norm |0> => .011764705882352|_self>
  
  
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,12] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,10] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,13] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort norm test-label select[1,14] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  save history
  history
  is-equal? rel-kets[similarity]
  save history
  history
  test-label rel-kets[similarity]
  ket-sort test-labels rel-kets[similarity]
  history
  ket-sort test-label rel-kets[similarity]
  save history
  history
  is-equal? rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] drop-below[60] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] drop-below[70] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  ---------------------------------------------------------------
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] drop-below[65] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] drop-below[65] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] drop-below[60] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] drop-below[70] similarity |_self>
  table[image,match-0,h,match-1,match-2,match-3,match-4,match-5,is-equal?] rel-kets[similarity]
  save history
  history
  q

2016-05-24
  load image-phi-superpositions--test-2000--phi-transformed-using-average-labels--k_5--t_0_8.sw
  dump
  simm-op |*> #=> 100 select[1,50] similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  save history

2016-05-25
  load image-phi-superpositions--test-2000--phi-transformed-using-average-labels--k_5--t_0_8.sw
  dump
  simm-op |*> #=> 100 select[1,50] similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels.sw
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  save history
  q

2016-06-01
  load image-phi-superpositions--test-2000--using-edge-enhanced-features--k_5--t_0_4.sw
  simm-op |*> #=> 100 select[1,50] similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels--edge-enhanced.sw
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  save history

2016-06-02
  load image-phi-superpositions--test-2000--using-edge-enhanced-features--k_5--t_0_4.sw
  simm-op |*> #=> 100 select[1,50] similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels--edge-enhanced.sw
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  save history
  y
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
    table[image,match-0,match-1,match-2,match-3,match-4,match-5] rel-kets[similarity]
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  save history

2016-06-02
  load image-phi-superpositions--test-2000--using-edge-enhanced-features--k_5--t_0_4.sw
  simm-op |*> #=> 100 select[1,50] similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels--edge-enhanced.sw
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  save history
  y
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
    table[image,match-0,match-1,match-2,match-3,match-4,match-5] rel-kets[similarity]
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  save history
  
  history
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] ket-sort rel-kets[similarity]
  
  history
  is-equal? |*> #=> clean if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] ket-sort rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,10] similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] ket-sort rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  
  table[top-k,score] rel-kets[score]
  save history

2016-06-02
  load image-phi-superpositions--test-2000--using-edge-enhanced-features--k_5--t_0_4.sw
  simm-op |*> #=> 100 select[1,50] similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels--edge-enhanced.sw
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  save history
  y
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
    table[image,match-0,match-1,match-2,match-3,match-4,match-5] rel-kets[similarity]
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  save history
  
  history
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] ket-sort rel-kets[similarity]
  
  history
  is-equal? |*> #=> clean if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] ket-sort rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,10] similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] ket-sort rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  
  table[top-k,score] rel-kets[score]
  save history
  similarity |image: mnist-test-image-10--edge-enhanced-20>
  select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  test-label select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  clean select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  test-label clean select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  test-label |image: mnist-test-image-10--edge-enhanced-20>
  coeff-sort test-label clean select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  coeff-sort test-label select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  select[1,1] coeff-sort test-label select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  select[1,1] coeff-sort test-label clean select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  normalize[100] select[1,1] coeff-sort test-label clean select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  table[top-k,score] rel-kets[score]
  save history

2016-06-04
  load image-phi-superpositions--test-2000--using-edge-enhanced-features--k_5--t_0_4.sw
  simm-op |*> #=> 100 select[1,50] similar[log-phi-sp] |_self>
  map[simm-op,similarity] rel-kets[log-phi-sp]
  load mnist-test-labels--edge-enhanced.sw
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  table[top-k,score] rel-kets[score]
  save history
  y
  
    match-0 |*> #=> test-label |_self>
    match-1 |*> #=> test-label select[1,1] similarity |_self>
    match-2 |*> #=> test-label select[2,2] similarity |_self>
    match-3 |*> #=> test-label select[3,3] similarity |_self>
    match-4 |*> #=> test-label select[4,4] similarity |_self>
    match-5 |*> #=> test-label select[5,5] similarity |_self>
  
    table[image,match-0,match-1,match-2,match-3,match-4,match-5] rel-kets[similarity]
  equal? |*> #=> equal(100 test-label |_self>,h |_self>)
  is-equal? |*> #=> if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |_self>
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] rel-kets[similarity]
  save history
  
  history
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] ket-sort rel-kets[similarity]
  
  history
  is-equal? |*> #=> clean if(is-coeff-greater-than[0.5] equal? |_self>,equal? |_self>,|False>)
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] ket-sort rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,10] similarity |_self>
  
  table[image,match-0,match-1,match-2,match-3,match-4,is-equal?] ket-sort rel-kets[similarity]
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  score |top 1>
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,1] similarity |_self>
  score |top 1> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,2] similarity |_self>
  score |top 2> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,3] similarity |_self>
  score |top 3> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,4] similarity |_self>
  score |top 4> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,5] similarity |_self>
  score |top 5> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,6] similarity |_self>
  score |top 6> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,7] similarity |_self>
  score |top 7> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,8] similarity |_self>
  score |top 8> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,9] similarity |_self>
  score |top 9> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,10] similarity |_self>
  score |top 10> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,11] similarity |_self>
  score |top 11> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,12] similarity |_self>
  score |top 12> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,13] similarity |_self>
  score |top 13> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,14] similarity |_self>
  score |top 14> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,15] similarity |_self>
  score |top 15> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,16] similarity |_self>
  score |top 16> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,17] similarity |_self>
  score |top 17> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,18] similarity |_self>
  score |top 18> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,19] similarity |_self>
  score |top 19> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,20] similarity |_self>
  score |top 20> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,21] similarity |_self>
  score |top 21> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,22] similarity |_self>
  score |top 22> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,23] similarity |_self>
  score |top 23> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,24] similarity |_self>
  score |top 24> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,25] similarity |_self>
  score |top 25> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,26] similarity |_self>
  score |top 26> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,27] similarity |_self>
  score |top 27> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,28] similarity |_self>
  score |top 28> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,29] similarity |_self>
  score |top 29> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  h |*> #=> normalize[100] select[1,1] coeff-sort test-label clean select[1,30] similarity |_self>
  score |top 30> => 0.05 equal? ket-sort rel-kets[similarity] |>
  
  
  table[top-k,score] rel-kets[score]
  save history
  similarity |image: mnist-test-image-10--edge-enhanced-20>
  select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  test-label select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  clean select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  test-label clean select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  test-label |image: mnist-test-image-10--edge-enhanced-20>
  coeff-sort test-label clean select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  coeff-sort test-label select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  select[1,1] coeff-sort test-label select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  normalize[100] select[1,1] coeff-sort test-label select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  select[1,1] coeff-sort test-label clean select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  normalize[100] select[1,1] coeff-sort test-label clean select[1,10] similarity |image: mnist-test-image-10--edge-enhanced-20>
  table[top-k,score] rel-kets[score]
  save history
  history
  q

